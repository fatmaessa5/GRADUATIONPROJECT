
Lane_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002698  0000272c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080016e  0080016e  0000283a  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000189b  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00006bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00006d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00008c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00009d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ad78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000aef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000b1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_1>
       8:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_10>
      2c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <main>
      8a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 37 13 	jmp	0x266e	; 0x266e <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 37 13 	jmp	0x266e	; 0x266e <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <__vector_11>:
#define Timer0_WG_PWM_Reserved_Option   (u8)1

static void (*Timer0_Tovf_cbk_Fptr)(void) = NULL;
static void (*Timer0_Ctc_cbk_Fptr)(void) = NULL;

ISR(TIMER0_OVF_vect){
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Tovf_cbk_Fptr != NULL){
     d98:	80 91 6e 01 	lds	r24, 0x016E
     d9c:	90 91 6f 01 	lds	r25, 0x016F
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <__vector_11+0x40>
		Timer0_Tovf_cbk_Fptr();
     da4:	e0 91 6e 01 	lds	r30, 0x016E
     da8:	f0 91 6f 01 	lds	r31, 0x016F
     dac:	09 95       	icall
	}
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_10>:

ISR(TIMER0_COMP_vect){
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Ctc_cbk_Fptr != NULL){
     dfe:	80 91 70 01 	lds	r24, 0x0170
     e02:	90 91 71 01 	lds	r25, 0x0171
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_10+0x40>
		Timer0_Ctc_cbk_Fptr();
     e0a:	e0 91 70 01 	lds	r30, 0x0170
     e0e:	f0 91 71 01 	lds	r31, 0x0171
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <Timer0_vidinit>:

static Timer0_Prescaller_e TIMER0_CLK_SLCT = Timer0_Prescaller_e_No;

void Timer0_vidinit(void){
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0_REG, 3);
     e42:	a3 e5       	ldi	r26, 0x53	; 83
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e3 e5       	ldi	r30, 0x53	; 83
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	87 7f       	andi	r24, 0xF7	; 247
     e4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG, 6);
     e50:	a3 e5       	ldi	r26, 0x53	; 83
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 7b       	andi	r24, 0xBF	; 191
     e5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG, 5);
#elif TIMER0_COMPARE_OUTPUT_MODE == TOGGLE_ON_CM_MODE
	SET_BIT(TCCR0_REG, 4);
	CLR_BIT(TCCR0_REG, 5);
#elif TIMER0_COMPARE_OUTPUT_MODE == CLEAR_ON_CM_MODE || TIMER0_COMPARE_OUTPUT_MODE == INVERTED_MODE
	CLR_BIT(TCCR0_REG, 4);
     e5e:	a3 e5       	ldi	r26, 0x53	; 83
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e3 e5       	ldi	r30, 0x53	; 83
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7e       	andi	r24, 0xEF	; 239
     e6a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 5);
     e6c:	a3 e5       	ldi	r26, 0x53	; 83
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e3 e5       	ldi	r30, 0x53	; 83
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 62       	ori	r24, 0x20	; 32
     e78:	8c 93       	st	X, r24
#elif TIMER0_COMPARE_OUTPUT_MODE == SET_ON_CM_MODE || TIMER0_COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
	SET_BIT(TCCR0_REG, 5);
	SET_BIT(TCCR0_REG, 5);
#endif
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <Timer0_vidSlctPrescaller>:

void Timer0_vidSlctPrescaller(Timer0_Prescaller_e Copy_Timer0_Prescaller_e_value){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Timer0_Prescaller_e_value >= Timer0_Prescaller_e_No &&
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	88 23       	and	r24, r24
     e90:	31 f0       	breq	.+12     	; 0xe9e <Timer0_vidSlctPrescaller+0x1e>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	18 f4       	brcc	.+6      	; 0xe9e <Timer0_vidSlctPrescaller+0x1e>
			Copy_Timer0_Prescaller_e_value <= Timer0_Prescaller_e_Ext_Rising_Edge ){
		TIMER0_CLK_SLCT = Copy_Timer0_Prescaller_e_value;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	80 93 68 01 	sts	0x0168, r24
	}
}
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <Timer0_vidSetPreloadVlaue>:

void Timer0_vidSetPreloadVlaue(u8 Copy_u8PreloadValue){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = Copy_u8PreloadValue;
     eb2:	e2 e5       	ldi	r30, 0x52	; 82
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	80 83       	st	Z, r24
}
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <Timer0_vidSetCTCValue>:

void Timer0_vidSetCTCValue(u8 Copy_u8CtcValue){
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = Copy_u8CtcValue;
     ece:	ec e5       	ldi	r30, 0x5C	; 92
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	80 83       	st	Z, r24
}
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <Timer0_vidStartTimer>:

void Timer0_vidStartTimer(void){
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= TIMER0_CLK_CLR_MSK;
     ee6:	a3 e5       	ldi	r26, 0x53	; 83
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e3 e5       	ldi	r30, 0x53	; 83
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 7f       	andi	r24, 0xF8	; 248
     ef2:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_CLK_SLCT;
     ef4:	a3 e5       	ldi	r26, 0x53	; 83
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e3 e5       	ldi	r30, 0x53	; 83
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	90 81       	ld	r25, Z
     efe:	80 91 68 01 	lds	r24, 0x0168
     f02:	89 2b       	or	r24, r25
     f04:	8c 93       	st	X, r24
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Timer0_vidStopTimer>:

void Timer0_vidStopTimer(void){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= TIMER0_CLK_CLR_MSK;
     f14:	a3 e5       	ldi	r26, 0x53	; 83
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e3 e5       	ldi	r30, 0x53	; 83
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	8c 93       	st	X, r24
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <Timer0_vidTovfIrqEnable>:

void Timer0_vidTovfIrqEnable(void){
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG, 0);
     f30:	a9 e5       	ldi	r26, 0x59	; 89
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e9 e5       	ldi	r30, 0x59	; 89
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	81 60       	ori	r24, 0x01	; 1
     f3c:	8c 93       	st	X, r24
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <Timer0_vidTovfIrqDisable>:

void Timer0_vidTovfIrqDisable(void){
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG, 0);
     f4c:	a9 e5       	ldi	r26, 0x59	; 89
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e9 e5       	ldi	r30, 0x59	; 89
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	8c 93       	st	X, r24
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <Timer0_vidCtcIrqEnable>:

void Timer0_vidCtcIrqEnable(void){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG, 1);
     f68:	a9 e5       	ldi	r26, 0x59	; 89
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e9 e5       	ldi	r30, 0x59	; 89
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	82 60       	ori	r24, 0x02	; 2
     f74:	8c 93       	st	X, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Timer0_vidCtcIrqDisable>:

void Timer0_vidCtcIrqDisable(void){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG, 1);
     f84:	a9 e5       	ldi	r26, 0x59	; 89
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e9 e5       	ldi	r30, 0x59	; 89
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	8c 93       	st	X, r24
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <Timer0_vidSet_Tovf_Call_Back>:
	}
}
*/

//To set the call back function of the Normal mode.
void Timer0_vidSet_Tovf_Call_Back(void (*fptr)(void)){
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <Timer0_vidSet_Tovf_Call_Back+0x6>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	31 f0       	breq	.+12     	; 0xfba <Timer0_vidSet_Tovf_Call_Back+0x22>
		Timer0_Tovf_cbk_Fptr = fptr;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	90 93 6f 01 	sts	0x016F, r25
     fb6:	80 93 6e 01 	sts	0x016E, r24
	}
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <Timer0_vidSet_CTC_Call_Back>:

//To set the call back function of the CTC mode.
void Timer0_vidSet_CTC_Call_Back(void (*fptr)(void)){
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <Timer0_vidSet_CTC_Call_Back+0x6>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	31 f0       	breq	.+12     	; 0xfe6 <Timer0_vidSet_CTC_Call_Back+0x22>
		Timer0_Ctc_cbk_Fptr = fptr;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	90 93 71 01 	sts	0x0171, r25
     fe2:	80 93 70 01 	sts	0x0170, r24
	}
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <Timer0_vidSetPwmDutyCycle>:

void Timer0_vidSetPwmDutyCycle(u8 Copy_u8DutyCycle){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <Timer0_vidSetPwmDutyCycle+0x6>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	8a 83       	std	Y+2, r24	; 0x02
	u8 DutyTicks;
	DutyTicks = 256 * ((f32)Copy_u8DutyCycle / 100);
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	48 ec       	ldi	r20, 0xC8	; 200
    101c:	52 e4       	ldi	r21, 0x42	; 66
    101e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	53 e4       	ldi	r21, 0x43	; 67
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_COMPARE_OUTPUT_MODE == INVERTED_MODE
	OCR0_REG = DutyTicks;
    1048:	ec e5       	ldi	r30, 0x5C	; 92
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 83       	st	Z, r24
#elif TIMER0_COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
	OCR0_REG = 255-DutyTicks;
#endif
}
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <MSPI_voidSpiMasterInit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSpiMasterInit(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR = 0;
    1064:	19 82       	std	Y+1, r1	; 0x01

	// Set MOSI pin direction output
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_4,DIO_OUTPUT);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	64 e0       	ldi	r22, 0x04	; 4
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_5,DIO_OUTPUT);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	65 e0       	ldi	r22, 0x05	; 5
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_6,DIO_INPUT);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	66 e0       	ldi	r22, 0x06	; 6
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_u8setPinDir>
	DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_6,DIO_HIGH);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	66 e0       	ldi	r22, 0x06	; 6
    1088:	41 e0       	ldi	r20, 0x01	; 1
    108a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_7,DIO_OUTPUT);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	67 e0       	ldi	r22, 0x07	; 7
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_u8setPinDir>
//	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);

	// enable SPI
	SET_BIT(temp_SPCR, 6);
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit MSB first
	CLR_BIT(temp_SPCR, 5);
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	8f 7d       	andi	r24, 0xDF	; 223
    10a2:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	//DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
	SET_BIT(temp_SPCR, 4);
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	80 61       	ori	r24, 0x10	; 16
    10a8:	89 83       	std	Y+1, r24	; 0x01


	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> sampling at rising edge
	CLR_BIT(temp_SPCR, 2);
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	8b 7f       	andi	r24, 0xFB	; 251
    10b4:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 8
	SET_BIT(temp_SPCR, 0);
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 1);
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SPSR, 0);
    10c2:	ae e2       	ldi	r26, 0x2E	; 46
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ee e2       	ldi	r30, 0x2E	; 46
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	8c 93       	st	X, r24

	SPCR = temp_SPCR;
    10d0:	ed e2       	ldi	r30, 0x2D	; 45
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	80 83       	st	Z, r24
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <MSPI_voidSetPreSca>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSetPreSca(u8 Copy_u8Presca_value)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <MSPI_voidSetPreSca+0x6>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Presca_value)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3b 83       	std	Y+3, r19	; 0x03
    10f6:	2a 83       	std	Y+2, r18	; 0x02
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <MSPI_voidSetPreSca+0x24>
    1102:	6a c0       	rjmp	.+212    	; 0x11d8 <MSPI_voidSetPreSca+0xf8>
    1104:	2a 81       	ldd	r18, Y+2	; 0x02
    1106:	3b 81       	ldd	r19, Y+3	; 0x03
    1108:	24 30       	cpi	r18, 0x04	; 4
    110a:	31 05       	cpc	r19, r1
    110c:	84 f4       	brge	.+32     	; 0x112e <MSPI_voidSetPreSca+0x4e>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	a1 f1       	breq	.+104    	; 0x1180 <MSPI_voidSetPreSca+0xa0>
    1118:	2a 81       	ldd	r18, Y+2	; 0x02
    111a:	3b 81       	ldd	r19, Y+3	; 0x03
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	0c f0       	brlt	.+2      	; 0x1124 <MSPI_voidSetPreSca+0x44>
    1122:	44 c0       	rjmp	.+136    	; 0x11ac <MSPI_voidSetPreSca+0xcc>
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	a1 f0       	breq	.+40     	; 0x1154 <MSPI_voidSetPreSca+0x74>
    112c:	ad c0       	rjmp	.+346    	; 0x1288 <MSPI_voidSetPreSca+0x1a8>
    112e:	2a 81       	ldd	r18, Y+2	; 0x02
    1130:	3b 81       	ldd	r19, Y+3	; 0x03
    1132:	25 30       	cpi	r18, 0x05	; 5
    1134:	31 05       	cpc	r19, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <MSPI_voidSetPreSca+0x5a>
    1138:	7b c0       	rjmp	.+246    	; 0x1230 <MSPI_voidSetPreSca+0x150>
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	85 30       	cpi	r24, 0x05	; 5
    1140:	91 05       	cpc	r25, r1
    1142:	0c f4       	brge	.+2      	; 0x1146 <MSPI_voidSetPreSca+0x66>
    1144:	5f c0       	rjmp	.+190    	; 0x1204 <MSPI_voidSetPreSca+0x124>
    1146:	2a 81       	ldd	r18, Y+2	; 0x02
    1148:	3b 81       	ldd	r19, Y+3	; 0x03
    114a:	26 30       	cpi	r18, 0x06	; 6
    114c:	31 05       	cpc	r19, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <MSPI_voidSetPreSca+0x72>
    1150:	85 c0       	rjmp	.+266    	; 0x125c <MSPI_voidSetPreSca+0x17c>
    1152:	9a c0       	rjmp	.+308    	; 0x1288 <MSPI_voidSetPreSca+0x1a8>
	{
		/************************ ***/
		case 0:
			CLR_BIT(SPCR, 0);
    1154:	ad e2       	ldi	r26, 0x2D	; 45
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ed e2       	ldi	r30, 0x2D	; 45
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8e 7f       	andi	r24, 0xFE	; 254
    1160:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1162:	ad e2       	ldi	r26, 0x2D	; 45
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ed e2       	ldi	r30, 0x2D	; 45
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8d 7f       	andi	r24, 0xFD	; 253
    116e:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1170:	ae e2       	ldi	r26, 0x2E	; 46
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ee e2       	ldi	r30, 0x2E	; 46
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8e 7f       	andi	r24, 0xFE	; 254
    117c:	8c 93       	st	X, r24
    117e:	99 c0       	rjmp	.+306    	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 1:
			SET_BIT(SPCR, 0);
    1180:	ad e2       	ldi	r26, 0x2D	; 45
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ed e2       	ldi	r30, 0x2D	; 45
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    118e:	ad e2       	ldi	r26, 0x2D	; 45
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ed e2       	ldi	r30, 0x2D	; 45
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8d 7f       	andi	r24, 0xFD	; 253
    119a:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    119c:	ae e2       	ldi	r26, 0x2E	; 46
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ee e2       	ldi	r30, 0x2E	; 46
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8e 7f       	andi	r24, 0xFE	; 254
    11a8:	8c 93       	st	X, r24
    11aa:	83 c0       	rjmp	.+262    	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 2:
			CLR_BIT(SPCR, 0);
    11ac:	ad e2       	ldi	r26, 0x2D	; 45
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ed e2       	ldi	r30, 0x2D	; 45
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    11ba:	ad e2       	ldi	r26, 0x2D	; 45
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ed e2       	ldi	r30, 0x2D	; 45
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    11c8:	ae e2       	ldi	r26, 0x2E	; 46
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ee e2       	ldi	r30, 0x2E	; 46
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	8c 93       	st	X, r24
    11d6:	6d c0       	rjmp	.+218    	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 3:
			SET_BIT(SPCR, 0);
    11d8:	ad e2       	ldi	r26, 0x2D	; 45
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ed e2       	ldi	r30, 0x2D	; 45
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    11e6:	ad e2       	ldi	r26, 0x2D	; 45
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ed e2       	ldi	r30, 0x2D	; 45
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    11f4:	ae e2       	ldi	r26, 0x2E	; 46
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ee e2       	ldi	r30, 0x2E	; 46
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8e 7f       	andi	r24, 0xFE	; 254
    1200:	8c 93       	st	X, r24
    1202:	57 c0       	rjmp	.+174    	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 4:
			CLR_BIT(SPCR, 0);
    1204:	ad e2       	ldi	r26, 0x2D	; 45
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ed e2       	ldi	r30, 0x2D	; 45
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1212:	ad e2       	ldi	r26, 0x2D	; 45
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ed e2       	ldi	r30, 0x2D	; 45
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8d 7f       	andi	r24, 0xFD	; 253
    121e:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    1220:	ae e2       	ldi	r26, 0x2E	; 46
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ee e2       	ldi	r30, 0x2E	; 46
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	81 60       	ori	r24, 0x01	; 1
    122c:	8c 93       	st	X, r24
    122e:	41 c0       	rjmp	.+130    	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 5:
			SET_BIT(SPCR, 0);
    1230:	ad e2       	ldi	r26, 0x2D	; 45
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ed e2       	ldi	r30, 0x2D	; 45
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    123e:	ad e2       	ldi	r26, 0x2D	; 45
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ed e2       	ldi	r30, 0x2D	; 45
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8d 7f       	andi	r24, 0xFD	; 253
    124a:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    124c:	ae e2       	ldi	r26, 0x2E	; 46
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ee e2       	ldi	r30, 0x2E	; 46
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
    125a:	2b c0       	rjmp	.+86     	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 6:
			CLR_BIT(SPCR, 0);
    125c:	ad e2       	ldi	r26, 0x2D	; 45
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	ed e2       	ldi	r30, 0x2D	; 45
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8e 7f       	andi	r24, 0xFE	; 254
    1268:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    126a:	ad e2       	ldi	r26, 0x2D	; 45
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ed e2       	ldi	r30, 0x2D	; 45
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    1278:	ae e2       	ldi	r26, 0x2E	; 46
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ee e2       	ldi	r30, 0x2E	; 46
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	8c 93       	st	X, r24
    1286:	15 c0       	rjmp	.+42     	; 0x12b2 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		default :
			CLR_BIT(SPCR, 0);
    1288:	ad e2       	ldi	r26, 0x2D	; 45
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ed e2       	ldi	r30, 0x2D	; 45
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8e 7f       	andi	r24, 0xFE	; 254
    1294:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1296:	ad e2       	ldi	r26, 0x2D	; 45
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	ed e2       	ldi	r30, 0x2D	; 45
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8d 7f       	andi	r24, 0xFD	; 253
    12a2:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    12a4:	ae e2       	ldi	r26, 0x2E	; 46
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	ee e2       	ldi	r30, 0x2E	; 46
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	8c 93       	st	X, r24

		break;
	}
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <MSPI_VidChipSelect>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_VidChipSelect(u8 state)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	31 f4       	brne	.+12     	; 0x12dc <MSPI_VidChipSelect+0x1e>
	{
		//MCAL_DIO_voidSETBIT(PB,PB4,LOW);
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_LOW);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	64 e0       	ldi	r22, 0x04	; 4
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <MSPI_VidChipSelect+0x28>
	}
	else
	{
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_HIGH);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	64 e0       	ldi	r22, 0x04	; 4
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
	}
}
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <MSPI_U8MasterTransmit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
u8 MSPI_U8MasterTransmit(u8 Copy_u8SpiMessage)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <MSPI_U8MasterTransmit+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
    12fa:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8SpiMessage;
    12fc:	ef e2       	ldi	r30, 0x2F	; 47
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
	while(GET_BIT(SPSR, 7)==0);
    1304:	ee e2       	ldi	r30, 0x2E	; 46
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 23       	and	r24, r24
    130c:	dc f7       	brge	.-10     	; 0x1304 <MSPI_U8MasterTransmit+0x16>
	dataRead = SPDR;
    130e:	ef e2       	ldi	r30, 0x2F	; 47
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <EXTI_u8SetSource>:

static void (*INT0_Cbf_ptr)(void) = NULL;
static void (*INT1_Cbf_ptr)(void) = NULL;

//this function sets the interrupt source, it takes the external interrupt number and event;
u8 EXTI_u8SetSource(u8 Copy_u8INTx, u8 Copy_u8Source){
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	2b 97       	sbiw	r28, 0x0b	; 11
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status = 0;
    133a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3b 87       	std	Y+11, r19	; 0x0b
    1344:	2a 87       	std	Y+10, r18	; 0x0a
    1346:	8a 85       	ldd	r24, Y+10	; 0x0a
    1348:	9b 85       	ldd	r25, Y+11	; 0x0b
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <EXTI_u8SetSource+0x30>
    1350:	77 c0       	rjmp	.+238    	; 0x1440 <EXTI_u8SetSource+0x11e>
    1352:	2a 85       	ldd	r18, Y+10	; 0x0a
    1354:	3b 85       	ldd	r19, Y+11	; 0x0b
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <EXTI_u8SetSource+0x3c>
    135c:	dd c0       	rjmp	.+442    	; 0x1518 <EXTI_u8SetSource+0x1f6>
    135e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1360:	9b 85       	ldd	r25, Y+11	; 0x0b
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f0       	breq	.+2      	; 0x1368 <EXTI_u8SetSource+0x46>
    1366:	09 c1       	rjmp	.+530    	; 0x157a <EXTI_u8SetSource+0x258>
	case EXTI_INT_0:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_2);  // make pd2 => input
    1368:	a1 e3       	ldi	r26, 0x31	; 49
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e1 e3       	ldi	r30, 0x31	; 49
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8b 7f       	andi	r24, 0xFB	; 251
    1374:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_2);  //pull_up
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	39 87       	std	Y+9, r19	; 0x09
    138c:	28 87       	std	Y+8, r18	; 0x08
    138e:	88 85       	ldd	r24, Y+8	; 0x08
    1390:	99 85       	ldd	r25, Y+9	; 0x09
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	21 f1       	breq	.+72     	; 0x13e0 <EXTI_u8SetSource+0xbe>
    1398:	28 85       	ldd	r18, Y+8	; 0x08
    139a:	39 85       	ldd	r19, Y+9	; 0x09
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <EXTI_u8SetSource+0x8a>
    13a2:	88 85       	ldd	r24, Y+8	; 0x08
    13a4:	99 85       	ldd	r25, Y+9	; 0x09
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <EXTI_u8SetSource+0xa0>
    13aa:	47 c0       	rjmp	.+142    	; 0x143a <EXTI_u8SetSource+0x118>
    13ac:	28 85       	ldd	r18, Y+8	; 0x08
    13ae:	39 85       	ldd	r19, Y+9	; 0x09
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	21 f1       	breq	.+72     	; 0x13fe <EXTI_u8SetSource+0xdc>
    13b6:	88 85       	ldd	r24, Y+8	; 0x08
    13b8:	99 85       	ldd	r25, Y+9	; 0x09
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	71 f1       	breq	.+92     	; 0x141c <EXTI_u8SetSource+0xfa>
    13c0:	3c c0       	rjmp	.+120    	; 0x143a <EXTI_u8SetSource+0x118>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_0);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8d 7f       	andi	r24, 0xFD	; 253
    13dc:	8c 93       	st	X, r24
    13de:	cf c0       	rjmp	.+414    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    13e0:	a5 e5       	ldi	r26, 0x55	; 85
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e5       	ldi	r30, 0x55	; 85
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    13ee:	a5 e5       	ldi	r26, 0x55	; 85
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e5       	ldi	r30, 0x55	; 85
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8d 7f       	andi	r24, 0xFD	; 253
    13fa:	8c 93       	st	X, r24
    13fc:	c0 c0       	rjmp	.+384    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    13fe:	a5 e5       	ldi	r26, 0x55	; 85
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e5       	ldi	r30, 0x55	; 85
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    140c:	a5 e5       	ldi	r26, 0x55	; 85
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e5       	ldi	r30, 0x55	; 85
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c 93       	st	X, r24
    141a:	b1 c0       	rjmp	.+354    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    141c:	a5 e5       	ldi	r26, 0x55	; 85
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e5       	ldi	r30, 0x55	; 85
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	82 60       	ori	r24, 0x02	; 2
    1436:	8c 93       	st	X, r24
    1438:	a2 c0       	rjmp	.+324    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9f c0       	rjmp	.+318    	; 0x157e <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_1:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_3);  // make pd2 => input
    1440:	a1 e3       	ldi	r26, 0x31	; 49
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e1 e3       	ldi	r30, 0x31	; 49
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	87 7f       	andi	r24, 0xF7	; 247
    144c:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_3);  //pull_up
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3f 83       	std	Y+7, r19	; 0x07
    1464:	2e 83       	std	Y+6, r18	; 0x06
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	21 f1       	breq	.+72     	; 0x14b8 <EXTI_u8SetSource+0x196>
    1470:	2e 81       	ldd	r18, Y+6	; 0x06
    1472:	3f 81       	ldd	r19, Y+7	; 0x07
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <EXTI_u8SetSource+0x162>
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	9f 81       	ldd	r25, Y+7	; 0x07
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	61 f0       	breq	.+24     	; 0x149a <EXTI_u8SetSource+0x178>
    1482:	47 c0       	rjmp	.+142    	; 0x1512 <EXTI_u8SetSource+0x1f0>
    1484:	2e 81       	ldd	r18, Y+6	; 0x06
    1486:	3f 81       	ldd	r19, Y+7	; 0x07
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	21 f1       	breq	.+72     	; 0x14d6 <EXTI_u8SetSource+0x1b4>
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <EXTI_u8SetSource+0x1d2>
    1498:	3c c0       	rjmp	.+120    	; 0x1512 <EXTI_u8SetSource+0x1f0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_2);
    149a:	a5 e5       	ldi	r26, 0x55	; 85
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e5 e5       	ldi	r30, 0x55	; 85
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8b 7f       	andi	r24, 0xFB	; 251
    14a6:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	87 7f       	andi	r24, 0xF7	; 247
    14b4:	8c 93       	st	X, r24
    14b6:	63 c0       	rjmp	.+198    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	84 60       	ori	r24, 0x04	; 4
    14c4:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	87 7f       	andi	r24, 0xF7	; 247
    14d2:	8c 93       	st	X, r24
    14d4:	54 c0       	rjmp	.+168    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8b 7f       	andi	r24, 0xFB	; 251
    14e2:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 60       	ori	r24, 0x08	; 8
    14f0:	8c 93       	st	X, r24
    14f2:	45 c0       	rjmp	.+138    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 60       	ori	r24, 0x08	; 8
    150e:	8c 93       	st	X, r24
    1510:	36 c0       	rjmp	.+108    	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	33 c0       	rjmp	.+102    	; 0x157e <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_2:
		CLR_BIT(EXTI_DDRB_REG, EXTI_PIN_2);  // make pd2 => input
    1518:	a7 e3       	ldi	r26, 0x37	; 55
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e7 e3       	ldi	r30, 0x37	; 55
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTB_REG, EXTI_PIN_2);  //pull_up
    1526:	a8 e3       	ldi	r26, 0x38	; 56
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e8 e3       	ldi	r30, 0x38	; 56
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	84 60       	ori	r24, 0x04	; 4
    1532:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	31 f0       	breq	.+12     	; 0x1554 <EXTI_u8SetSource+0x232>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	49 f0       	breq	.+18     	; 0x1564 <EXTI_u8SetSource+0x242>
    1552:	10 c0       	rjmp	.+32     	; 0x1574 <EXTI_u8SetSource+0x252>
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCSR_REG,  EXTI_PIN_6);
    1554:	a4 e5       	ldi	r26, 0x54	; 84
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e4 e5       	ldi	r30, 0x54	; 84
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
    1562:	0d c0       	rjmp	.+26     	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCSR_REG, EXTI_PIN_6);
    1564:	a4 e5       	ldi	r26, 0x54	; 84
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e4 e5       	ldi	r30, 0x54	; 84
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 64       	ori	r24, 0x40	; 64
    1570:	8c 93       	st	X, r24
    1572:	05 c0       	rjmp	.+10     	; 0x157e <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <EXTI_u8SetSource+0x25c>
		}
		break;
		default: Local_u8Status = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
				SET_BIT(MCUCSR, PIN_6);
				break;
			default: Local_u8Status = 1;
			}
		}*/
	return Local_u8Status;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	2b 96       	adiw	r28, 0x0b	; 11
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <EXTI_u8EnablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8EnablePIE(u8 Copy_u8INTx){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <EXTI_u8EnablePIE+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <EXTI_u8EnablePIE+0x8>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    15a0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3c 83       	std	Y+4, r19	; 0x04
    15aa:	2b 83       	std	Y+3, r18	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	89 f0       	breq	.+34     	; 0x15d8 <EXTI_u8EnablePIE+0x46>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <EXTI_u8EnablePIE+0x56>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	c1 f4       	brne	.+48     	; 0x15f8 <EXTI_u8EnablePIE+0x66>
	case EXTI_INT_0:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    15c8:	ab e5       	ldi	r26, 0x5B	; 91
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e5       	ldi	r30, 0x5B	; 91
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 64       	ori	r24, 0x40	; 64
    15d4:	8c 93       	st	X, r24
    15d6:	12 c0       	rjmp	.+36     	; 0x15fc <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_1:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    15d8:	ab e5       	ldi	r26, 0x5B	; 91
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e5       	ldi	r30, 0x5B	; 91
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 68       	ori	r24, 0x80	; 128
    15e4:	8c 93       	st	X, r24
    15e6:	0a c0       	rjmp	.+20     	; 0x15fc <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_2:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	80 62       	ori	r24, 0x20	; 32
    15f4:	8c 93       	st	X, r24
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <EXTI_u8EnablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <EXTI_u8DisablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8DisablePIE(u8 Copy_u8INTx){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <EXTI_u8DisablePIE+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <EXTI_u8DisablePIE+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    161a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3c 83       	std	Y+4, r19	; 0x04
    1624:	2b 83       	std	Y+3, r18	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	89 f0       	breq	.+34     	; 0x1652 <EXTI_u8DisablePIE+0x46>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	a1 f0       	breq	.+40     	; 0x1662 <EXTI_u8DisablePIE+0x56>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	c1 f4       	brne	.+48     	; 0x1672 <EXTI_u8DisablePIE+0x66>
	case EXTI_INT_0:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    1642:	ab e5       	ldi	r26, 0x5B	; 91
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e5       	ldi	r30, 0x5B	; 91
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 7b       	andi	r24, 0xBF	; 191
    164e:	8c 93       	st	X, r24
    1650:	12 c0       	rjmp	.+36     	; 0x1676 <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_1:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    1652:	ab e5       	ldi	r26, 0x5B	; 91
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e5       	ldi	r30, 0x5B	; 91
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 77       	andi	r24, 0x7F	; 127
    165e:	8c 93       	st	X, r24
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_2:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    1662:	ab e5       	ldi	r26, 0x5B	; 91
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e5       	ldi	r30, 0x5B	; 91
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8f 7d       	andi	r24, 0xDF	; 223
    166e:	8c 93       	st	X, r24
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <EXTI_u8DisablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <EXTI_voidEnableGIE>:

//this function used to enable the GIE (set the I_bit in SREG to 1)
void EXTI_voidEnableGIE(){
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    168e:	af e5       	ldi	r26, 0x5F	; 95
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ef e5       	ldi	r30, 0x5F	; 95
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 68       	ori	r24, 0x80	; 128
    169a:	8c 93       	st	X, r24
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <EXTI_voidDisableGIE>:

//this function used to disable the GIE (set the I_bit in SREG to 0)
void EXTI_voidDisableGIE(){
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    16aa:	af e5       	ldi	r26, 0x5F	; 95
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ef e5       	ldi	r30, 0x5F	; 95
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 77       	andi	r24, 0x7F	; 127
    16b6:	8c 93       	st	X, r24
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <EXTI_voidSet_INT0_Cbf>:

//This function used to set INT0 call back function.
void EXTI_voidSet_INT0_Cbf(void (*fptr)(void)){
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <EXTI_voidSet_INT0_Cbf+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <EXTI_voidSet_INT0_Cbf+0x22>
		INT0_Cbf_ptr = fptr;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	90 93 73 01 	sts	0x0173, r25
    16dc:	80 93 72 01 	sts	0x0172, r24
	}
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <EXTI_voidSet_INT1_Cbf>:

//This function used to set INT1 call back function.
void EXTI_voidSet_INT1_Cbf(void (*fptr)(void))
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <EXTI_voidSet_INT1_Cbf+0x6>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	31 f0       	breq	.+12     	; 0x170c <EXTI_voidSet_INT1_Cbf+0x22>
	{
		INT1_Cbf_ptr = fptr;
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	90 93 75 01 	sts	0x0175, r25
    1708:	80 93 74 01 	sts	0x0174, r24
	}
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <__vector_1>:

ISR(INT0_vect){
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Cbf_ptr != NULL){
    1740:	80 91 72 01 	lds	r24, 0x0172
    1744:	90 91 73 01 	lds	r25, 0x0173
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	29 f0       	breq	.+10     	; 0x1756 <__vector_1+0x40>
		INT0_Cbf_ptr();
    174c:	e0 91 72 01 	lds	r30, 0x0172
    1750:	f0 91 73 01 	lds	r31, 0x0173
    1754:	09 95       	icall
	}
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_2>:

ISR(INT1_vect){
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Cbf_ptr != NULL)
    17a6:	80 91 74 01 	lds	r24, 0x0174
    17aa:	90 91 75 01 	lds	r25, 0x0175
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	29 f0       	breq	.+10     	; 0x17bc <__vector_2+0x40>
	{
		INT1_Cbf_ptr();
    17b2:	e0 91 74 01 	lds	r30, 0x0174
    17b6:	f0 91 75 01 	lds	r31, 0x0175
    17ba:	09 95       	icall
	}
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <DIO_u8setPortDir>:
#include"DIO_init.h"


//PORT Functions
//set PORT direction
u8 DIO_u8setPortDir(u8 Copy_u8port, u8 Copy_u8dir){
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <DIO_u8setPortDir+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <DIO_u8setPortDir+0x8>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	8a 83       	std	Y+2, r24	; 0x02
    17f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    17f4:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	3d 83       	std	Y+5, r19	; 0x05
    17fe:	2c 83       	std	Y+4, r18	; 0x04
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	91 05       	cpc	r25, r1
    1808:	d1 f0       	breq	.+52     	; 0x183e <DIO_u8setPortDir+0x5c>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	2c f4       	brge	.+10     	; 0x181e <DIO_u8setPortDir+0x3c>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	61 f0       	breq	.+24     	; 0x1834 <DIO_u8setPortDir+0x52>
    181c:	1f c0       	rjmp	.+62     	; 0x185c <DIO_u8setPortDir+0x7a>
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	3d 81       	ldd	r19, Y+5	; 0x05
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	81 f0       	breq	.+32     	; 0x1848 <DIO_u8setPortDir+0x66>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	81 f0       	breq	.+32     	; 0x1852 <DIO_u8setPortDir+0x70>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <DIO_u8setPortDir+0x7a>
	case DIO_PORT_A:	DDRA_REG = Copy_u8dir;  break;
    1834:	ea e3       	ldi	r30, 0x3A	; 58
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	80 83       	st	Z, r24
    183c:	11 c0       	rjmp	.+34     	; 0x1860 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_B:	DDRB_REG = Copy_u8dir;  break;
    183e:	e7 e3       	ldi	r30, 0x37	; 55
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	80 83       	st	Z, r24
    1846:	0c c0       	rjmp	.+24     	; 0x1860 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_C:	DDRC_REG = Copy_u8dir;  break;
    1848:	e4 e3       	ldi	r30, 0x34	; 52
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	80 83       	st	Z, r24
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_D:	DDRD_REG = Copy_u8dir;  break;
    1852:	e1 e3       	ldi	r30, 0x31	; 49
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	80 83       	st	Z, r24
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_u8setPortDir+0x7e>

	default: Local_u8statues = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <DIO_u8setPortVal>:

//set PORT value
u8 DIO_u8setPortVal(u8 Copy_u8port, u8 Copy_u8val)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <DIO_u8setPortVal+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <DIO_u8setPortVal+0x8>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1884:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3d 83       	std	Y+5, r19	; 0x05
    188e:	2c 83       	std	Y+4, r18	; 0x04
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	91 05       	cpc	r25, r1
    1898:	d1 f0       	breq	.+52     	; 0x18ce <DIO_u8setPortVal+0x5c>
    189a:	2c 81       	ldd	r18, Y+4	; 0x04
    189c:	3d 81       	ldd	r19, Y+5	; 0x05
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <DIO_u8setPortVal+0x3c>
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <DIO_u8setPortVal+0x52>
    18ac:	1f c0       	rjmp	.+62     	; 0x18ec <DIO_u8setPortVal+0x7a>
    18ae:	2c 81       	ldd	r18, Y+4	; 0x04
    18b0:	3d 81       	ldd	r19, Y+5	; 0x05
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	81 f0       	breq	.+32     	; 0x18d8 <DIO_u8setPortVal+0x66>
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <DIO_u8setPortVal+0x70>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <DIO_u8setPortVal+0x7a>
	case DIO_PORT_A:	PORTA_REG = Copy_u8val;  break;
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	80 83       	st	Z, r24
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_B:	PORTB_REG = Copy_u8val;  break;
    18ce:	e8 e3       	ldi	r30, 0x38	; 56
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	80 83       	st	Z, r24
    18d6:	0c c0       	rjmp	.+24     	; 0x18f0 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_C:	PORTC_REG = Copy_u8val;  break;
    18d8:	e5 e3       	ldi	r30, 0x35	; 53
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	80 83       	st	Z, r24
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_D:	PORTD_REG = Copy_u8val;  break;
    18e2:	e2 e3       	ldi	r30, 0x32	; 50
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	80 83       	st	Z, r24
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8setPortVal+0x7e>
	default: Local_u8statues = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <DIO_u8getPortVal>:
//get PORT value
u8 DIO_u8getPortVal(u8 Copy_u8port, u8 *Copy_u8valuePtr){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <DIO_u8getPortVal+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <DIO_u8getPortVal+0x8>
    190a:	00 d0       	rcall	.+0      	; 0x190c <DIO_u8getPortVal+0xa>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	8a 83       	std	Y+2, r24	; 0x02
    1912:	7c 83       	std	Y+4, r23	; 0x04
    1914:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1916:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3e 83       	std	Y+6, r19	; 0x06
    1920:	2d 83       	std	Y+5, r18	; 0x05
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	e1 f0       	breq	.+56     	; 0x1964 <DIO_u8getPortVal+0x62>
    192c:	2d 81       	ldd	r18, Y+5	; 0x05
    192e:	3e 81       	ldd	r19, Y+6	; 0x06
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_u8getPortVal+0x3e>
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_u8getPortVal+0x54>
    193e:	27 c0       	rjmp	.+78     	; 0x198e <DIO_u8getPortVal+0x8c>
    1940:	2d 81       	ldd	r18, Y+5	; 0x05
    1942:	3e 81       	ldd	r19, Y+6	; 0x06
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	a1 f0       	breq	.+40     	; 0x1972 <DIO_u8getPortVal+0x70>
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	b1 f0       	breq	.+44     	; 0x1980 <DIO_u8getPortVal+0x7e>
    1954:	1c c0       	rjmp	.+56     	; 0x198e <DIO_u8getPortVal+0x8c>
	case DIO_PORT_A:	*Copy_u8valuePtr = PINA_REG;  break;
    1956:	e9 e3       	ldi	r30, 0x39	; 57
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	eb 81       	ldd	r30, Y+3	; 0x03
    195e:	fc 81       	ldd	r31, Y+4	; 0x04
    1960:	80 83       	st	Z, r24
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <DIO_u8getPortVal+0x90>
	case DIO_PORT_B:	*Copy_u8valuePtr = PINB_REG;  break;
    1964:	e6 e3       	ldi	r30, 0x36	; 54
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	eb 81       	ldd	r30, Y+3	; 0x03
    196c:	fc 81       	ldd	r31, Y+4	; 0x04
    196e:	80 83       	st	Z, r24
    1970:	10 c0       	rjmp	.+32     	; 0x1992 <DIO_u8getPortVal+0x90>
	case DIO_PORT_C:	*Copy_u8valuePtr = PINC_REG;  break;
    1972:	e3 e3       	ldi	r30, 0x33	; 51
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	80 83       	st	Z, r24
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <DIO_u8getPortVal+0x90>
	case DIO_PORT_D:	*Copy_u8valuePtr = PIND_REG;  break;
    1980:	e0 e3       	ldi	r30, 0x30	; 48
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	eb 81       	ldd	r30, Y+3	; 0x03
    1988:	fc 81       	ldd	r31, Y+4	; 0x04
    198a:	80 83       	st	Z, r24
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <DIO_u8getPortVal+0x90>

	default: Local_u8statues = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	26 96       	adiw	r28, 0x06	; 6
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <DIO_u8setPinDir>:

//PIN Functions
//set PIN direction
u8 DIO_u8setPinDir(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8dir){
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	28 97       	sbiw	r28, 0x08	; 8
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	8a 83       	std	Y+2, r24	; 0x02
    19bc:	6b 83       	std	Y+3, r22	; 0x03
    19be:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <= 7){
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 30       	cpi	r24, 0x08	; 8
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <DIO_u8setPinDir+0x24>
    19c8:	f4 c0       	rjmp	.+488    	; 0x1bb2 <DIO_u8setPinDir+0x20c>
		if(Copy_u8dir == DIO_INPUT){
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	88 23       	and	r24, r24
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <DIO_u8setPinDir+0x2c>
    19d0:	77 c0       	rjmp	.+238    	; 0x1ac0 <DIO_u8setPinDir+0x11a>
			switch(Copy_u8port){
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	38 87       	std	Y+8, r19	; 0x08
    19da:	2f 83       	std	Y+7, r18	; 0x07
    19dc:	8f 81       	ldd	r24, Y+7	; 0x07
    19de:	98 85       	ldd	r25, Y+8	; 0x08
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	59 f1       	breq	.+86     	; 0x1a3c <DIO_u8setPinDir+0x96>
    19e6:	2f 81       	ldd	r18, Y+7	; 0x07
    19e8:	38 85       	ldd	r19, Y+8	; 0x08
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	2c f4       	brge	.+10     	; 0x19fa <DIO_u8setPinDir+0x54>
    19f0:	8f 81       	ldd	r24, Y+7	; 0x07
    19f2:	98 85       	ldd	r25, Y+8	; 0x08
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <DIO_u8setPinDir+0x6c>
    19f8:	60 c0       	rjmp	.+192    	; 0x1aba <DIO_u8setPinDir+0x114>
    19fa:	2f 81       	ldd	r18, Y+7	; 0x07
    19fc:	38 85       	ldd	r19, Y+8	; 0x08
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	89 f1       	breq	.+98     	; 0x1a66 <DIO_u8setPinDir+0xc0>
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	98 85       	ldd	r25, Y+8	; 0x08
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <DIO_u8setPinDir+0x6a>
    1a0e:	40 c0       	rjmp	.+128    	; 0x1a90 <DIO_u8setPinDir+0xea>
    1a10:	54 c0       	rjmp	.+168    	; 0x1aba <DIO_u8setPinDir+0x114>
			case DIO_PORT_A:	CLR_BIT(DDRA_REG, Copy_u8pin);  break;
    1a12:	aa e3       	ldi	r26, 0x3A	; 58
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ea e3       	ldi	r30, 0x3A	; 58
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_u8setPinDir+0x8a>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_u8setPinDir+0x86>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	bd c0       	rjmp	.+378    	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	CLR_BIT(DDRB_REG, Copy_u8pin);  break;
    1a3c:	a7 e3       	ldi	r26, 0x37	; 55
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e7 e3       	ldi	r30, 0x37	; 55
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8setPinDir+0xb4>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_u8setPinDir+0xb0>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	a8 c0       	rjmp	.+336    	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	CLR_BIT(DDRC_REG, Copy_u8pin);  break;
    1a66:	a4 e3       	ldi	r26, 0x34	; 52
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e4 e3       	ldi	r30, 0x34	; 52
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_u8setPinDir+0xde>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_u8setPinDir+0xda>
    1a88:	80 95       	com	r24
    1a8a:	84 23       	and	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	93 c0       	rjmp	.+294    	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	CLR_BIT(DDRD_REG, Copy_u8pin);  break;
    1a90:	a1 e3       	ldi	r26, 0x31	; 49
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e1 e3       	ldi	r30, 0x31	; 49
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8setPinDir+0x108>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8setPinDir+0x104>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	7e c0       	rjmp	.+252    	; 0x1bb6 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	7b c0       	rjmp	.+246    	; 0x1bb6 <DIO_u8setPinDir+0x210>
			}
		}else if(Copy_u8dir == DIO_OUTPUT){
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <DIO_u8setPinDir+0x122>
    1ac6:	72 c0       	rjmp	.+228    	; 0x1bac <DIO_u8setPinDir+0x206>
			switch(Copy_u8port){
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3e 83       	std	Y+6, r19	; 0x06
    1ad0:	2d 83       	std	Y+5, r18	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	49 f1       	breq	.+82     	; 0x1b2e <DIO_u8setPinDir+0x188>
    1adc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ade:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <DIO_u8setPinDir+0x14a>
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	61 f0       	breq	.+24     	; 0x1b06 <DIO_u8setPinDir+0x160>
    1aee:	5b c0       	rjmp	.+182    	; 0x1ba6 <DIO_u8setPinDir+0x200>
    1af0:	2d 81       	ldd	r18, Y+5	; 0x05
    1af2:	3e 81       	ldd	r19, Y+6	; 0x06
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	71 f1       	breq	.+92     	; 0x1b56 <DIO_u8setPinDir+0x1b0>
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	91 05       	cpc	r25, r1
    1b02:	e9 f1       	breq	.+122    	; 0x1b7e <DIO_u8setPinDir+0x1d8>
    1b04:	50 c0       	rjmp	.+160    	; 0x1ba6 <DIO_u8setPinDir+0x200>
			case DIO_PORT_A:	SET_BIT(DDRA_REG, Copy_u8pin);  break;
    1b06:	aa e3       	ldi	r26, 0x3A	; 58
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ea e3       	ldi	r30, 0x3A	; 58
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_u8setPinDir+0x17e>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_u8setPinDir+0x17a>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	44 c0       	rjmp	.+136    	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	SET_BIT(DDRB_REG, Copy_u8pin);  break;
    1b2e:	a7 e3       	ldi	r26, 0x37	; 55
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e7 e3       	ldi	r30, 0x37	; 55
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_u8setPinDir+0x1a6>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_u8setPinDir+0x1a2>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	30 c0       	rjmp	.+96     	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	SET_BIT(DDRC_REG, Copy_u8pin);  break;
    1b56:	a4 e3       	ldi	r26, 0x34	; 52
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e4 e3       	ldi	r30, 0x34	; 52
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_u8setPinDir+0x1ce>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_u8setPinDir+0x1ca>
    1b78:	84 2b       	or	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	1c c0       	rjmp	.+56     	; 0x1bb6 <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	SET_BIT(DDRD_REG, Copy_u8pin);  break;
    1b7e:	a1 e3       	ldi	r26, 0x31	; 49
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e1 e3       	ldi	r30, 0x31	; 49
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_u8setPinDir+0x1f6>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_u8setPinDir+0x1f2>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <DIO_u8setPinDir+0x210>
			}
		}else{
			Local_u8statues=1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_u8setPinDir+0x210>
		}

	}else{
		Local_u8statues=1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb8:	28 96       	adiw	r28, 0x08	; 8
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <DIO_u8setPinVal>:
//set PIN value
u8 DIO_u8setPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8val){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	28 97       	sbiw	r28, 0x08	; 8
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	8a 83       	std	Y+2, r24	; 0x02
    1be0:	6b 83       	std	Y+3, r22	; 0x03
    1be2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1be4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <DIO_u8setPinVal+0x24>
    1bec:	f4 c0       	rjmp	.+488    	; 0x1dd6 <DIO_u8setPinVal+0x20c>
		if(Copy_u8val == DIO_HIGH){
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <DIO_u8setPinVal+0x2c>
    1bf4:	72 c0       	rjmp	.+228    	; 0x1cda <DIO_u8setPinVal+0x110>
			switch(Copy_u8port){
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	38 87       	std	Y+8, r19	; 0x08
    1bfe:	2f 83       	std	Y+7, r18	; 0x07
    1c00:	8f 81       	ldd	r24, Y+7	; 0x07
    1c02:	98 85       	ldd	r25, Y+8	; 0x08
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	91 05       	cpc	r25, r1
    1c08:	49 f1       	breq	.+82     	; 0x1c5c <DIO_u8setPinVal+0x92>
    1c0a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c0c:	38 85       	ldd	r19, Y+8	; 0x08
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <DIO_u8setPinVal+0x54>
    1c14:	8f 81       	ldd	r24, Y+7	; 0x07
    1c16:	98 85       	ldd	r25, Y+8	; 0x08
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	61 f0       	breq	.+24     	; 0x1c34 <DIO_u8setPinVal+0x6a>
    1c1c:	5b c0       	rjmp	.+182    	; 0x1cd4 <DIO_u8setPinVal+0x10a>
    1c1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c20:	38 85       	ldd	r19, Y+8	; 0x08
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	71 f1       	breq	.+92     	; 0x1c84 <DIO_u8setPinVal+0xba>
    1c28:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2a:	98 85       	ldd	r25, Y+8	; 0x08
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	91 05       	cpc	r25, r1
    1c30:	e9 f1       	breq	.+122    	; 0x1cac <DIO_u8setPinVal+0xe2>
    1c32:	50 c0       	rjmp	.+160    	; 0x1cd4 <DIO_u8setPinVal+0x10a>
			case DIO_PORT_A:	SET_BIT(PORTA_REG, Copy_u8pin);  break;
    1c34:	ab e3       	ldi	r26, 0x3B	; 59
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	eb e3       	ldi	r30, 0x3B	; 59
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <DIO_u8setPinVal+0x88>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <DIO_u8setPinVal+0x84>
    1c56:	84 2b       	or	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	bf c0       	rjmp	.+382    	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	SET_BIT(PORTB_REG, Copy_u8pin);  break;
    1c5c:	a8 e3       	ldi	r26, 0x38	; 56
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e8 e3       	ldi	r30, 0x38	; 56
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_u8setPinVal+0xb0>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_u8setPinVal+0xac>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	ab c0       	rjmp	.+342    	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	SET_BIT(PORTC_REG, Copy_u8pin);  break;
    1c84:	a5 e3       	ldi	r26, 0x35	; 53
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e5 e3       	ldi	r30, 0x35	; 53
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_u8setPinVal+0xd8>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <DIO_u8setPinVal+0xd4>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	97 c0       	rjmp	.+302    	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	SET_BIT(PORTD_REG, Copy_u8pin);  break;
    1cac:	a2 e3       	ldi	r26, 0x32	; 50
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e2 e3       	ldi	r30, 0x32	; 50
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_u8setPinVal+0x100>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <DIO_u8setPinVal+0xfc>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	83 c0       	rjmp	.+262    	; 0x1dda <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	80 c0       	rjmp	.+256    	; 0x1dda <DIO_u8setPinVal+0x210>
			}
		}else if(Copy_u8val == DIO_LOW){
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <DIO_u8setPinVal+0x118>
    1ce0:	77 c0       	rjmp	.+238    	; 0x1dd0 <DIO_u8setPinVal+0x206>
			switch(Copy_u8port){
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3e 83       	std	Y+6, r19	; 0x06
    1cea:	2d 83       	std	Y+5, r18	; 0x05
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	59 f1       	breq	.+86     	; 0x1d4c <DIO_u8setPinVal+0x182>
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <DIO_u8setPinVal+0x140>
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f0       	breq	.+26     	; 0x1d22 <DIO_u8setPinVal+0x158>
    1d08:	60 c0       	rjmp	.+192    	; 0x1dca <DIO_u8setPinVal+0x200>
    1d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	89 f1       	breq	.+98     	; 0x1d76 <DIO_u8setPinVal+0x1ac>
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	83 30       	cpi	r24, 0x03	; 3
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <DIO_u8setPinVal+0x156>
    1d1e:	40 c0       	rjmp	.+128    	; 0x1da0 <DIO_u8setPinVal+0x1d6>
    1d20:	54 c0       	rjmp	.+168    	; 0x1dca <DIO_u8setPinVal+0x200>
			case DIO_PORT_A:	CLR_BIT(PORTA_REG, Copy_u8pin);  break;
    1d22:	ab e3       	ldi	r26, 0x3B	; 59
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_u8setPinVal+0x176>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_u8setPinVal+0x172>
    1d44:	80 95       	com	r24
    1d46:	84 23       	and	r24, r20
    1d48:	8c 93       	st	X, r24
    1d4a:	47 c0       	rjmp	.+142    	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	CLR_BIT(PORTB_REG, Copy_u8pin);  break;
    1d4c:	a8 e3       	ldi	r26, 0x38	; 56
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e8 e3       	ldi	r30, 0x38	; 56
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_u8setPinVal+0x1a0>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_u8setPinVal+0x19c>
    1d6e:	80 95       	com	r24
    1d70:	84 23       	and	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	32 c0       	rjmp	.+100    	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	CLR_BIT(PORTC_REG, Copy_u8pin);  break;
    1d76:	a5 e3       	ldi	r26, 0x35	; 53
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e5 e3       	ldi	r30, 0x35	; 53
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_u8setPinVal+0x1ca>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_u8setPinVal+0x1c6>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	1d c0       	rjmp	.+58     	; 0x1dda <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	CLR_BIT(PORTD_REG, Copy_u8pin);  break;
    1da0:	a2 e3       	ldi	r26, 0x32	; 50
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e2 e3       	ldi	r30, 0x32	; 50
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <DIO_u8setPinVal+0x1f4>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <DIO_u8setPinVal+0x1f0>
    1dc2:	80 95       	com	r24
    1dc4:	84 23       	and	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <DIO_u8setPinVal+0x210>
			}
		}else{
			Local_u8statues=1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <DIO_u8setPinVal+0x210>
		}
	}else{
		Local_u8statues=1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ddc:	28 96       	adiw	r28, 0x08	; 8
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <DIO_u8getPinVal>:

//get PIN value
u8 DIO_u8getPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 *Copy_u8valuePtr){
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	27 97       	sbiw	r28, 0x07	; 7
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	8a 83       	std	Y+2, r24	; 0x02
    1e04:	6b 83       	std	Y+3, r22	; 0x03
    1e06:	5d 83       	std	Y+5, r21	; 0x05
    1e08:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 30       	cpi	r24, 0x08	; 8
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <DIO_u8getPinVal+0x26>
    1e12:	74 c0       	rjmp	.+232    	; 0x1efc <DIO_u8getPinVal+0x10e>
		switch(Copy_u8port){
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3f 83       	std	Y+7, r19	; 0x07
    1e1c:	2e 83       	std	Y+6, r18	; 0x06
    1e1e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e20:	5f 81       	ldd	r21, Y+7	; 0x07
    1e22:	41 30       	cpi	r20, 0x01	; 1
    1e24:	51 05       	cpc	r21, r1
    1e26:	59 f1       	breq	.+86     	; 0x1e7e <DIO_u8getPinVal+0x90>
    1e28:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	91 05       	cpc	r25, r1
    1e30:	34 f4       	brge	.+12     	; 0x1e3e <DIO_u8getPinVal+0x50>
    1e32:	2e 81       	ldd	r18, Y+6	; 0x06
    1e34:	3f 81       	ldd	r19, Y+7	; 0x07
    1e36:	21 15       	cp	r18, r1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	69 f0       	breq	.+26     	; 0x1e56 <DIO_u8getPinVal+0x68>
    1e3c:	5c c0       	rjmp	.+184    	; 0x1ef6 <DIO_u8getPinVal+0x108>
    1e3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e40:	5f 81       	ldd	r21, Y+7	; 0x07
    1e42:	42 30       	cpi	r20, 0x02	; 2
    1e44:	51 05       	cpc	r21, r1
    1e46:	79 f1       	breq	.+94     	; 0x1ea6 <DIO_u8getPinVal+0xb8>
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <DIO_u8getPinVal+0x66>
    1e52:	3d c0       	rjmp	.+122    	; 0x1ece <DIO_u8getPinVal+0xe0>
    1e54:	50 c0       	rjmp	.+160    	; 0x1ef6 <DIO_u8getPinVal+0x108>
		case DIO_PORT_A: *Copy_u8valuePtr = GET_BIT(PINA_REG, Copy_u8pin); break;
    1e56:	e9 e3       	ldi	r30, 0x39	; 57
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a9 01       	movw	r20, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_u8getPinVal+0x80>
    1e6a:	55 95       	asr	r21
    1e6c:	47 95       	ror	r20
    1e6e:	8a 95       	dec	r24
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_u8getPinVal+0x7c>
    1e72:	ca 01       	movw	r24, r20
    1e74:	81 70       	andi	r24, 0x01	; 1
    1e76:	ec 81       	ldd	r30, Y+4	; 0x04
    1e78:	fd 81       	ldd	r31, Y+5	; 0x05
    1e7a:	80 83       	st	Z, r24
    1e7c:	41 c0       	rjmp	.+130    	; 0x1f00 <DIO_u8getPinVal+0x112>
		case DIO_PORT_B: *Copy_u8valuePtr = GET_BIT(PINB_REG, Copy_u8pin); break;
    1e7e:	e6 e3       	ldi	r30, 0x36	; 54
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a9 01       	movw	r20, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <DIO_u8getPinVal+0xa8>
    1e92:	55 95       	asr	r21
    1e94:	47 95       	ror	r20
    1e96:	8a 95       	dec	r24
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <DIO_u8getPinVal+0xa4>
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ea2:	80 83       	st	Z, r24
    1ea4:	2d c0       	rjmp	.+90     	; 0x1f00 <DIO_u8getPinVal+0x112>
		case DIO_PORT_C: *Copy_u8valuePtr = GET_BIT(PINC_REG, Copy_u8pin); break;
    1ea6:	e3 e3       	ldi	r30, 0x33	; 51
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a9 01       	movw	r20, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_u8getPinVal+0xd0>
    1eba:	55 95       	asr	r21
    1ebc:	47 95       	ror	r20
    1ebe:	8a 95       	dec	r24
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_u8getPinVal+0xcc>
    1ec2:	ca 01       	movw	r24, r20
    1ec4:	81 70       	andi	r24, 0x01	; 1
    1ec6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eca:	80 83       	st	Z, r24
    1ecc:	19 c0       	rjmp	.+50     	; 0x1f00 <DIO_u8getPinVal+0x112>
		case DIO_PORT_D: *Copy_u8valuePtr = GET_BIT(PIND_REG, Copy_u8pin); break;
    1ece:	e0 e3       	ldi	r30, 0x30	; 48
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8getPinVal+0xf8>
    1ee2:	55 95       	asr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8getPinVal+0xf4>
    1eea:	ca 01       	movw	r24, r20
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef2:	80 83       	st	Z, r24
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <DIO_u8getPinVal+0x112>

		default: Local_u8statues = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_u8getPinVal+0x112>
		}
	}else{
		Local_u8statues=1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8statues;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	27 96       	adiw	r28, 0x07	; 7
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <HMCP2515_voidWriteReg>:
 **************** Common Function Start  **********************/

/*********** Write Section Start ****************/

void HMCP2515_voidWriteReg(u8 Copy_u8RegAddress ,u8 Copy_u8Data)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <HMCP2515_voidWriteReg+0x6>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	6a 83       	std	Y+2, r22	; 0x02

	MSPI_VidChipSelect(1);
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress );
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Data);
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <HMCP2515_U8ReadReg>:
/*********** Write Section End ****************/

/*********** Read Section Start ****************/
u8 HMCP2515_U8ReadReg(u8 Copy_u8RegAddress)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <HMCP2515_U8ReadReg+0x6>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    u8 localValue2;
	MSPI_VidChipSelect(1);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress);
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	localValue2 = MSPI_U8MasterTransmit(0);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	MSPI_VidChipSelect(0);
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
    return localValue2;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <HMCP2515_voidResetInst>:
/*********** Read Section End ****************/

/*********** Reset Section Start ****************/
void HMCP2515_voidResetInst(void)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	MSPI_VidChipSelect(1);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_RESET_INST);
    1f90:	80 ec       	ldi	r24, 0xC0	; 192
    1f92:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
}
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <HMCP2515_voidBitModify>:
/*********** Reset Instruction End ****************/

/*********** Bit Modify Section Start ****************/
void  HMCP2515_voidBitModify(u8 Copy_RegAddress ,u8 Copy_u8Mask,u8 Copy_U8Data )
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <HMCP2515_voidBitModify+0x6>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	6a 83       	std	Y+2, r22	; 0x02
    1fb2:	4b 83       	std	Y+3, r20	; 0x03

	MSPI_VidChipSelect(1);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_BITMODIFY_INST );
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_RegAddress);
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Mask);
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_U8Data);
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>

}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <HMCP2515_voidSetBitTiming>:
/*********** Bit Modify Section End ****************/

/*********** Bit Timing Section Start ****************/
void HMCP2515_voidSetBitTiming(u8 Copy_U8CNFVAL1 ,u8 Copy_U8CNFVAL2 ,u8 Copy_U8CNFVAL3)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <HMCP2515_voidSetBitTiming+0x6>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
    1ff4:	4b 83       	std	Y+3, r20	; 0x03
     * 1 TQ for Synch bit
     * 6 TQ for Phase segment 2
     * 2 TQ For Propagation Segment
     * 7 TQ For Phase segment 1
     */
	HMCP2515_voidWriteReg(CNF1,Copy_U8CNFVAL1);
    1ff6:	8a e2       	ldi	r24, 0x2A	; 42
    1ff8:	69 81       	ldd	r22, Y+1	; 0x01
    1ffa:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF2,Copy_U8CNFVAL2);
    1ffe:	89 e2       	ldi	r24, 0x29	; 41
    2000:	6a 81       	ldd	r22, Y+2	; 0x02
    2002:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF3,Copy_U8CNFVAL3);
    2006:	88 e2       	ldi	r24, 0x28	; 40
    2008:	6b 81       	ldd	r22, Y+3	; 0x03
    200a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <HMCP2515_voidSetMode>:
/*********** Bit Timing Section End ****************/

/*********** Set Mode Inst Section Start ****************/
void HMCP2515_voidSetMode(u8 Copy_U8Mode)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
    HMCP2515_voidBitModify(CANCTRL ,0XE0,(Copy_U8Mode<<5));
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	98 2f       	mov	r25, r24
    202a:	92 95       	swap	r25
    202c:	99 0f       	add	r25, r25
    202e:	90 7e       	andi	r25, 0xE0	; 224
    2030:	8f e0       	ldi	r24, 0x0F	; 15
    2032:	60 ee       	ldi	r22, 0xE0	; 224
    2034:	49 2f       	mov	r20, r25
    2036:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HMCP2515_voidBitModify>
	//HMCP2515_voidWriteReg(CANCTRL,(Copy_U8Mode<<5));
    //u8 local1=HMCP2515_U8ReadReg(CANSTAT);
	while((HMCP2515_U8ReadReg(CANSTAT)>>5)!=Copy_U8Mode);
    203a:	8e e0       	ldi	r24, 0x0E	; 14
    203c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <HMCP2515_U8ReadReg>
    2040:	98 2f       	mov	r25, r24
    2042:	92 95       	swap	r25
    2044:	96 95       	lsr	r25
    2046:	97 70       	andi	r25, 0x07	; 7
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	98 17       	cp	r25, r24
    204c:	b1 f7       	brne	.-20     	; 0x203a <HMCP2515_voidSetMode+0x20>
		HMCP2515_voidBitModify(CANCTRL ,0XE0,Copy_U8Mode<<5);
		 MCAL_DIO_voidSETBIT(PC,PC0,LOW);

	}*/

}
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <HMCP2515_voidInitTransimiter>:
/*********** Set Mode Inst Section End ****************/

/************* Transmitter initialization Section Start ******************/
void HMCP2515_voidInitTransimiter(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	  //MCAL_DIO_voidDirectionPIN(PC,PC0,OUTPUT);
	  MSPI_voidSpiMasterInit();
    205e:	0e 94 2d 08 	call	0x105a	; 0x105a <MSPI_voidSpiMasterInit>
	  HMCP2515_voidResetInst();
    2062:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <HMCP2515_voidResetInst>

	  /* enter conf mode and enable clock */
	  HMCP2515_voidWriteReg(CANCTRL,0x87);
    2066:	8f e0       	ldi	r24, 0x0F	; 15
    2068:	67 e8       	ldi	r22, 0x87	; 135
    206a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
	   */
	 // HMCP2515_voidSetMode(CONFIG_MODE);

	 // HMCP2515_voidBitModify(CANCTRL ,0X04,0x04);
     // u8 local =HMCP2515_U8ReadReg(CANSTAT);
	 while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE);
    206e:	8e e0       	ldi	r24, 0x0E	; 14
    2070:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <HMCP2515_U8ReadReg>
    2074:	82 95       	swap	r24
    2076:	86 95       	lsr	r24
    2078:	87 70       	andi	r24, 0x07	; 7
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	c1 f7       	brne	.-16     	; 0x206e <HMCP2515_voidInitTransimiter+0x18>
	/* to run at 250KHz bitrate using 8MHz osc */
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    207e:	80 e8       	ldi	r24, 0x80	; 128
    2080:	61 eb       	ldi	r22, 0xB1	; 177
    2082:	45 e1       	ldi	r20, 0x15	; 21
    2084:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <HMCP2515_voidSetBitTiming>
	// HMCP2515_voidSetBitTiming(0x80,0xB1,0x05);
  /*  return to normal mode sending ans Recieving*/
	  HMCP2515_voidSetMode(NORMAL_MODE);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	0e 94 0d 10 	call	0x201a	; 0x201a <HMCP2515_voidSetMode>

}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <HMCP2515_VidSendCAN_Msg>:
/************* Transmitter initialization Section End  ******************/

/******************Transmitter Sending Message Start ****************/
void HMCP2515_VidSendCAN_Msg(u8 Copy_u8Address ,u32 Copy_u8MsgID, u8 Copy_u8DataLen_DLC , u8*Copy_u8data)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	28 97       	sbiw	r28, 0x08	; 8
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	7d 83       	std	Y+5, r23	; 0x05
    20ac:	6c 83       	std	Y+4, r22	; 0x04
    20ae:	4e 83       	std	Y+6, r20	; 0x06
    20b0:	38 87       	std	Y+8, r19	; 0x08
    20b2:	2f 83       	std	Y+7, r18	; 0x07
	MSPI_VidChipSelect(1);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Address);
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	/* any data can send Highest priority  (Mandatory)*/
	MSPI_U8MasterTransmit(0x03);
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	/* full IDH */
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID>>3));
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	96 95       	lsr	r25
    20d6:	87 95       	ror	r24
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID<<5));
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	82 95       	swap	r24
    20e4:	88 0f       	add	r24, r24
    20e6:	80 7e       	andi	r24, 0xE0	; 224
    20e8:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
    20f8:	8e 81       	ldd	r24, Y+6	; 0x06
    20fa:	8f 70       	andi	r24, 0x0F	; 15
    20fc:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    2100:	1a 82       	std	Y+2, r1	; 0x02
    2102:	19 82       	std	Y+1, r1	; 0x01
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <HMCP2515_VidSendCAN_Msg+0x90>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
    2106:	29 81       	ldd	r18, Y+1	; 0x01
    2108:	3a 81       	ldd	r19, Y+2	; 0x02
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	98 85       	ldd	r25, Y+8	; 0x08
    210e:	fc 01       	movw	r30, r24
    2110:	e2 0f       	add	r30, r18
    2112:	f3 1f       	adc	r31, r19
    2114:	80 81       	ld	r24, Z
    2116:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
	MSPI_U8MasterTransmit(0);
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 01       	movw	r18, r24
    212c:	2f 70       	andi	r18, 0x0F	; 15
    212e:	30 70       	andi	r19, 0x00	; 0
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	34 f3       	brlt	.-52     	; 0x2106 <HMCP2515_VidSendCAN_Msg+0x72>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
	}

	/* good bye for bus */
	MSPI_VidChipSelect(0);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>

	/* Request to send data */
	MSPI_VidChipSelect(1);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_MREG2SENDTXB0_INST);
    2146:	81 e8       	ldi	r24, 0x81	; 129
    2148:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>

	MSPI_VidChipSelect(0);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>


}
    2152:	28 96       	adiw	r28, 0x08	; 8
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <HMCP2515_voidRollOver>:
*/

/**** Declaration End  *****/

void HMCP2515_voidRollOver(u8 Copy_u8BUKT)
	{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	0f 92       	push	r0
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	89 83       	std	Y+1, r24	; 0x01
		HMCP2515_voidBitModify(RXB0CTRL , 1<<Copy_u8BUKT, 1<<Copy_u8BUKT );
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <HMCP2515_voidRollOver+0x1c>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	2a 95       	dec	r18
    2182:	e2 f7       	brpl	.-8      	; 0x217c <HMCP2515_voidRollOver+0x18>
    2184:	48 2f       	mov	r20, r24
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <HMCP2515_voidRollOver+0x32>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	2a 95       	dec	r18
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <HMCP2515_voidRollOver+0x2e>
    219a:	98 2f       	mov	r25, r24
    219c:	80 e6       	ldi	r24, 0x60	; 96
    219e:	64 2f       	mov	r22, r20
    21a0:	49 2f       	mov	r20, r25
    21a2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HMCP2515_voidBitModify>
	}
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <HMCP2515_voidSetMask>:

void HMCP2515_voidSetMask(u8 Copy_u8address_mask_Reg ,u32 Copy_u32Mask_Value ,u8 Copy_u8Extended)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <HMCP2515_voidSetMask+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <HMCP2515_voidSetMask+0x8>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	7b 83       	std	Y+3, r23	; 0x03
    21be:	6a 83       	std	Y+2, r22	; 0x02
    21c0:	4c 83       	std	Y+4, r20	; 0x04
		  MSPI_VidChipSelect(1);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
		  MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit(Copy_u8address_mask_Reg);
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	  if(Copy_u8Extended)
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	88 23       	and	r24, r24
    21d8:	51 f1       	breq	.+84     	; 0x222e <HMCP2515_voidSetMask+0x80>
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	96 95       	lsr	r25
    21e0:	87 95       	ror	r24
    21e2:	96 95       	lsr	r25
    21e4:	87 95       	ror	r24
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5));
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	82 95       	swap	r24
    21f2:	88 0f       	add	r24, r24
    21f4:	80 7e       	andi	r24, 0xE0	; 224
    21f6:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3)|(u8)(Copy_u32Mask_Value>>27));
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	96 95       	lsr	r25
    2200:	87 95       	ror	r24
    2202:	96 95       	lsr	r25
    2204:	87 95       	ror	r24
    2206:	96 95       	lsr	r25
    2208:	87 95       	ror	r24
    220a:	28 2f       	mov	r18, r24
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	99 27       	eor	r25, r25
    2212:	88 27       	eor	r24, r24
    2214:	82 2b       	or	r24, r18
    2216:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>11));
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	89 2f       	mov	r24, r25
    2220:	99 27       	eor	r25, r25
    2222:	86 95       	lsr	r24
    2224:	86 95       	lsr	r24
    2226:	86 95       	lsr	r24
    2228:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
    222c:	10 c0       	rjmp	.+32     	; 0x224e <HMCP2515_voidSetMask+0xa0>
	  }
	  else
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	9b 81       	ldd	r25, Y+3	; 0x03
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	96 95       	lsr	r25
    2238:	87 95       	ror	r24
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5));
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	82 95       	swap	r24
    2246:	88 0f       	add	r24, r24
    2248:	80 7e       	andi	r24, 0xE0	; 224
    224a:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	  }
	    MSPI_VidChipSelect(0);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <HMCP2515_voidRecievInit>:

void HMCP2515_voidRecievInit(void)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
	MSPI_voidSpiMasterInit();
    226a:	0e 94 2d 08 	call	0x105a	; 0x105a <MSPI_voidSpiMasterInit>
	HMCP2515_voidResetInst();
    226e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <HMCP2515_voidResetInst>
	/* CONFIG mode and Enable clock */
	HMCP2515_voidWriteReg(CANCTRL,0x87);
    2272:	8f e0       	ldi	r24, 0x0F	; 15
    2274:	67 e8       	ldi	r22, 0x87	; 135
    2276:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
	/*
	 */
	while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE){}
    227a:	8e e0       	ldi	r24, 0x0E	; 14
    227c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <HMCP2515_U8ReadReg>
    2280:	82 95       	swap	r24
    2282:	86 95       	lsr	r24
    2284:	87 70       	andi	r24, 0x07	; 7
    2286:	84 30       	cpi	r24, 0x04	; 4
    2288:	c1 f7       	brne	.-16     	; 0x227a <HMCP2515_voidRecievInit+0x18>
     //8MHZ
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	61 eb       	ldi	r22, 0xB1	; 177
    228e:	45 e1       	ldi	r20, 0x15	; 21
    2290:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <HMCP2515_voidSetBitTiming>

	HMCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1);
    2294:	80 e2       	ldi	r24, 0x20	; 32
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1);
    22a0:	84 e2       	ldi	r24, 0x24	; 36
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <HMCP2515_voidSetMask>

	HMCP2515_voidRollOver(1);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 b2 10 	call	0x2164	; 0x2164 <HMCP2515_voidRollOver>

	HMCP2515_voidBitModify(CANINTE, 1<<0, 1<<RX0IE);
    22b2:	8b e2       	ldi	r24, 0x2B	; 43
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HMCP2515_voidBitModify>

	HMCP2515_voidSetMode(NORMAL_MODE);
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	0e 94 0d 10 	call	0x201a	; 0x201a <HMCP2515_voidSetMode>
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <HMCP2515_voidRecieveMess>:

void HMCP2515_voidRecieveMess(u8 Copy_u8REC_Buff_addres)
{
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <HMCP2515_voidRecieveMess+0xa>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	8a 83       	std	Y+2, r24	; 0x02

	MSPI_VidChipSelect(1);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>

     for (u8 buff_index = 0 ; buff_index < 14; buff_index++)
    22ea:	19 82       	std	Y+1, r1	; 0x01
    22ec:	0d c0       	rjmp	.+26     	; 0x2308 <HMCP2515_voidRecieveMess+0x40>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	08 2f       	mov	r16, r24
    22f2:	10 e0       	ldi	r17, 0x00	; 0
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	0e 94 77 09 	call	0x12ee	; 0x12ee <MSPI_U8MasterTransmit>
    22fa:	f8 01       	movw	r30, r16
    22fc:	e6 58       	subi	r30, 0x86	; 134
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	80 83       	st	Z, r24
	MSPI_VidChipSelect(1);

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);

     for (u8 buff_index = 0 ; buff_index < 14; buff_index++)
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	8e 30       	cpi	r24, 0x0E	; 14
    230c:	80 f3       	brcs	.-32     	; 0x22ee <HMCP2515_voidRecieveMess+0x26>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
     }

	MSPI_VidChipSelect(0);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	0e 94 5f 09 	call	0x12be	; 0x12be <MSPI_VidChipSelect>
	/*Clear Flag  */
	HMCP2515_voidWriteReg(CANINTF,0);
    2314:	8c e2       	ldi	r24, 0x2C	; 44
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HMCP2515_voidWriteReg>
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	08 95       	ret

0000232a <LED_u8Mapping>:

/*
 *This function takes the led number, and returns the port and pin of that specific led;
 * it also return 1 if the led exist(between 1 and 8), 0 Otherwise;
 */
static u8 LED_u8Mapping(u8 Copy_u8LedNumber, u8 *Copy_u8PortPtr, u8 *Copy_u8PinPtr){
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	28 97       	sbiw	r28, 0x08	; 8
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	7c 83       	std	Y+4, r23	; 0x04
    2342:	6b 83       	std	Y+3, r22	; 0x03
    2344:	5e 83       	std	Y+6, r21	; 0x06
    2346:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8LedNumberStatus = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedNumber){
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	38 87       	std	Y+8, r19	; 0x08
    2354:	2f 83       	std	Y+7, r18	; 0x07
    2356:	8f 81       	ldd	r24, Y+7	; 0x07
    2358:	98 85       	ldd	r25, Y+8	; 0x08
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	91 05       	cpc	r25, r1
    235e:	09 f4       	brne	.+2      	; 0x2362 <LED_u8Mapping+0x38>
    2360:	41 c0       	rjmp	.+130    	; 0x23e4 <LED_u8Mapping+0xba>
    2362:	2f 81       	ldd	r18, Y+7	; 0x07
    2364:	38 85       	ldd	r19, Y+8	; 0x08
    2366:	25 30       	cpi	r18, 0x05	; 5
    2368:	31 05       	cpc	r19, r1
    236a:	84 f4       	brge	.+32     	; 0x238c <LED_u8Mapping+0x62>
    236c:	8f 81       	ldd	r24, Y+7	; 0x07
    236e:	98 85       	ldd	r25, Y+8	; 0x08
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	91 05       	cpc	r25, r1
    2374:	39 f1       	breq	.+78     	; 0x23c4 <LED_u8Mapping+0x9a>
    2376:	2f 81       	ldd	r18, Y+7	; 0x07
    2378:	38 85       	ldd	r19, Y+8	; 0x08
    237a:	23 30       	cpi	r18, 0x03	; 3
    237c:	31 05       	cpc	r19, r1
    237e:	54 f5       	brge	.+84     	; 0x23d4 <LED_u8Mapping+0xaa>
    2380:	8f 81       	ldd	r24, Y+7	; 0x07
    2382:	98 85       	ldd	r25, Y+8	; 0x08
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	b1 f0       	breq	.+44     	; 0x23b6 <LED_u8Mapping+0x8c>
    238a:	54 c0       	rjmp	.+168    	; 0x2434 <LED_u8Mapping+0x10a>
    238c:	2f 81       	ldd	r18, Y+7	; 0x07
    238e:	38 85       	ldd	r19, Y+8	; 0x08
    2390:	26 30       	cpi	r18, 0x06	; 6
    2392:	31 05       	cpc	r19, r1
    2394:	b9 f1       	breq	.+110    	; 0x2404 <LED_u8Mapping+0xda>
    2396:	8f 81       	ldd	r24, Y+7	; 0x07
    2398:	98 85       	ldd	r25, Y+8	; 0x08
    239a:	86 30       	cpi	r24, 0x06	; 6
    239c:	91 05       	cpc	r25, r1
    239e:	54 f1       	brlt	.+84     	; 0x23f4 <LED_u8Mapping+0xca>
    23a0:	2f 81       	ldd	r18, Y+7	; 0x07
    23a2:	38 85       	ldd	r19, Y+8	; 0x08
    23a4:	27 30       	cpi	r18, 0x07	; 7
    23a6:	31 05       	cpc	r19, r1
    23a8:	a9 f1       	breq	.+106    	; 0x2414 <LED_u8Mapping+0xea>
    23aa:	8f 81       	ldd	r24, Y+7	; 0x07
    23ac:	98 85       	ldd	r25, Y+8	; 0x08
    23ae:	88 30       	cpi	r24, 0x08	; 8
    23b0:	91 05       	cpc	r25, r1
    23b2:	c1 f1       	breq	.+112    	; 0x2424 <LED_u8Mapping+0xfa>
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LED_u8Mapping+0x10a>
			case LED_e_1:
				*Copy_u8PortPtr = LED_1_PORT;
    23b6:	eb 81       	ldd	r30, Y+3	; 0x03
    23b8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ba:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_1_PIN;
    23bc:	ed 81       	ldd	r30, Y+5	; 0x05
    23be:	fe 81       	ldd	r31, Y+6	; 0x06
    23c0:	10 82       	st	Z, r1
    23c2:	39 c0       	rjmp	.+114    	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_2:
				*Copy_u8PortPtr = LED_2_PORT;
    23c4:	eb 81       	ldd	r30, Y+3	; 0x03
    23c6:	fc 81       	ldd	r31, Y+4	; 0x04
    23c8:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_2_PIN;
    23ca:	ed 81       	ldd	r30, Y+5	; 0x05
    23cc:	fe 81       	ldd	r31, Y+6	; 0x06
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 83       	st	Z, r24
    23d2:	31 c0       	rjmp	.+98     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_3:
				*Copy_u8PortPtr = LED_3_PORT;
    23d4:	eb 81       	ldd	r30, Y+3	; 0x03
    23d6:	fc 81       	ldd	r31, Y+4	; 0x04
    23d8:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_3_PIN;
    23da:	ed 81       	ldd	r30, Y+5	; 0x05
    23dc:	fe 81       	ldd	r31, Y+6	; 0x06
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	80 83       	st	Z, r24
    23e2:	29 c0       	rjmp	.+82     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_4:
				*Copy_u8PortPtr = LED_4_PORT;
    23e4:	eb 81       	ldd	r30, Y+3	; 0x03
    23e6:	fc 81       	ldd	r31, Y+4	; 0x04
    23e8:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_4_PIN;
    23ea:	ed 81       	ldd	r30, Y+5	; 0x05
    23ec:	fe 81       	ldd	r31, Y+6	; 0x06
    23ee:	83 e0       	ldi	r24, 0x03	; 3
    23f0:	80 83       	st	Z, r24
    23f2:	21 c0       	rjmp	.+66     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_5:
				*Copy_u8PortPtr = LED_5_PORT;
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_5_PIN;
    23fa:	ed 81       	ldd	r30, Y+5	; 0x05
    23fc:	fe 81       	ldd	r31, Y+6	; 0x06
    23fe:	84 e0       	ldi	r24, 0x04	; 4
    2400:	80 83       	st	Z, r24
    2402:	19 c0       	rjmp	.+50     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_6:
				*Copy_u8PortPtr = LED_6_PORT;
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_6_PIN;
    240a:	ed 81       	ldd	r30, Y+5	; 0x05
    240c:	fe 81       	ldd	r31, Y+6	; 0x06
    240e:	85 e0       	ldi	r24, 0x05	; 5
    2410:	80 83       	st	Z, r24
    2412:	11 c0       	rjmp	.+34     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_7:
				*Copy_u8PortPtr = LED_7_PORT;
    2414:	eb 81       	ldd	r30, Y+3	; 0x03
    2416:	fc 81       	ldd	r31, Y+4	; 0x04
    2418:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_7_PIN;
    241a:	ed 81       	ldd	r30, Y+5	; 0x05
    241c:	fe 81       	ldd	r31, Y+6	; 0x06
    241e:	86 e0       	ldi	r24, 0x06	; 6
    2420:	80 83       	st	Z, r24
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			case LED_e_8:
				*Copy_u8PortPtr = LED_8_PORT;
    2424:	eb 81       	ldd	r30, Y+3	; 0x03
    2426:	fc 81       	ldd	r31, Y+4	; 0x04
    2428:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_8_PIN;
    242a:	ed 81       	ldd	r30, Y+5	; 0x05
    242c:	fe 81       	ldd	r31, Y+6	; 0x06
    242e:	87 e0       	ldi	r24, 0x07	; 7
    2430:	80 83       	st	Z, r24
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <LED_u8Mapping+0x10c>
				break;
			default:
				Local_u8LedNumberStatus = 0;
    2434:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8LedNumberStatus;
    2436:	89 81       	ldd	r24, Y+1	; 0x01
}
    2438:	28 96       	adiw	r28, 0x08	; 8
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LED_vidInit>:
/*This function used to initialize the LEDs,
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <LED_vidInit+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LED_vidInit+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    245c:	19 82       	std	Y+1, r1	; 0x01
    245e:	21 c0       	rjmp	.+66     	; 0x24a2 <LED_vidInit+0x58>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	9b 81       	ldd	r25, Y+3	; 0x03
    246a:	fc 01       	movw	r30, r24
    246c:	e2 0f       	add	r30, r18
    246e:	f3 1f       	adc	r31, r19
    2470:	80 81       	ld	r24, Z
    2472:	27 e7       	ldi	r18, 0x77	; 119
    2474:	31 e0       	ldi	r19, 0x01	; 1
    2476:	48 e7       	ldi	r20, 0x78	; 120
    2478:	51 e0       	ldi	r21, 0x01	; 1
    247a:	b9 01       	movw	r22, r18
    247c:	0e 94 95 11 	call	0x232a	; 0x232a <LED_u8Mapping>
    2480:	80 93 76 01 	sts	0x0176, r24
		if(LED_NUMBER_STATUS){
    2484:	80 91 76 01 	lds	r24, 0x0176
    2488:	88 23       	and	r24, r24
    248a:	41 f0       	breq	.+16     	; 0x249c <LED_vidInit+0x52>
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
    248c:	80 91 77 01 	lds	r24, 0x0177
    2490:	90 91 78 01 	lds	r25, 0x0178
    2494:	69 2f       	mov	r22, r25
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_u8setPinDir>
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	99 81       	ldd	r25, Y+1	; 0x01
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	98 17       	cp	r25, r24
    24a8:	d8 f2       	brcs	.-74     	; 0x2460 <LED_vidInit+0x16>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
		if(LED_NUMBER_STATUS){
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
		}
	}
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <LED_vidToggleLed>:

//This function used to toggle the led, it takes the led number;
void LED_vidToggleLed(u8 Copy_u8LedNumber){
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <LED_vidToggleLed+0x6>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LedStatus;

	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    24c4:	27 e7       	ldi	r18, 0x77	; 119
    24c6:	31 e0       	ldi	r19, 0x01	; 1
    24c8:	48 e7       	ldi	r20, 0x78	; 120
    24ca:	51 e0       	ldi	r21, 0x01	; 1
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	b9 01       	movw	r22, r18
    24d0:	0e 94 95 11 	call	0x232a	; 0x232a <LED_u8Mapping>
    24d4:	80 93 76 01 	sts	0x0176, r24
	if(LED_NUMBER_STATUS){
    24d8:	80 91 76 01 	lds	r24, 0x0176
    24dc:	88 23       	and	r24, r24
    24de:	f9 f0       	breq	.+62     	; 0x251e <LED_vidToggleLed+0x66>
		DIO_u8getPinVal(LED_PORT, LED_PIN, &Local_u8LedStatus);
    24e0:	80 91 77 01 	lds	r24, 0x0177
    24e4:	90 91 78 01 	lds	r25, 0x0178
    24e8:	69 2f       	mov	r22, r25
    24ea:	9e 01       	movw	r18, r28
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	a9 01       	movw	r20, r18
    24f2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <DIO_u8getPinVal>
		if(Local_u8LedStatus){
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	88 23       	and	r24, r24
    24fa:	49 f0       	breq	.+18     	; 0x250e <LED_vidToggleLed+0x56>
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    24fc:	80 91 77 01 	lds	r24, 0x0177
    2500:	90 91 78 01 	lds	r25, 0x0178
    2504:	69 2f       	mov	r22, r25
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
    250c:	08 c0       	rjmp	.+16     	; 0x251e <LED_vidToggleLed+0x66>
		}else{
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    250e:	80 91 77 01 	lds	r24, 0x0177
    2512:	90 91 78 01 	lds	r25, 0x0178
    2516:	69 2f       	mov	r22, r25
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
		}
	}

}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <LED_vidTurnOnLed>:

//This function used to turn on the led, it takes the led number;
void LED_vidTurnOnLed(u8 Copy_u8LedNumber){
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	89 83       	std	Y+1, r24	; 0x01
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, HIGH);
	}
#elif LEDS_Configuration == COMMON_ANODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2534:	27 e7       	ldi	r18, 0x77	; 119
    2536:	31 e0       	ldi	r19, 0x01	; 1
    2538:	48 e7       	ldi	r20, 0x78	; 120
    253a:	51 e0       	ldi	r21, 0x01	; 1
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	b9 01       	movw	r22, r18
    2540:	0e 94 95 11 	call	0x232a	; 0x232a <LED_u8Mapping>
    2544:	80 93 76 01 	sts	0x0176, r24
	if(LED_NUMBER_STATUS){
    2548:	80 91 76 01 	lds	r24, 0x0176
    254c:	88 23       	and	r24, r24
    254e:	41 f0       	breq	.+16     	; 0x2560 <LED_vidTurnOnLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    2550:	80 91 77 01 	lds	r24, 0x0177
    2554:	90 91 78 01 	lds	r25, 0x0178
    2558:	69 2f       	mov	r22, r25
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
	}
#endif
}
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <LED_vidTurnOffLed>:


//This function used to turn off the led, it takes the led number;
void LED_vidTurnOffLed(u8 Copy_u8LedNumber){
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	89 83       	std	Y+1, r24	; 0x01
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, LOW);
	}
#elif LEDS_Configuration == COMMON_ANODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2574:	27 e7       	ldi	r18, 0x77	; 119
    2576:	31 e0       	ldi	r19, 0x01	; 1
    2578:	48 e7       	ldi	r20, 0x78	; 120
    257a:	51 e0       	ldi	r21, 0x01	; 1
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	b9 01       	movw	r22, r18
    2580:	0e 94 95 11 	call	0x232a	; 0x232a <LED_u8Mapping>
    2584:	80 93 76 01 	sts	0x0176, r24
	if(LED_NUMBER_STATUS){
    2588:	80 91 76 01 	lds	r24, 0x0176
    258c:	88 23       	and	r24, r24
    258e:	41 f0       	breq	.+16     	; 0x25a0 <LED_vidTurnOffLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    2590:	80 91 77 01 	lds	r24, 0x0177
    2594:	90 91 78 01 	lds	r25, 0x0178
    2598:	69 2f       	mov	r22, r25
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DIO_u8setPinVal>
	}
#endif
}
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <main>:
static u8 Global_App_CANMsgBuffer;
static u8 Global_Turn_Left_[2] =  {70  , 100} ;
static u8 Global_Turn_Right_[2] =  {100 , 70 } ;

void main()
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	//EXTI Configurations.
	EXTI_voidSet_INT0_Cbf(&RX_Distance);
    25b0:	85 e0       	ldi	r24, 0x05	; 5
    25b2:	93 e1       	ldi	r25, 0x13	; 19
    25b4:	0e 94 5f 0b 	call	0x16be	; 0x16be <EXTI_voidSet_INT0_Cbf>
	EXTI_u8SetSource( EXTI_INT_0,EXTI_FALLING_EDGE);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	62 e0       	ldi	r22, 0x02	; 2
    25bc:	0e 94 91 09 	call	0x1322	; 0x1322 <EXTI_u8SetSource>
	EXTI_u8EnablePIE(EXTI_INT_0);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EXTI_u8EnablePIE>
	EXTI_voidEnableGIE();
    25c6:	0e 94 43 0b 	call	0x1686	; 0x1686 <EXTI_voidEnableGIE>

	//CAN initialization.
	HMCP2515_voidRecievInit();
    25ca:	0e 94 31 11 	call	0x2262	; 0x2262 <HMCP2515_voidRecievInit>
	HMCP2515_voidInitTransimiter();
    25ce:	0e 94 2b 10 	call	0x2056	; 0x2056 <HMCP2515_voidInitTransimiter>

	while(1)
	{
		//Check the received data.
		if(Global_App_CANMsgBuffer == 'l'){
    25d2:	80 91 79 01 	lds	r24, 0x0179
    25d6:	8c 36       	cpi	r24, 0x6C	; 108
    25d8:	49 f4       	brne	.+18     	; 0x25ec <main+0x44>

			// speed of the motors
			HMCP2515_VidSendCAN_Msg(TXB0CTRL, 0x7E1, 2, Global_Turn_Left_);
    25da:	29 e6       	ldi	r18, 0x69	; 105
    25dc:	31 e0       	ldi	r19, 0x01	; 1
    25de:	80 e3       	ldi	r24, 0x30	; 48
    25e0:	61 ee       	ldi	r22, 0xE1	; 225
    25e2:	77 e0       	ldi	r23, 0x07	; 7
    25e4:	42 e0       	ldi	r20, 0x02	; 2
    25e6:	0e 94 4a 10 	call	0x2094	; 0x2094 <HMCP2515_VidSendCAN_Msg>
    25ea:	0c c0       	rjmp	.+24     	; 0x2604 <main+0x5c>

		}
		else if(Global_App_CANMsgBuffer == 'r'){
    25ec:	80 91 79 01 	lds	r24, 0x0179
    25f0:	82 37       	cpi	r24, 0x72	; 114
    25f2:	41 f4       	brne	.+16     	; 0x2604 <main+0x5c>

			// speed of the motors
			HMCP2515_VidSendCAN_Msg(TXB0CTRL, 0x7E1, 2 , Global_Turn_Right_);
    25f4:	2b e6       	ldi	r18, 0x6B	; 107
    25f6:	31 e0       	ldi	r19, 0x01	; 1
    25f8:	80 e3       	ldi	r24, 0x30	; 48
    25fa:	61 ee       	ldi	r22, 0xE1	; 225
    25fc:	77 e0       	ldi	r23, 0x07	; 7
    25fe:	42 e0       	ldi	r20, 0x02	; 2
    2600:	0e 94 4a 10 	call	0x2094	; 0x2094 <HMCP2515_VidSendCAN_Msg>
		else{
			//Wrong message
		}

		//Clear the data.
		Global_App_CANMsgBuffer =0 ;
    2604:	10 92 79 01 	sts	0x0179, r1
    2608:	e4 cf       	rjmp	.-56     	; 0x25d2 <main+0x2a>

0000260a <RX_Distance>:

	}
}

void RX_Distance(void){
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62

	//RECEIVE MESSAGE FROM CAN
	HMCP2515_voidRecieveMess(RXB0CTRL);
    2612:	80 e6       	ldi	r24, 0x60	; 96
    2614:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HMCP2515_voidRecieveMess>

	//Store the received data.
	Global_App_CANMsgBuffer =  REC_Message[6];
    2618:	80 91 80 01 	lds	r24, 0x0180
    261c:	80 93 79 01 	sts	0x0179, r24

}
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <__prologue_saves__>:
    2626:	2f 92       	push	r2
    2628:	3f 92       	push	r3
    262a:	4f 92       	push	r4
    262c:	5f 92       	push	r5
    262e:	6f 92       	push	r6
    2630:	7f 92       	push	r7
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	ca 1b       	sub	r28, r26
    2650:	db 0b       	sbc	r29, r27
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	09 94       	ijmp

0000265e <__epilogue_restores__>:
    265e:	2a 88       	ldd	r2, Y+18	; 0x12
    2660:	39 88       	ldd	r3, Y+17	; 0x11
    2662:	48 88       	ldd	r4, Y+16	; 0x10
    2664:	5f 84       	ldd	r5, Y+15	; 0x0f
    2666:	6e 84       	ldd	r6, Y+14	; 0x0e
    2668:	7d 84       	ldd	r7, Y+13	; 0x0d
    266a:	8c 84       	ldd	r8, Y+12	; 0x0c
    266c:	9b 84       	ldd	r9, Y+11	; 0x0b
    266e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2670:	b9 84       	ldd	r11, Y+9	; 0x09
    2672:	c8 84       	ldd	r12, Y+8	; 0x08
    2674:	df 80       	ldd	r13, Y+7	; 0x07
    2676:	ee 80       	ldd	r14, Y+6	; 0x06
    2678:	fd 80       	ldd	r15, Y+5	; 0x05
    267a:	0c 81       	ldd	r16, Y+4	; 0x04
    267c:	1b 81       	ldd	r17, Y+3	; 0x03
    267e:	aa 81       	ldd	r26, Y+2	; 0x02
    2680:	b9 81       	ldd	r27, Y+1	; 0x01
    2682:	ce 0f       	add	r28, r30
    2684:	d1 1d       	adc	r29, r1
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	ed 01       	movw	r28, r26
    2692:	08 95       	ret

00002694 <_exit>:
    2694:	f8 94       	cli

00002696 <__stop_program>:
    2696:	ff cf       	rjmp	.-2      	; 0x2696 <__stop_program>
