
Interfacing_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00003d6e  00003e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  008001bc  008001bc  00003f5e  2**0
                  ALLOC
  3 .stab         00004848  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002773  00000000  00000000  000087a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000af1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000100ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_1>
       8:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_2>
       c:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_10>
      2c:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <main>
      8a:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e9       	ldi	r22, 0x97	; 151
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 56       	subi	r30, 0x61	; 97
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_init>:

/********************************************* Functions Implementations **************************************/

/*********************************************************************************************/
USART_Error_t USART_init(USART_Config_t * Copy_StrPtr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <USART_init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_StrPtr)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	19 f4       	brne	.+6      	; 0xe50 <USART_init+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	99 c0       	rjmp	.+306    	; 0xf82 <USART_init+0x154>

#elif USART_MODE == USART_OperMode_t_Async
		//set the Asynchronous operation mode --> doNothing (because we can't set the USREL bit and clear the UMSEL bit at the same instruction)

		// set the speed mode
		USART_UCSRA &= (~(1<<1));
     e50:	ab e2       	ldi	r26, 0x2B	; 43
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	eb e2       	ldi	r30, 0x2B	; 43
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
     e5c:	8c 93       	st	X, r24
		USART_UCSRA |= ((Copy_StrPtr->usart_speed_slct)<<1);
     e5e:	ab e2       	ldi	r26, 0x2B	; 43
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	eb e2       	ldi	r30, 0x2B	; 43
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	28 2f       	mov	r18, r24
     e6a:	ea 81       	ldd	r30, Y+2	; 0x02
     e6c:	fb 81       	ldd	r31, Y+3	; 0x03
     e6e:	84 81       	ldd	r24, Z+4	; 0x04
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	82 2b       	or	r24, r18
     e7a:	8c 93       	st	X, r24

		//set Baud rate to 9600
		if(USART_Speed_t_NormalSpeed == Copy_StrPtr->usart_speed_slct)
     e7c:	ea 81       	ldd	r30, Y+2	; 0x02
     e7e:	fb 81       	ldd	r31, Y+3	; 0x03
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	88 23       	and	r24, r24
     e84:	41 f4       	brne	.+16     	; 0xe96 <USART_init+0x68>
		{
			USART_UBRRH_UCSRC = 0;
     e86:	e0 e4       	ldi	r30, 0x40	; 64
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	10 82       	st	Z, r1
			USART_UBRRL = 51;
     e8c:	e9 e2       	ldi	r30, 0x29	; 41
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	83 e3       	ldi	r24, 0x33	; 51
     e92:	80 83       	st	Z, r24
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <USART_init+0x84>

		}
		else if(USART_Speed_t_DoubleSpeed == Copy_StrPtr->usart_speed_slct)
     e96:	ea 81       	ldd	r30, Y+2	; 0x02
     e98:	fb 81       	ldd	r31, Y+3	; 0x03
     e9a:	84 81       	ldd	r24, Z+4	; 0x04
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <USART_init+0x82>
		{
			USART_UBRRH_UCSRC = 0;
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 82       	st	Z, r1
			USART_UBRRL = 103;
     ea6:	e9 e2       	ldi	r30, 0x29	; 41
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	87 e6       	ldi	r24, 0x67	; 103
     eac:	80 83       	st	Z, r24
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <USART_init+0x84>
		}
		else{
			Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
     eb0:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
#error "Wrong Operation Mode"
#endif

		// set the data size
		if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_5)
     eb2:	ea 81       	ldd	r30, Y+2	; 0x02
     eb4:	fb 81       	ldd	r31, Y+3	; 0x03
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	88 23       	and	r24, r24
     eba:	21 f1       	breq	.+72     	; 0xf04 <USART_init+0xd6>
		{
			//DoNothing --> Because we can't set URSEL and clear  UCSZ1 and UCSZ0 at the same time.
		}
		else if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_9)
     ebc:	ea 81       	ldd	r30, Y+2	; 0x02
     ebe:	fb 81       	ldd	r31, Y+3	; 0x03
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	79 f4       	brne	.+30     	; 0xee4 <USART_init+0xb6>
		{
			USART_UCSRB |= (1<<2);
     ec6:	aa e2       	ldi	r26, 0x2A	; 42
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e2       	ldi	r30, 0x2A	; 42
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	8c 93       	st	X, r24
			USART_UBRRH_UCSRC |= ((1<<7) | (0b11<<1));
     ed4:	a0 e4       	ldi	r26, 0x40	; 64
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e0 e4       	ldi	r30, 0x40	; 64
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	86 68       	ori	r24, 0x86	; 134
     ee0:	8c 93       	st	X, r24
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <USART_init+0xd6>
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_charSize_slct << 1));
     ee4:	a0 e4       	ldi	r26, 0x40	; 64
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e0 e4       	ldi	r30, 0x40	; 64
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	28 2f       	mov	r18, r24
     ef0:	ea 81       	ldd	r30, Y+2	; 0x02
     ef2:	fb 81       	ldd	r31, Y+3	; 0x03
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	82 2b       	or	r24, r18
     f02:	8c 93       	st	X, r24
		}


		//set the parity mode
		if(Copy_StrPtr->usart_parity == USART_ParityMode_t_Disable)
     f04:	ea 81       	ldd	r30, Y+2	; 0x02
     f06:	fb 81       	ldd	r31, Y+3	; 0x03
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	88 23       	and	r24, r24
     f0c:	a1 f0       	breq	.+40     	; 0xf36 <USART_init+0x108>
		{
			//DoNothing --> Because we can't set URSEL and clear UPM1 and UPM0 at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_parity << 4));
     f0e:	a0 e4       	ldi	r26, 0x40	; 64
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e0 e4       	ldi	r30, 0x40	; 64
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	28 2f       	mov	r18, r24
     f1a:	ea 81       	ldd	r30, Y+2	; 0x02
     f1c:	fb 81       	ldd	r31, Y+3	; 0x03
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	82 95       	swap	r24
     f26:	92 95       	swap	r25
     f28:	90 7f       	andi	r25, 0xF0	; 240
     f2a:	98 27       	eor	r25, r24
     f2c:	80 7f       	andi	r24, 0xF0	; 240
     f2e:	98 27       	eor	r25, r24
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	82 2b       	or	r24, r18
     f34:	8c 93       	st	X, r24
		}

		// set the stop bit
		if(Copy_StrPtr->usart_stopBits_slct == USART_StopBitSlct_t_OneBit)
     f36:	ea 81       	ldd	r30, Y+2	; 0x02
     f38:	fb 81       	ldd	r31, Y+3	; 0x03
     f3a:	83 81       	ldd	r24, Z+3	; 0x03
     f3c:	88 23       	and	r24, r24
     f3e:	39 f0       	breq	.+14     	; 0xf4e <USART_init+0x120>
		{
			//DoNothing --> Because we can't set URSEL and clear USBS at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1 << 7) | (1 << 3));
     f40:	a0 e4       	ldi	r26, 0x40	; 64
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e0 e4       	ldi	r30, 0x40	; 64
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 68       	ori	r24, 0x88	; 136
     f4c:	8c 93       	st	X, r24
		}

		// enable the usart
		USART_UCSRB &= (~(0b11<<3));			//to clear bit3 and bit4
     f4e:	aa e2       	ldi	r26, 0x2A	; 42
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7e       	andi	r24, 0xE7	; 231
     f5a:	8c 93       	st	X, r24
		USART_UCSRB |= (Copy_StrPtr->usart_circuit_enable << 3);
     f5c:	aa e2       	ldi	r26, 0x2A	; 42
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ea e2       	ldi	r30, 0x2A	; 42
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	28 2f       	mov	r18, r24
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	80 81       	ld	r24, Z
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	82 2b       	or	r24, r18
     f80:	8c 93       	st	X, r24
	}

	return Local_ErrorState;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <USART_SendData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_SendData(s16 Copy_s16Data)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <USART_SendData+0x6>
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(USART_UCSRA,5));
     fa4:	eb e2       	ldi	r30, 0x2B	; 43
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	82 95       	swap	r24
     fac:	86 95       	lsr	r24
     fae:	87 70       	andi	r24, 0x07	; 7
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	90 70       	andi	r25, 0x00	; 0
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	a1 f3       	breq	.-24     	; 0xfa4 <USART_SendData+0x14>

	USART_UDR = Copy_s16Data;
     fbc:	ec e2       	ldi	r30, 0x2C	; 44
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	80 83       	st	Z, r24

	return Local_ErrorState;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <USART_ReceiveData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData(s16 * Copy_Ps16Data)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <USART_ReceiveData+0x6>
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	9b 83       	std	Y+3, r25	; 0x03
     fe0:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Copy_Ps16Data)
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	19 f4       	brne	.+6      	; 0xff4 <USART_ReceiveData+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	0e c0       	rjmp	.+28     	; 0x1010 <USART_ReceiveData+0x3e>
	}
	else
	{
		while(!GET_BIT(USART_UCSRA, 7));
     ff4:	eb e2       	ldi	r30, 0x2B	; 43
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 23       	and	r24, r24
     ffc:	dc f7       	brge	.-10     	; 0xff4 <USART_ReceiveData+0x22>

		*Copy_Ps16Data = (u16)USART_UDR;
     ffe:	ec e2       	ldi	r30, 0x2C	; 44
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	ea 81       	ldd	r30, Y+2	; 0x02
    100a:	fb 81       	ldd	r31, Y+3	; 0x03
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <USART_ReceiveData_interrupt>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData_interrupt(void(* Local_Fptr)(u8))
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <USART_ReceiveData_interrupt+0x6>
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != Local_Fptr)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	9b 81       	ldd	r25, Y+3	; 0x03
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	a9 f0       	breq	.+42     	; 0x1064 <USART_ReceiveData_interrupt+0x46>
	{
		USART_FPTR = Local_Fptr;
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	90 93 bd 01 	sts	0x01BD, r25
    1042:	80 93 bc 01 	sts	0x01BC, r24

		//Enable The Global Interrupt
		LIB_SREG |= (1<<7);
    1046:	af e5       	ldi	r26, 0x5F	; 95
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ef e5       	ldi	r30, 0x5F	; 95
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 68       	ori	r24, 0x80	; 128
    1052:	8c 93       	st	X, r24

		//Enable RX Complete Interrupt
		USART_UCSRB |= (1<<7);
    1054:	aa e2       	ldi	r26, 0x2A	; 42
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ea e2       	ldi	r30, 0x2A	; 42
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 68       	ori	r24, 0x80	; 128
    1060:	8c 93       	st	X, r24
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <USART_ReceiveData_interrupt+0x4a>
	}
	else
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <__vector_13>:
/*********************************************************************************************/

ISR(USART_RXC_vect)
{
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	0f 92       	push	r0
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Received_Data = USART_UDR;
    10a2:	ec e2       	ldi	r30, 0x2C	; 44
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != USART_FPTR)
    10aa:	80 91 bc 01 	lds	r24, 0x01BC
    10ae:	90 91 bd 01 	lds	r25, 0x01BD
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <__vector_13+0x4c>
	{
		USART_FPTR(Local_u8_Received_Data);
    10b6:	e0 91 bc 01 	lds	r30, 0x01BC
    10ba:	f0 91 bd 01 	lds	r31, 0x01BD
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	09 95       	icall
	}

}
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_11>:
#define Timer0_WG_PWM_Reserved_Option   (u8)1

static void (*Timer0_Tovf_cbk_Fptr)(void) = NULL;
static void (*Timer0_Ctc_cbk_Fptr)(void) = NULL;

ISR(TIMER0_OVF_vect){
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Tovf_cbk_Fptr != NULL){
    1114:	80 91 be 01 	lds	r24, 0x01BE
    1118:	90 91 bf 01 	lds	r25, 0x01BF
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	29 f0       	breq	.+10     	; 0x112a <__vector_11+0x40>
		Timer0_Tovf_cbk_Fptr();
    1120:	e0 91 be 01 	lds	r30, 0x01BE
    1124:	f0 91 bf 01 	lds	r31, 0x01BF
    1128:	09 95       	icall
	}
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Ctc_cbk_Fptr != NULL){
    117a:	80 91 c0 01 	lds	r24, 0x01C0
    117e:	90 91 c1 01 	lds	r25, 0x01C1
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	29 f0       	breq	.+10     	; 0x1190 <__vector_10+0x40>
		Timer0_Ctc_cbk_Fptr();
    1186:	e0 91 c0 01 	lds	r30, 0x01C0
    118a:	f0 91 c1 01 	lds	r31, 0x01C1
    118e:	09 95       	icall
	}
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <Timer0_vidinit>:

static Timer0_Prescaller_e TIMER0_CLK_SLCT = Timer0_Prescaller_e_No;

void Timer0_vidinit(void){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0_REG, 3);
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	87 7f       	andi	r24, 0xF7	; 247
    11ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG, 6);
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 7b       	andi	r24, 0xBF	; 191
    11d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG, 5);
#elif TIMER0_COMPARE_OUTPUT_MODE == CLEAR_ON_CM_MODE || TIMER0_COMPARE_OUTPUT_MODE == INVERTED_MODE
	CLR_BIT(TCCR0_REG, 4);
	SET_BIT(TCCR0_REG, 5);
#elif TIMER0_COMPARE_OUTPUT_MODE == SET_ON_CM_MODE || TIMER0_COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
	SET_BIT(TCCR0_REG, 5);
    11da:	a3 e5       	ldi	r26, 0x53	; 83
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e3 e5       	ldi	r30, 0x53	; 83
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, 5);
    11e8:	a3 e5       	ldi	r26, 0x53	; 83
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e3 e5       	ldi	r30, 0x53	; 83
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 62       	ori	r24, 0x20	; 32
    11f4:	8c 93       	st	X, r24
#endif
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer0_vidSlctPrescaller>:

void Timer0_vidSlctPrescaller(Timer0_Prescaller_e Copy_Timer0_Prescaller_e_value){
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Timer0_Prescaller_e_value >= Timer0_Prescaller_e_No &&
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	88 23       	and	r24, r24
    120c:	31 f0       	breq	.+12     	; 0x121a <Timer0_vidSlctPrescaller+0x1e>
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	18 f4       	brcc	.+6      	; 0x121a <Timer0_vidSlctPrescaller+0x1e>
			Copy_Timer0_Prescaller_e_value <= Timer0_Prescaller_e_Ext_Rising_Edge ){
		TIMER0_CLK_SLCT = Copy_Timer0_Prescaller_e_value;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	80 93 9f 01 	sts	0x019F, r24
	}
}
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <Timer0_vidSetPreloadVlaue>:

void Timer0_vidSetPreloadVlaue(u8 Copy_u8PreloadValue){
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = Copy_u8PreloadValue;
    122e:	e2 e5       	ldi	r30, 0x52	; 82
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	80 83       	st	Z, r24
}
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <Timer0_vidSetCTCValue>:

void Timer0_vidSetCTCValue(u8 Copy_u8CtcValue){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = Copy_u8CtcValue;
    124a:	ec e5       	ldi	r30, 0x5C	; 92
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
}
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <Timer0_vidStartTimer>:

void Timer0_vidStartTimer(void){
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= TIMER0_CLK_CLR_MSK;
    1262:	a3 e5       	ldi	r26, 0x53	; 83
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e3 e5       	ldi	r30, 0x53	; 83
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 7f       	andi	r24, 0xF8	; 248
    126e:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_CLK_SLCT;
    1270:	a3 e5       	ldi	r26, 0x53	; 83
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e3 e5       	ldi	r30, 0x53	; 83
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	90 81       	ld	r25, Z
    127a:	80 91 9f 01 	lds	r24, 0x019F
    127e:	89 2b       	or	r24, r25
    1280:	8c 93       	st	X, r24
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <Timer0_vidStopTimer>:

void Timer0_vidStopTimer(void){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= TIMER0_CLK_CLR_MSK;
    1290:	a3 e5       	ldi	r26, 0x53	; 83
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e3 e5       	ldi	r30, 0x53	; 83
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	88 7f       	andi	r24, 0xF8	; 248
    129c:	8c 93       	st	X, r24
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <Timer0_vidTovfIrqEnable>:

void Timer0_vidTovfIrqEnable(void){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG, 0);
    12ac:	a9 e5       	ldi	r26, 0x59	; 89
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e9 e5       	ldi	r30, 0x59	; 89
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	8c 93       	st	X, r24
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <Timer0_vidTovfIrqDisable>:

void Timer0_vidTovfIrqDisable(void){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG, 0);
    12c8:	a9 e5       	ldi	r26, 0x59	; 89
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e9 e5       	ldi	r30, 0x59	; 89
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8e 7f       	andi	r24, 0xFE	; 254
    12d4:	8c 93       	st	X, r24
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <Timer0_vidCtcIrqEnable>:

void Timer0_vidCtcIrqEnable(void){
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG, 1);
    12e4:	a9 e5       	ldi	r26, 0x59	; 89
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e9 e5       	ldi	r30, 0x59	; 89
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	82 60       	ori	r24, 0x02	; 2
    12f0:	8c 93       	st	X, r24
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <Timer0_vidCtcIrqDisable>:

void Timer0_vidCtcIrqDisable(void){
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG, 1);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	8c 93       	st	X, r24
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <Timer0_u8GetElepsedTime>:

u8 Timer0_u8GetElepsedTime(void){
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62

	return TCNT0_REG;
    131c:	e2 e5       	ldi	r30, 0x52	; 82
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z

}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <Timer0_vidResetTimer>:

void Timer0_vidResetTimer(void){
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62

	TCNT0_REG = 0;
    1330:	e2 e5       	ldi	r30, 0x52	; 82
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	10 82       	st	Z, r1

}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Timer0_vidSet_Tovf_Call_Back>:
	}
}
*/

//To set the call back function of the Normal mode.
void Timer0_vidSet_Tovf_Call_Back(void (*fptr)(void)){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <Timer0_vidSet_Tovf_Call_Back+0x6>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	31 f0       	breq	.+12     	; 0x135e <Timer0_vidSet_Tovf_Call_Back+0x22>
		Timer0_Tovf_cbk_Fptr = fptr;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	90 93 bf 01 	sts	0x01BF, r25
    135a:	80 93 be 01 	sts	0x01BE, r24
	}
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <Timer0_vidSet_CTC_Call_Back>:

//To set the call back function of the CTC mode.
void Timer0_vidSet_CTC_Call_Back(void (*fptr)(void)){
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <Timer0_vidSet_CTC_Call_Back+0x6>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	31 f0       	breq	.+12     	; 0x138a <Timer0_vidSet_CTC_Call_Back+0x22>
		Timer0_Ctc_cbk_Fptr = fptr;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	90 93 c1 01 	sts	0x01C1, r25
    1386:	80 93 c0 01 	sts	0x01C0, r24
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <Timer0_vidSetPwmDutyCycle>:

void Timer0_vidSetPwmDutyCycle(u8 Copy_u8DutyCycle){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <Timer0_vidSetPwmDutyCycle+0x6>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
	u8 DutyTicks;
	DutyTicks = 256 * ((f32)Copy_u8DutyCycle / 100);
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	48 ec       	ldi	r20, 0xC8	; 200
    13c0:	52 e4       	ldi	r21, 0x42	; 66
    13c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	53 e4       	ldi	r21, 0x43	; 67
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_COMPARE_OUTPUT_MODE == INVERTED_MODE
	OCR0_REG = DutyTicks;
#elif TIMER0_COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
	OCR0_REG = 255-DutyTicks;
    13ec:	ec e5       	ldi	r30, 0x5C	; 92
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	80 95       	com	r24
    13f4:	80 83       	st	Z, r24
#endif
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <MSPI_voidSpiMasterInit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSpiMasterInit(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR = 0;
    140a:	19 82       	std	Y+1, r1	; 0x01

	// Set MOSI pin direction output
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_4,DIO_OUTPUT);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	64 e0       	ldi	r22, 0x04	; 4
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_5,DIO_OUTPUT);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	65 e0       	ldi	r22, 0x05	; 5
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_6,DIO_INPUT);
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	66 e0       	ldi	r22, 0x06	; 6
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
	DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_6,DIO_HIGH);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	66 e0       	ldi	r22, 0x06	; 6
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	DIO_u8setPinDir(DIO_PORT_B,DIO_PIN_7,DIO_OUTPUT);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	67 e0       	ldi	r22, 0x07	; 7
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
//	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);

	// enable SPI
	SET_BIT(temp_SPCR, 6);
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	80 64       	ori	r24, 0x40	; 64
    1442:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit MSB first
	CLR_BIT(temp_SPCR, 5);
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	8f 7d       	andi	r24, 0xDF	; 223
    1448:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	//DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
	SET_BIT(temp_SPCR, 4);
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	89 83       	std	Y+1, r24	; 0x01


	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	87 7f       	andi	r24, 0xF7	; 247
    1454:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> sampling at rising edge
	CLR_BIT(temp_SPCR, 2);
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	8b 7f       	andi	r24, 0xFB	; 251
    145a:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 8
	SET_BIT(temp_SPCR, 0);
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 1);
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	8d 7f       	andi	r24, 0xFD	; 253
    1466:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SPSR, 0);
    1468:	ae e2       	ldi	r26, 0x2E	; 46
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ee e2       	ldi	r30, 0x2E	; 46
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24

	SPCR = temp_SPCR;
    1476:	ed e2       	ldi	r30, 0x2D	; 45
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	80 83       	st	Z, r24
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <MSPI_voidSetPreSca>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_voidSetPreSca(u8 Copy_u8Presca_value)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <MSPI_voidSetPreSca+0x6>
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Presca_value)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3b 83       	std	Y+3, r19	; 0x03
    149c:	2a 83       	std	Y+2, r18	; 0x02
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <MSPI_voidSetPreSca+0x24>
    14a8:	6a c0       	rjmp	.+212    	; 0x157e <MSPI_voidSetPreSca+0xf8>
    14aa:	2a 81       	ldd	r18, Y+2	; 0x02
    14ac:	3b 81       	ldd	r19, Y+3	; 0x03
    14ae:	24 30       	cpi	r18, 0x04	; 4
    14b0:	31 05       	cpc	r19, r1
    14b2:	84 f4       	brge	.+32     	; 0x14d4 <MSPI_voidSetPreSca+0x4e>
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	a1 f1       	breq	.+104    	; 0x1526 <MSPI_voidSetPreSca+0xa0>
    14be:	2a 81       	ldd	r18, Y+2	; 0x02
    14c0:	3b 81       	ldd	r19, Y+3	; 0x03
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <MSPI_voidSetPreSca+0x44>
    14c8:	44 c0       	rjmp	.+136    	; 0x1552 <MSPI_voidSetPreSca+0xcc>
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	9b 81       	ldd	r25, Y+3	; 0x03
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	a1 f0       	breq	.+40     	; 0x14fa <MSPI_voidSetPreSca+0x74>
    14d2:	ad c0       	rjmp	.+346    	; 0x162e <MSPI_voidSetPreSca+0x1a8>
    14d4:	2a 81       	ldd	r18, Y+2	; 0x02
    14d6:	3b 81       	ldd	r19, Y+3	; 0x03
    14d8:	25 30       	cpi	r18, 0x05	; 5
    14da:	31 05       	cpc	r19, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <MSPI_voidSetPreSca+0x5a>
    14de:	7b c0       	rjmp	.+246    	; 0x15d6 <MSPI_voidSetPreSca+0x150>
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	85 30       	cpi	r24, 0x05	; 5
    14e6:	91 05       	cpc	r25, r1
    14e8:	0c f4       	brge	.+2      	; 0x14ec <MSPI_voidSetPreSca+0x66>
    14ea:	5f c0       	rjmp	.+190    	; 0x15aa <MSPI_voidSetPreSca+0x124>
    14ec:	2a 81       	ldd	r18, Y+2	; 0x02
    14ee:	3b 81       	ldd	r19, Y+3	; 0x03
    14f0:	26 30       	cpi	r18, 0x06	; 6
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <MSPI_voidSetPreSca+0x72>
    14f6:	85 c0       	rjmp	.+266    	; 0x1602 <MSPI_voidSetPreSca+0x17c>
    14f8:	9a c0       	rjmp	.+308    	; 0x162e <MSPI_voidSetPreSca+0x1a8>
	{
		/************************ ***/
		case 0:
			CLR_BIT(SPCR, 0);
    14fa:	ad e2       	ldi	r26, 0x2D	; 45
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ed e2       	ldi	r30, 0x2D	; 45
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1508:	ad e2       	ldi	r26, 0x2D	; 45
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ed e2       	ldi	r30, 0x2D	; 45
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8d 7f       	andi	r24, 0xFD	; 253
    1514:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1516:	ae e2       	ldi	r26, 0x2E	; 46
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ee e2       	ldi	r30, 0x2E	; 46
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8e 7f       	andi	r24, 0xFE	; 254
    1522:	8c 93       	st	X, r24
    1524:	99 c0       	rjmp	.+306    	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 1:
			SET_BIT(SPCR, 0);
    1526:	ad e2       	ldi	r26, 0x2D	; 45
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ed e2       	ldi	r30, 0x2D	; 45
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    1534:	ad e2       	ldi	r26, 0x2D	; 45
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ed e2       	ldi	r30, 0x2D	; 45
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8d 7f       	andi	r24, 0xFD	; 253
    1540:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    1542:	ae e2       	ldi	r26, 0x2E	; 46
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ee e2       	ldi	r30, 0x2E	; 46
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	8c 93       	st	X, r24
    1550:	83 c0       	rjmp	.+262    	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 2:
			CLR_BIT(SPCR, 0);
    1552:	ad e2       	ldi	r26, 0x2D	; 45
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ed e2       	ldi	r30, 0x2D	; 45
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    1560:	ad e2       	ldi	r26, 0x2D	; 45
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ed e2       	ldi	r30, 0x2D	; 45
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    156e:	ae e2       	ldi	r26, 0x2E	; 46
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ee e2       	ldi	r30, 0x2E	; 46
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8e 7f       	andi	r24, 0xFE	; 254
    157a:	8c 93       	st	X, r24
    157c:	6d c0       	rjmp	.+218    	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 3:
			SET_BIT(SPCR, 0);
    157e:	ad e2       	ldi	r26, 0x2D	; 45
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ed e2       	ldi	r30, 0x2D	; 45
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	81 60       	ori	r24, 0x01	; 1
    158a:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    158c:	ad e2       	ldi	r26, 0x2D	; 45
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ed e2       	ldi	r30, 0x2D	; 45
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    159a:	ae e2       	ldi	r26, 0x2E	; 46
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e2       	ldi	r30, 0x2E	; 46
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8e 7f       	andi	r24, 0xFE	; 254
    15a6:	8c 93       	st	X, r24
    15a8:	57 c0       	rjmp	.+174    	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 4:
			CLR_BIT(SPCR, 0);
    15aa:	ad e2       	ldi	r26, 0x2D	; 45
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ed e2       	ldi	r30, 0x2D	; 45
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8e 7f       	andi	r24, 0xFE	; 254
    15b6:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    15b8:	ad e2       	ldi	r26, 0x2D	; 45
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ed e2       	ldi	r30, 0x2D	; 45
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8d 7f       	andi	r24, 0xFD	; 253
    15c4:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    15c6:	ae e2       	ldi	r26, 0x2E	; 46
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ee e2       	ldi	r30, 0x2E	; 46
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	8c 93       	st	X, r24
    15d4:	41 c0       	rjmp	.+130    	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 5:
			SET_BIT(SPCR, 0);
    15d6:	ad e2       	ldi	r26, 0x2D	; 45
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ed e2       	ldi	r30, 0x2D	; 45
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    15e4:	ad e2       	ldi	r26, 0x2D	; 45
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ed e2       	ldi	r30, 0x2D	; 45
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8d 7f       	andi	r24, 0xFD	; 253
    15f0:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    15f2:	ae e2       	ldi	r26, 0x2E	; 46
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ee e2       	ldi	r30, 0x2E	; 46
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	8c 93       	st	X, r24
    1600:	2b c0       	rjmp	.+86     	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		case 6:
			CLR_BIT(SPCR, 0);
    1602:	ad e2       	ldi	r26, 0x2D	; 45
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ed e2       	ldi	r30, 0x2D	; 45
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	8c 93       	st	X, r24
			SET_BIT(SPCR, 1);
    1610:	ad e2       	ldi	r26, 0x2D	; 45
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ed e2       	ldi	r30, 0x2D	; 45
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	8c 93       	st	X, r24
			SET_BIT(SPSR, 0);
    161e:	ae e2       	ldi	r26, 0x2E	; 46
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ee e2       	ldi	r30, 0x2E	; 46
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	81 60       	ori	r24, 0x01	; 1
    162a:	8c 93       	st	X, r24
    162c:	15 c0       	rjmp	.+42     	; 0x1658 <MSPI_voidSetPreSca+0x1d2>
		break;
		/************************ ***/
		default :
			CLR_BIT(SPCR, 0);
    162e:	ad e2       	ldi	r26, 0x2D	; 45
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ed e2       	ldi	r30, 0x2D	; 45
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8e 7f       	andi	r24, 0xFE	; 254
    163a:	8c 93       	st	X, r24
			CLR_BIT(SPCR, 1);
    163c:	ad e2       	ldi	r26, 0x2D	; 45
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ed e2       	ldi	r30, 0x2D	; 45
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	8c 93       	st	X, r24
			CLR_BIT(SPSR, 0);
    164a:	ae e2       	ldi	r26, 0x2E	; 46
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e2       	ldi	r30, 0x2E	; 46
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8e 7f       	andi	r24, 0xFE	; 254
    1656:	8c 93       	st	X, r24

		break;
	}
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <MSPI_VidChipSelect>:
 @Brief     :
 @Parameter :
 @Return    :
 */
void MSPI_VidChipSelect(u8 state)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	0f 92       	push	r0
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	31 f4       	brne	.+12     	; 0x1682 <MSPI_VidChipSelect+0x1e>
	{
		//MCAL_DIO_voidSETBIT(PB,PB4,LOW);
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_LOW);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
    1680:	05 c0       	rjmp	.+10     	; 0x168c <MSPI_VidChipSelect+0x28>
	}
	else
	{
		DIO_u8setPinVal(DIO_PORT_B,DIO_PIN_4,DIO_HIGH);
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	64 e0       	ldi	r22, 0x04	; 4
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	}
}
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <MSPI_U8MasterTransmit>:
 @Brief     :
 @Parameter :
 @Return    :
 */
u8 MSPI_U8MasterTransmit(u8 Copy_u8SpiMessage)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <MSPI_U8MasterTransmit+0x6>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
    16a0:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Copy_u8SpiMessage;
    16a2:	ef e2       	ldi	r30, 0x2F	; 47
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
	while(GET_BIT(SPSR, 7)==0);
    16aa:	ee e2       	ldi	r30, 0x2E	; 46
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	88 23       	and	r24, r24
    16b2:	dc f7       	brge	.-10     	; 0x16aa <MSPI_U8MasterTransmit+0x16>
	dataRead = SPDR;
    16b4:	ef e2       	ldi	r30, 0x2F	; 47
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <EXTI_u8SetSource>:
static void (*INT0_Cbf_ptr)(void) = NULL;
static void (*INT1_Cbf_ptr)(void) = NULL;
static void (*INT2_Cbf_ptr)(void) = NULL;

//this function sets the interrupt source, it takes the external interrupt number and event;
u8 EXTI_u8SetSource(u8 Copy_u8INTx, u8 Copy_u8Source){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	2b 97       	sbiw	r28, 0x0b	; 11
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Status = 0;
    16e0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3b 87       	std	Y+11, r19	; 0x0b
    16ea:	2a 87       	std	Y+10, r18	; 0x0a
    16ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <EXTI_u8SetSource+0x30>
    16f6:	77 c0       	rjmp	.+238    	; 0x17e6 <EXTI_u8SetSource+0x11e>
    16f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <EXTI_u8SetSource+0x3c>
    1702:	dd c0       	rjmp	.+442    	; 0x18be <EXTI_u8SetSource+0x1f6>
    1704:	8a 85       	ldd	r24, Y+10	; 0x0a
    1706:	9b 85       	ldd	r25, Y+11	; 0x0b
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <EXTI_u8SetSource+0x46>
    170c:	09 c1       	rjmp	.+530    	; 0x1920 <EXTI_u8SetSource+0x258>
	case EXTI_INT_0:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_2);  // make pd2 => input
    170e:	a1 e3       	ldi	r26, 0x31	; 49
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e1 e3       	ldi	r30, 0x31	; 49
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8b 7f       	andi	r24, 0xFB	; 251
    171a:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_2);  //pull_up
    171c:	a2 e3       	ldi	r26, 0x32	; 50
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	84 60       	ori	r24, 0x04	; 4
    1728:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	39 87       	std	Y+9, r19	; 0x09
    1732:	28 87       	std	Y+8, r18	; 0x08
    1734:	88 85       	ldd	r24, Y+8	; 0x08
    1736:	99 85       	ldd	r25, Y+9	; 0x09
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	21 f1       	breq	.+72     	; 0x1786 <EXTI_u8SetSource+0xbe>
    173e:	28 85       	ldd	r18, Y+8	; 0x08
    1740:	39 85       	ldd	r19, Y+9	; 0x09
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	2c f4       	brge	.+10     	; 0x1752 <EXTI_u8SetSource+0x8a>
    1748:	88 85       	ldd	r24, Y+8	; 0x08
    174a:	99 85       	ldd	r25, Y+9	; 0x09
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	61 f0       	breq	.+24     	; 0x1768 <EXTI_u8SetSource+0xa0>
    1750:	47 c0       	rjmp	.+142    	; 0x17e0 <EXTI_u8SetSource+0x118>
    1752:	28 85       	ldd	r18, Y+8	; 0x08
    1754:	39 85       	ldd	r19, Y+9	; 0x09
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	21 f1       	breq	.+72     	; 0x17a4 <EXTI_u8SetSource+0xdc>
    175c:	88 85       	ldd	r24, Y+8	; 0x08
    175e:	99 85       	ldd	r25, Y+9	; 0x09
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	71 f1       	breq	.+92     	; 0x17c2 <EXTI_u8SetSource+0xfa>
    1766:	3c c0       	rjmp	.+120    	; 0x17e0 <EXTI_u8SetSource+0x118>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_0);
    1768:	a5 e5       	ldi	r26, 0x55	; 85
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e5       	ldi	r30, 0x55	; 85
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8d 7f       	andi	r24, 0xFD	; 253
    1782:	8c 93       	st	X, r24
    1784:	cf c0       	rjmp	.+414    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    1786:	a5 e5       	ldi	r26, 0x55	; 85
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e5 e5       	ldi	r30, 0x55	; 85
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	81 60       	ori	r24, 0x01	; 1
    1792:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    1794:	a5 e5       	ldi	r26, 0x55	; 85
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e5       	ldi	r30, 0x55	; 85
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8c 93       	st	X, r24
    17a2:	c0 c0       	rjmp	.+384    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    17a4:	a5 e5       	ldi	r26, 0x55	; 85
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e5 e5       	ldi	r30, 0x55	; 85
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    17b2:	a5 e5       	ldi	r26, 0x55	; 85
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e5       	ldi	r30, 0x55	; 85
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	82 60       	ori	r24, 0x02	; 2
    17be:	8c 93       	st	X, r24
    17c0:	b1 c0       	rjmp	.+354    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_0);
    17c2:	a5 e5       	ldi	r26, 0x55	; 85
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e5       	ldi	r30, 0x55	; 85
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	81 60       	ori	r24, 0x01	; 1
    17ce:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_1);
    17d0:	a5 e5       	ldi	r26, 0x55	; 85
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e5       	ldi	r30, 0x55	; 85
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	8c 93       	st	X, r24
    17de:	a2 c0       	rjmp	.+324    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	9f c0       	rjmp	.+318    	; 0x1924 <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_1:
		CLR_BIT(EXTI_DDRD_REG, EXTI_PIN_3);  // make pd2 => input
    17e6:	a1 e3       	ldi	r26, 0x31	; 49
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e3       	ldi	r30, 0x31	; 49
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	87 7f       	andi	r24, 0xF7	; 247
    17f2:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTD_REG, EXTI_PIN_3);  //pull_up
    17f4:	a2 e3       	ldi	r26, 0x32	; 50
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e3       	ldi	r30, 0x32	; 50
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 60       	ori	r24, 0x08	; 8
    1800:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3f 83       	std	Y+7, r19	; 0x07
    180a:	2e 83       	std	Y+6, r18	; 0x06
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	21 f1       	breq	.+72     	; 0x185e <EXTI_u8SetSource+0x196>
    1816:	2e 81       	ldd	r18, Y+6	; 0x06
    1818:	3f 81       	ldd	r19, Y+7	; 0x07
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <EXTI_u8SetSource+0x162>
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	61 f0       	breq	.+24     	; 0x1840 <EXTI_u8SetSource+0x178>
    1828:	47 c0       	rjmp	.+142    	; 0x18b8 <EXTI_u8SetSource+0x1f0>
    182a:	2e 81       	ldd	r18, Y+6	; 0x06
    182c:	3f 81       	ldd	r19, Y+7	; 0x07
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	21 f1       	breq	.+72     	; 0x187c <EXTI_u8SetSource+0x1b4>
    1834:	8e 81       	ldd	r24, Y+6	; 0x06
    1836:	9f 81       	ldd	r25, Y+7	; 0x07
    1838:	83 30       	cpi	r24, 0x03	; 3
    183a:	91 05       	cpc	r25, r1
    183c:	71 f1       	breq	.+92     	; 0x189a <EXTI_u8SetSource+0x1d2>
    183e:	3c c0       	rjmp	.+120    	; 0x18b8 <EXTI_u8SetSource+0x1f0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_2);
    1840:	a5 e5       	ldi	r26, 0x55	; 85
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e5       	ldi	r30, 0x55	; 85
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8b 7f       	andi	r24, 0xFB	; 251
    184c:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    184e:	a5 e5       	ldi	r26, 0x55	; 85
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e5 e5       	ldi	r30, 0x55	; 85
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	87 7f       	andi	r24, 0xF7	; 247
    185a:	8c 93       	st	X, r24
    185c:	63 c0       	rjmp	.+198    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    185e:	a5 e5       	ldi	r26, 0x55	; 85
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e5       	ldi	r30, 0x55	; 85
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	84 60       	ori	r24, 0x04	; 4
    186a:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    186c:	a5 e5       	ldi	r26, 0x55	; 85
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e5       	ldi	r30, 0x55	; 85
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	87 7f       	andi	r24, 0xF7	; 247
    1878:	8c 93       	st	X, r24
    187a:	54 c0       	rjmp	.+168    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8b 7f       	andi	r24, 0xFB	; 251
    1888:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    188a:	a5 e5       	ldi	r26, 0x55	; 85
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e5 e5       	ldi	r30, 0x55	; 85
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	88 60       	ori	r24, 0x08	; 8
    1896:	8c 93       	st	X, r24
    1898:	45 c0       	rjmp	.+138    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCR_REG,  EXTI_PIN_2);
    189a:	a5 e5       	ldi	r26, 0x55	; 85
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e5       	ldi	r30, 0x55	; 85
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	84 60       	ori	r24, 0x04	; 4
    18a6:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG, EXTI_PIN_3);
    18a8:	a5 e5       	ldi	r26, 0x55	; 85
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e5 e5       	ldi	r30, 0x55	; 85
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	88 60       	ori	r24, 0x08	; 8
    18b4:	8c 93       	st	X, r24
    18b6:	36 c0       	rjmp	.+108    	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	33 c0       	rjmp	.+102    	; 0x1924 <EXTI_u8SetSource+0x25c>
		}
		break;

	case EXTI_INT_2:
		CLR_BIT(EXTI_DDRB_REG, EXTI_PIN_2);  // make pd2 => input
    18be:	a7 e3       	ldi	r26, 0x37	; 55
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e7 e3       	ldi	r30, 0x37	; 55
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8b 7f       	andi	r24, 0xFB	; 251
    18ca:	8c 93       	st	X, r24
		SET_BIT(EXTI_PORTB_REG, EXTI_PIN_2);  //pull_up
    18cc:	a8 e3       	ldi	r26, 0x38	; 56
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e8 e3       	ldi	r30, 0x38	; 56
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	84 60       	ori	r24, 0x04	; 4
    18d8:	8c 93       	st	X, r24
		switch(Copy_u8Source){
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3d 83       	std	Y+5, r19	; 0x05
    18e2:	2c 83       	std	Y+4, r18	; 0x04
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	31 f0       	breq	.+12     	; 0x18fa <EXTI_u8SetSource+0x232>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	49 f0       	breq	.+18     	; 0x190a <EXTI_u8SetSource+0x242>
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <EXTI_u8SetSource+0x252>
		case EXTI_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCSR_REG,  EXTI_PIN_6);
    18fa:	a4 e5       	ldi	r26, 0x54	; 84
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e4 e5       	ldi	r30, 0x54	; 84
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 7b       	andi	r24, 0xBF	; 191
    1906:	8c 93       	st	X, r24
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(EXTI_MCUCSR_REG, EXTI_PIN_6);
    190a:	a4 e5       	ldi	r26, 0x54	; 84
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e4 e5       	ldi	r30, 0x54	; 84
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	8c 93       	st	X, r24
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <EXTI_u8SetSource+0x25c>
			break;
		default:Local_u8Status = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <EXTI_u8SetSource+0x25c>
		}
		break;
		default: Local_u8Status = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
				SET_BIT(MCUCSR, PIN_6);
				break;
			default: Local_u8Status = 1;
			}
		}*/
	return Local_u8Status;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	2b 96       	adiw	r28, 0x0b	; 11
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EXTI_u8EnablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8EnablePIE(u8 Copy_u8INTx){
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EXTI_u8EnablePIE+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EXTI_u8EnablePIE+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    1946:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	89 f0       	breq	.+34     	; 0x197e <EXTI_u8EnablePIE+0x46>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	a1 f0       	breq	.+40     	; 0x198e <EXTI_u8EnablePIE+0x56>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	c1 f4       	brne	.+48     	; 0x199e <EXTI_u8EnablePIE+0x66>
	case EXTI_INT_0:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    196e:	ab e5       	ldi	r26, 0x5B	; 91
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	eb e5       	ldi	r30, 0x5B	; 91
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
    197c:	12 c0       	rjmp	.+36     	; 0x19a2 <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_1:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	8c 93       	st	X, r24
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <EXTI_u8EnablePIE+0x6a>
		break;
	case EXTI_INT_2:
		SET_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	8c 93       	st	X, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <EXTI_u8EnablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <EXTI_u8DisablePIE>:

/*
	this function used to enable the PIE (set the corresponding bit in GICR to 1),
	it takes the external interrupt number;
 */
u8 EXTI_u8DisablePIE(u8 Copy_u8INTx){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <EXTI_u8DisablePIE+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <EXTI_u8DisablePIE+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8INTx){
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3c 83       	std	Y+4, r19	; 0x04
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	89 f0       	breq	.+34     	; 0x19f8 <EXTI_u8DisablePIE+0x46>
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	a1 f0       	breq	.+40     	; 0x1a08 <EXTI_u8DisablePIE+0x56>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	c1 f4       	brne	.+48     	; 0x1a18 <EXTI_u8DisablePIE+0x66>
	case EXTI_INT_0:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_6);
    19e8:	ab e5       	ldi	r26, 0x5B	; 91
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e5       	ldi	r30, 0x5B	; 91
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7b       	andi	r24, 0xBF	; 191
    19f4:	8c 93       	st	X, r24
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_1:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_7);
    19f8:	ab e5       	ldi	r26, 0x5B	; 91
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e5       	ldi	r30, 0x5B	; 91
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	8c 93       	st	X, r24
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <EXTI_u8DisablePIE+0x6a>
		break;
	case EXTI_INT_2:
		CLR_BIT(EXTI_GICR_REG, EXTI_PIN_5);
    1a08:	ab e5       	ldi	r26, 0x5B	; 91
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e5       	ldi	r30, 0x5B	; 91
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	8c 93       	st	X, r24
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <EXTI_u8DisablePIE+0x6a>
		break;
	default: Local_u8Status = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <EXTI_voidEnableGIE>:

//this function used to enable the GIE (set the I_bit in SREG to 1)
void EXTI_voidEnableGIE(){
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    1a34:	af e5       	ldi	r26, 0x5F	; 95
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	ef e5       	ldi	r30, 0x5F	; 95
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	8c 93       	st	X, r24
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <EXTI_voidDisableGIE>:

//this function used to disable the GIE (set the I_bit in SREG to 0)
void EXTI_voidDisableGIE(){
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_SREG_REG, EXTI_PIN_7);
    1a50:	af e5       	ldi	r26, 0x5F	; 95
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ef e5       	ldi	r30, 0x5F	; 95
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8f 77       	andi	r24, 0x7F	; 127
    1a5c:	8c 93       	st	X, r24
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <EXTI_voidSet_INT0_Cbf>:

//This function used to set INT0 call back function.
void EXTI_voidSet_INT0_Cbf(void (*fptr)(void)){
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <EXTI_voidSet_INT0_Cbf+0x6>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL){
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <EXTI_voidSet_INT0_Cbf+0x22>
		INT0_Cbf_ptr = fptr;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	90 93 c3 01 	sts	0x01C3, r25
    1a82:	80 93 c2 01 	sts	0x01C2, r24
	}
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <EXTI_voidSet_INT1_Cbf>:

//This function used to set INT1 call back function.
void EXTI_voidSet_INT1_Cbf(void (*fptr)(void))
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <EXTI_voidSet_INT1_Cbf+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <EXTI_voidSet_INT1_Cbf+0x22>
	{
		INT1_Cbf_ptr = fptr;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	90 93 c5 01 	sts	0x01C5, r25
    1aae:	80 93 c4 01 	sts	0x01C4, r24
	}
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <EXTI_voidSet_INT2_Cbf>:

//This function used to set INT1 call back function.
void EXTI_voidSet_INT2_Cbf(void (*fptr)(void))
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <EXTI_voidSet_INT2_Cbf+0x6>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	if(fptr != NULL)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	31 f0       	breq	.+12     	; 0x1ade <EXTI_voidSet_INT2_Cbf+0x22>
	{
		INT2_Cbf_ptr = fptr;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	90 93 c7 01 	sts	0x01C7, r25
    1ada:	80 93 c6 01 	sts	0x01C6, r24
	}
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <__vector_1>:

ISR(INT0_vect){
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Cbf_ptr != NULL){
    1b12:	80 91 c2 01 	lds	r24, 0x01C2
    1b16:	90 91 c3 01 	lds	r25, 0x01C3
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <__vector_1+0x40>
		INT0_Cbf_ptr();
    1b1e:	e0 91 c2 01 	lds	r30, 0x01C2
    1b22:	f0 91 c3 01 	lds	r31, 0x01C3
    1b26:	09 95       	icall
	}
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_2>:

ISR(INT1_vect){
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Cbf_ptr != NULL)
    1b78:	80 91 c4 01 	lds	r24, 0x01C4
    1b7c:	90 91 c5 01 	lds	r25, 0x01C5
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <__vector_2+0x40>
	{
		INT1_Cbf_ptr();
    1b84:	e0 91 c4 01 	lds	r30, 0x01C4
    1b88:	f0 91 c5 01 	lds	r31, 0x01C5
    1b8c:	09 95       	icall
	}
}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_3>:

ISR(INT2_vect){
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Cbf_ptr != NULL)
    1bde:	80 91 c6 01 	lds	r24, 0x01C6
    1be2:	90 91 c7 01 	lds	r25, 0x01C7
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	29 f0       	breq	.+10     	; 0x1bf4 <__vector_3+0x40>
	{
		INT2_Cbf_ptr();
    1bea:	e0 91 c6 01 	lds	r30, 0x01C6
    1bee:	f0 91 c7 01 	lds	r31, 0x01C7
    1bf2:	09 95       	icall
	}
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <DIO_u8setPortDir>:
#include "../DIO_V2/DIO_reg.h"


//PORT Functions
//set PORT direction
u8 DIO_u8setPortDir(u8 Copy_u8port, u8 Copy_u8dir){
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <DIO_u8setPortDir+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <DIO_u8setPortDir+0x8>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3d 83       	std	Y+5, r19	; 0x05
    1c36:	2c 83       	std	Y+4, r18	; 0x04
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	d1 f0       	breq	.+52     	; 0x1c76 <DIO_u8setPortDir+0x5c>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <DIO_u8setPortDir+0x3c>
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	61 f0       	breq	.+24     	; 0x1c6c <DIO_u8setPortDir+0x52>
    1c54:	1f c0       	rjmp	.+62     	; 0x1c94 <DIO_u8setPortDir+0x7a>
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	81 f0       	breq	.+32     	; 0x1c80 <DIO_u8setPortDir+0x66>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	81 f0       	breq	.+32     	; 0x1c8a <DIO_u8setPortDir+0x70>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <DIO_u8setPortDir+0x7a>
	case DIO_PORT_A:	DDRA_REG = Copy_u8dir;  break;
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	80 83       	st	Z, r24
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_B:	DDRB_REG = Copy_u8dir;  break;
    1c76:	e7 e3       	ldi	r30, 0x37	; 55
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	80 83       	st	Z, r24
    1c7e:	0c c0       	rjmp	.+24     	; 0x1c98 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_C:	DDRC_REG = Copy_u8dir;  break;
    1c80:	e4 e3       	ldi	r30, 0x34	; 52
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	80 83       	st	Z, r24
    1c88:	07 c0       	rjmp	.+14     	; 0x1c98 <DIO_u8setPortDir+0x7e>
	case DIO_PORT_D:	DDRD_REG = Copy_u8dir;  break;
    1c8a:	e1 e3       	ldi	r30, 0x31	; 49
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	80 83       	st	Z, r24
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_u8setPortDir+0x7e>

	default: Local_u8statues = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_u8setPortVal>:

//set PORT value
u8 DIO_u8setPortVal(u8 Copy_u8port, u8 Copy_u8val)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <DIO_u8setPortVal+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_u8setPortVal+0x8>
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1cbc:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	3d 83       	std	Y+5, r19	; 0x05
    1cc6:	2c 83       	std	Y+4, r18	; 0x04
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	d1 f0       	breq	.+52     	; 0x1d06 <DIO_u8setPortVal+0x5c>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <DIO_u8setPortVal+0x3c>
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <DIO_u8setPortVal+0x52>
    1ce4:	1f c0       	rjmp	.+62     	; 0x1d24 <DIO_u8setPortVal+0x7a>
    1ce6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cea:	22 30       	cpi	r18, 0x02	; 2
    1cec:	31 05       	cpc	r19, r1
    1cee:	81 f0       	breq	.+32     	; 0x1d10 <DIO_u8setPortVal+0x66>
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	81 f0       	breq	.+32     	; 0x1d1a <DIO_u8setPortVal+0x70>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <DIO_u8setPortVal+0x7a>
	case DIO_PORT_A:	PORTA_REG = Copy_u8val;  break;
    1cfc:	eb e3       	ldi	r30, 0x3B	; 59
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	80 83       	st	Z, r24
    1d04:	11 c0       	rjmp	.+34     	; 0x1d28 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_B:	PORTB_REG = Copy_u8val;  break;
    1d06:	e8 e3       	ldi	r30, 0x38	; 56
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	80 83       	st	Z, r24
    1d0e:	0c c0       	rjmp	.+24     	; 0x1d28 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_C:	PORTC_REG = Copy_u8val;  break;
    1d10:	e5 e3       	ldi	r30, 0x35	; 53
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	80 83       	st	Z, r24
    1d18:	07 c0       	rjmp	.+14     	; 0x1d28 <DIO_u8setPortVal+0x7e>
	case DIO_PORT_D:	PORTD_REG = Copy_u8val;  break;
    1d1a:	e2 e3       	ldi	r30, 0x32	; 50
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	80 83       	st	Z, r24
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_u8setPortVal+0x7e>
	default: Local_u8statues = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <DIO_u8getPortVal>:
//get PORT value
u8 DIO_u8getPortVal(u8 Copy_u8port, u8 *Copy_u8valuePtr){
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <DIO_u8getPortVal+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <DIO_u8getPortVal+0x8>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <DIO_u8getPortVal+0xa>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	7c 83       	std	Y+4, r23	; 0x04
    1d4c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statues = 0;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port){
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3e 83       	std	Y+6, r19	; 0x06
    1d58:	2d 83       	std	Y+5, r18	; 0x05
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	91 05       	cpc	r25, r1
    1d62:	e1 f0       	breq	.+56     	; 0x1d9c <DIO_u8getPortVal+0x62>
    1d64:	2d 81       	ldd	r18, Y+5	; 0x05
    1d66:	3e 81       	ldd	r19, Y+6	; 0x06
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <DIO_u8getPortVal+0x3e>
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	61 f0       	breq	.+24     	; 0x1d8e <DIO_u8getPortVal+0x54>
    1d76:	27 c0       	rjmp	.+78     	; 0x1dc6 <DIO_u8getPortVal+0x8c>
    1d78:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	a1 f0       	breq	.+40     	; 0x1daa <DIO_u8getPortVal+0x70>
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	91 05       	cpc	r25, r1
    1d8a:	b1 f0       	breq	.+44     	; 0x1db8 <DIO_u8getPortVal+0x7e>
    1d8c:	1c c0       	rjmp	.+56     	; 0x1dc6 <DIO_u8getPortVal+0x8c>
	case DIO_PORT_A:	*Copy_u8valuePtr = PINA_REG;  break;
    1d8e:	e9 e3       	ldi	r30, 0x39	; 57
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 83       	st	Z, r24
    1d9a:	17 c0       	rjmp	.+46     	; 0x1dca <DIO_u8getPortVal+0x90>
	case DIO_PORT_B:	*Copy_u8valuePtr = PINB_REG;  break;
    1d9c:	e6 e3       	ldi	r30, 0x36	; 54
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	eb 81       	ldd	r30, Y+3	; 0x03
    1da4:	fc 81       	ldd	r31, Y+4	; 0x04
    1da6:	80 83       	st	Z, r24
    1da8:	10 c0       	rjmp	.+32     	; 0x1dca <DIO_u8getPortVal+0x90>
	case DIO_PORT_C:	*Copy_u8valuePtr = PINC_REG;  break;
    1daa:	e3 e3       	ldi	r30, 0x33	; 51
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	eb 81       	ldd	r30, Y+3	; 0x03
    1db2:	fc 81       	ldd	r31, Y+4	; 0x04
    1db4:	80 83       	st	Z, r24
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <DIO_u8getPortVal+0x90>
	case DIO_PORT_D:	*Copy_u8valuePtr = PIND_REG;  break;
    1db8:	e0 e3       	ldi	r30, 0x30	; 48
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc2:	80 83       	st	Z, r24
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_u8getPortVal+0x90>

	default: Local_u8statues = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dcc:	26 96       	adiw	r28, 0x06	; 6
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <DIO_u8setPinDir>:

//PIN Functions
//set PIN direction
u8 DIO_u8setPinDir(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8dir){
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	28 97       	sbiw	r28, 0x08	; 8
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	8a 83       	std	Y+2, r24	; 0x02
    1df4:	6b 83       	std	Y+3, r22	; 0x03
    1df6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    1df8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <= 7){
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 30       	cpi	r24, 0x08	; 8
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <DIO_u8setPinDir+0x24>
    1e00:	f4 c0       	rjmp	.+488    	; 0x1fea <DIO_u8setPinDir+0x20c>
		if(Copy_u8dir == DIO_INPUT){
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	88 23       	and	r24, r24
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <DIO_u8setPinDir+0x2c>
    1e08:	77 c0       	rjmp	.+238    	; 0x1ef8 <DIO_u8setPinDir+0x11a>
			switch(Copy_u8port){
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	38 87       	std	Y+8, r19	; 0x08
    1e12:	2f 83       	std	Y+7, r18	; 0x07
    1e14:	8f 81       	ldd	r24, Y+7	; 0x07
    1e16:	98 85       	ldd	r25, Y+8	; 0x08
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	59 f1       	breq	.+86     	; 0x1e74 <DIO_u8setPinDir+0x96>
    1e1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e20:	38 85       	ldd	r19, Y+8	; 0x08
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <DIO_u8setPinDir+0x54>
    1e28:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2a:	98 85       	ldd	r25, Y+8	; 0x08
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f0       	breq	.+26     	; 0x1e4a <DIO_u8setPinDir+0x6c>
    1e30:	60 c0       	rjmp	.+192    	; 0x1ef2 <DIO_u8setPinDir+0x114>
    1e32:	2f 81       	ldd	r18, Y+7	; 0x07
    1e34:	38 85       	ldd	r19, Y+8	; 0x08
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	89 f1       	breq	.+98     	; 0x1e9e <DIO_u8setPinDir+0xc0>
    1e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3e:	98 85       	ldd	r25, Y+8	; 0x08
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <DIO_u8setPinDir+0x6a>
    1e46:	40 c0       	rjmp	.+128    	; 0x1ec8 <DIO_u8setPinDir+0xea>
    1e48:	54 c0       	rjmp	.+168    	; 0x1ef2 <DIO_u8setPinDir+0x114>
			case DIO_PORT_A:	CLR_BIT(DDRA_REG, Copy_u8pin);  break;
    1e4a:	aa e3       	ldi	r26, 0x3A	; 58
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	ea e3       	ldi	r30, 0x3A	; 58
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_u8setPinDir+0x8a>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_u8setPinDir+0x86>
    1e6c:	80 95       	com	r24
    1e6e:	84 23       	and	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	bd c0       	rjmp	.+378    	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	CLR_BIT(DDRB_REG, Copy_u8pin);  break;
    1e74:	a7 e3       	ldi	r26, 0x37	; 55
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e7 e3       	ldi	r30, 0x37	; 55
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8setPinDir+0xb4>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_u8setPinDir+0xb0>
    1e96:	80 95       	com	r24
    1e98:	84 23       	and	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	a8 c0       	rjmp	.+336    	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	CLR_BIT(DDRC_REG, Copy_u8pin);  break;
    1e9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e4 e3       	ldi	r30, 0x34	; 52
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_u8setPinDir+0xde>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_u8setPinDir+0xda>
    1ec0:	80 95       	com	r24
    1ec2:	84 23       	and	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	93 c0       	rjmp	.+294    	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	CLR_BIT(DDRD_REG, Copy_u8pin);  break;
    1ec8:	a1 e3       	ldi	r26, 0x31	; 49
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e1 e3       	ldi	r30, 0x31	; 49
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8setPinDir+0x108>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8setPinDir+0x104>
    1eea:	80 95       	com	r24
    1eec:	84 23       	and	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	7e c0       	rjmp	.+252    	; 0x1fee <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	7b c0       	rjmp	.+246    	; 0x1fee <DIO_u8setPinDir+0x210>
			}
		}else if(Copy_u8dir == DIO_OUTPUT){
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <DIO_u8setPinDir+0x122>
    1efe:	72 c0       	rjmp	.+228    	; 0x1fe4 <DIO_u8setPinDir+0x206>
			switch(Copy_u8port){
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3e 83       	std	Y+6, r19	; 0x06
    1f08:	2d 83       	std	Y+5, r18	; 0x05
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	91 05       	cpc	r25, r1
    1f12:	49 f1       	breq	.+82     	; 0x1f66 <DIO_u8setPinDir+0x188>
    1f14:	2d 81       	ldd	r18, Y+5	; 0x05
    1f16:	3e 81       	ldd	r19, Y+6	; 0x06
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <DIO_u8setPinDir+0x14a>
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	61 f0       	breq	.+24     	; 0x1f3e <DIO_u8setPinDir+0x160>
    1f26:	5b c0       	rjmp	.+182    	; 0x1fde <DIO_u8setPinDir+0x200>
    1f28:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	71 f1       	breq	.+92     	; 0x1f8e <DIO_u8setPinDir+0x1b0>
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	91 05       	cpc	r25, r1
    1f3a:	e9 f1       	breq	.+122    	; 0x1fb6 <DIO_u8setPinDir+0x1d8>
    1f3c:	50 c0       	rjmp	.+160    	; 0x1fde <DIO_u8setPinDir+0x200>
			case DIO_PORT_A:	SET_BIT(DDRA_REG, Copy_u8pin);  break;
    1f3e:	aa e3       	ldi	r26, 0x3A	; 58
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ea e3       	ldi	r30, 0x3A	; 58
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <DIO_u8setPinDir+0x17e>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <DIO_u8setPinDir+0x17a>
    1f60:	84 2b       	or	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	44 c0       	rjmp	.+136    	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_B:	SET_BIT(DDRB_REG, Copy_u8pin);  break;
    1f66:	a7 e3       	ldi	r26, 0x37	; 55
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e7 e3       	ldi	r30, 0x37	; 55
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_u8setPinDir+0x1a6>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_u8setPinDir+0x1a2>
    1f88:	84 2b       	or	r24, r20
    1f8a:	8c 93       	st	X, r24
    1f8c:	30 c0       	rjmp	.+96     	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_C:	SET_BIT(DDRC_REG, Copy_u8pin);  break;
    1f8e:	a4 e3       	ldi	r26, 0x34	; 52
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e4 e3       	ldi	r30, 0x34	; 52
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_u8setPinDir+0x1ce>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_u8setPinDir+0x1ca>
    1fb0:	84 2b       	or	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	1c c0       	rjmp	.+56     	; 0x1fee <DIO_u8setPinDir+0x210>
			case DIO_PORT_D:	SET_BIT(DDRD_REG, Copy_u8pin);  break;
    1fb6:	a1 e3       	ldi	r26, 0x31	; 49
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e1 e3       	ldi	r30, 0x31	; 49
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <DIO_u8setPinDir+0x1f6>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <DIO_u8setPinDir+0x1f2>
    1fd8:	84 2b       	or	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <DIO_u8setPinDir+0x210>

			default: Local_u8statues = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <DIO_u8setPinDir+0x210>
			}
		}else{
			Local_u8statues=1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_u8setPinDir+0x210>
		}

	}else{
		Local_u8statues=1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff0:	28 96       	adiw	r28, 0x08	; 8
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <DIO_u8setPinVal>:
//set PIN value
u8 DIO_u8setPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8val){
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	28 97       	sbiw	r28, 0x08	; 8
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	6b 83       	std	Y+3, r22	; 0x03
    201a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    201c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	88 30       	cpi	r24, 0x08	; 8
    2022:	08 f0       	brcs	.+2      	; 0x2026 <DIO_u8setPinVal+0x24>
    2024:	f4 c0       	rjmp	.+488    	; 0x220e <DIO_u8setPinVal+0x20c>
		if(Copy_u8val == DIO_HIGH){
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	09 f0       	breq	.+2      	; 0x202e <DIO_u8setPinVal+0x2c>
    202c:	72 c0       	rjmp	.+228    	; 0x2112 <DIO_u8setPinVal+0x110>
			switch(Copy_u8port){
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	38 87       	std	Y+8, r19	; 0x08
    2036:	2f 83       	std	Y+7, r18	; 0x07
    2038:	8f 81       	ldd	r24, Y+7	; 0x07
    203a:	98 85       	ldd	r25, Y+8	; 0x08
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	49 f1       	breq	.+82     	; 0x2094 <DIO_u8setPinVal+0x92>
    2042:	2f 81       	ldd	r18, Y+7	; 0x07
    2044:	38 85       	ldd	r19, Y+8	; 0x08
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	2c f4       	brge	.+10     	; 0x2056 <DIO_u8setPinVal+0x54>
    204c:	8f 81       	ldd	r24, Y+7	; 0x07
    204e:	98 85       	ldd	r25, Y+8	; 0x08
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 f0       	breq	.+24     	; 0x206c <DIO_u8setPinVal+0x6a>
    2054:	5b c0       	rjmp	.+182    	; 0x210c <DIO_u8setPinVal+0x10a>
    2056:	2f 81       	ldd	r18, Y+7	; 0x07
    2058:	38 85       	ldd	r19, Y+8	; 0x08
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	71 f1       	breq	.+92     	; 0x20bc <DIO_u8setPinVal+0xba>
    2060:	8f 81       	ldd	r24, Y+7	; 0x07
    2062:	98 85       	ldd	r25, Y+8	; 0x08
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	e9 f1       	breq	.+122    	; 0x20e4 <DIO_u8setPinVal+0xe2>
    206a:	50 c0       	rjmp	.+160    	; 0x210c <DIO_u8setPinVal+0x10a>
			case DIO_PORT_A:	SET_BIT(PORTA_REG, Copy_u8pin);  break;
    206c:	ab e3       	ldi	r26, 0x3B	; 59
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e3       	ldi	r30, 0x3B	; 59
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <DIO_u8setPinVal+0x88>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <DIO_u8setPinVal+0x84>
    208e:	84 2b       	or	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	bf c0       	rjmp	.+382    	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	SET_BIT(PORTB_REG, Copy_u8pin);  break;
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_u8setPinVal+0xb0>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_u8setPinVal+0xac>
    20b6:	84 2b       	or	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	ab c0       	rjmp	.+342    	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	SET_BIT(PORTC_REG, Copy_u8pin);  break;
    20bc:	a5 e3       	ldi	r26, 0x35	; 53
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e5 e3       	ldi	r30, 0x35	; 53
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 2e       	mov	r0, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <DIO_u8setPinVal+0xd8>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <DIO_u8setPinVal+0xd4>
    20de:	84 2b       	or	r24, r20
    20e0:	8c 93       	st	X, r24
    20e2:	97 c0       	rjmp	.+302    	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	SET_BIT(PORTD_REG, Copy_u8pin);  break;
    20e4:	a2 e3       	ldi	r26, 0x32	; 50
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <DIO_u8setPinVal+0x100>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <DIO_u8setPinVal+0xfc>
    2106:	84 2b       	or	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	83 c0       	rjmp	.+262    	; 0x2212 <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	80 c0       	rjmp	.+256    	; 0x2212 <DIO_u8setPinVal+0x210>
			}
		}else if(Copy_u8val == DIO_LOW){
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	88 23       	and	r24, r24
    2116:	09 f0       	breq	.+2      	; 0x211a <DIO_u8setPinVal+0x118>
    2118:	77 c0       	rjmp	.+238    	; 0x2208 <DIO_u8setPinVal+0x206>
			switch(Copy_u8port){
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3e 83       	std	Y+6, r19	; 0x06
    2122:	2d 83       	std	Y+5, r18	; 0x05
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	91 05       	cpc	r25, r1
    212c:	59 f1       	breq	.+86     	; 0x2184 <DIO_u8setPinVal+0x182>
    212e:	2d 81       	ldd	r18, Y+5	; 0x05
    2130:	3e 81       	ldd	r19, Y+6	; 0x06
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	2c f4       	brge	.+10     	; 0x2142 <DIO_u8setPinVal+0x140>
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f0       	breq	.+26     	; 0x215a <DIO_u8setPinVal+0x158>
    2140:	60 c0       	rjmp	.+192    	; 0x2202 <DIO_u8setPinVal+0x200>
    2142:	2d 81       	ldd	r18, Y+5	; 0x05
    2144:	3e 81       	ldd	r19, Y+6	; 0x06
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	89 f1       	breq	.+98     	; 0x21ae <DIO_u8setPinVal+0x1ac>
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <DIO_u8setPinVal+0x156>
    2156:	40 c0       	rjmp	.+128    	; 0x21d8 <DIO_u8setPinVal+0x1d6>
    2158:	54 c0       	rjmp	.+168    	; 0x2202 <DIO_u8setPinVal+0x200>
			case DIO_PORT_A:	CLR_BIT(PORTA_REG, Copy_u8pin);  break;
    215a:	ab e3       	ldi	r26, 0x3B	; 59
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	eb e3       	ldi	r30, 0x3B	; 59
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 2e       	mov	r0, r18
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <DIO_u8setPinVal+0x176>
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	0a 94       	dec	r0
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <DIO_u8setPinVal+0x172>
    217c:	80 95       	com	r24
    217e:	84 23       	and	r24, r20
    2180:	8c 93       	st	X, r24
    2182:	47 c0       	rjmp	.+142    	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_B:	CLR_BIT(PORTB_REG, Copy_u8pin);  break;
    2184:	a8 e3       	ldi	r26, 0x38	; 56
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 e3       	ldi	r30, 0x38	; 56
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <DIO_u8setPinVal+0x1a0>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <DIO_u8setPinVal+0x19c>
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	32 c0       	rjmp	.+100    	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_C:	CLR_BIT(PORTC_REG, Copy_u8pin);  break;
    21ae:	a5 e3       	ldi	r26, 0x35	; 53
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e5 e3       	ldi	r30, 0x35	; 53
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <DIO_u8setPinVal+0x1ca>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <DIO_u8setPinVal+0x1c6>
    21d0:	80 95       	com	r24
    21d2:	84 23       	and	r24, r20
    21d4:	8c 93       	st	X, r24
    21d6:	1d c0       	rjmp	.+58     	; 0x2212 <DIO_u8setPinVal+0x210>
			case DIO_PORT_D:	CLR_BIT(PORTD_REG, Copy_u8pin);  break;
    21d8:	a2 e3       	ldi	r26, 0x32	; 50
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e2 e3       	ldi	r30, 0x32	; 50
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 2e       	mov	r0, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_u8setPinVal+0x1f4>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_u8setPinVal+0x1f0>
    21fa:	80 95       	com	r24
    21fc:	84 23       	and	r24, r20
    21fe:	8c 93       	st	X, r24
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <DIO_u8setPinVal+0x210>

			default: Local_u8statues = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <DIO_u8setPinVal+0x210>
			}
		}else{
			Local_u8statues=1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_u8setPinVal+0x210>
		}
	}else{
		Local_u8statues=1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8statues;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
}
    2214:	28 96       	adiw	r28, 0x08	; 8
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <DIO_u8getPinVal>:

//get PIN value
u8 DIO_u8getPinVal(u8 Copy_u8port, u8 Copy_u8pin, u8 *Copy_u8valuePtr){
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	27 97       	sbiw	r28, 0x07	; 7
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	6b 83       	std	Y+3, r22	; 0x03
    223e:	5d 83       	std	Y+5, r21	; 0x05
    2240:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8statues = 0;
    2242:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= 0 && Copy_u8pin <=7){
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	08 f0       	brcs	.+2      	; 0x224c <DIO_u8getPinVal+0x26>
    224a:	74 c0       	rjmp	.+232    	; 0x2334 <DIO_u8getPinVal+0x10e>
		switch(Copy_u8port){
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	3f 83       	std	Y+7, r19	; 0x07
    2254:	2e 83       	std	Y+6, r18	; 0x06
    2256:	4e 81       	ldd	r20, Y+6	; 0x06
    2258:	5f 81       	ldd	r21, Y+7	; 0x07
    225a:	41 30       	cpi	r20, 0x01	; 1
    225c:	51 05       	cpc	r21, r1
    225e:	59 f1       	breq	.+86     	; 0x22b6 <DIO_u8getPinVal+0x90>
    2260:	8e 81       	ldd	r24, Y+6	; 0x06
    2262:	9f 81       	ldd	r25, Y+7	; 0x07
    2264:	82 30       	cpi	r24, 0x02	; 2
    2266:	91 05       	cpc	r25, r1
    2268:	34 f4       	brge	.+12     	; 0x2276 <DIO_u8getPinVal+0x50>
    226a:	2e 81       	ldd	r18, Y+6	; 0x06
    226c:	3f 81       	ldd	r19, Y+7	; 0x07
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	69 f0       	breq	.+26     	; 0x228e <DIO_u8getPinVal+0x68>
    2274:	5c c0       	rjmp	.+184    	; 0x232e <DIO_u8getPinVal+0x108>
    2276:	4e 81       	ldd	r20, Y+6	; 0x06
    2278:	5f 81       	ldd	r21, Y+7	; 0x07
    227a:	42 30       	cpi	r20, 0x02	; 2
    227c:	51 05       	cpc	r21, r1
    227e:	79 f1       	breq	.+94     	; 0x22de <DIO_u8getPinVal+0xb8>
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	83 30       	cpi	r24, 0x03	; 3
    2286:	91 05       	cpc	r25, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <DIO_u8getPinVal+0x66>
    228a:	3d c0       	rjmp	.+122    	; 0x2306 <DIO_u8getPinVal+0xe0>
    228c:	50 c0       	rjmp	.+160    	; 0x232e <DIO_u8getPinVal+0x108>
		case DIO_PORT_A: *Copy_u8valuePtr = GET_BIT(PINA_REG, Copy_u8pin); break;
    228e:	e9 e3       	ldi	r30, 0x39	; 57
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a9 01       	movw	r20, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_u8getPinVal+0x80>
    22a2:	55 95       	asr	r21
    22a4:	47 95       	ror	r20
    22a6:	8a 95       	dec	r24
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_u8getPinVal+0x7c>
    22aa:	ca 01       	movw	r24, r20
    22ac:	81 70       	andi	r24, 0x01	; 1
    22ae:	ec 81       	ldd	r30, Y+4	; 0x04
    22b0:	fd 81       	ldd	r31, Y+5	; 0x05
    22b2:	80 83       	st	Z, r24
    22b4:	41 c0       	rjmp	.+130    	; 0x2338 <DIO_u8getPinVal+0x112>
		case DIO_PORT_B: *Copy_u8valuePtr = GET_BIT(PINB_REG, Copy_u8pin); break;
    22b6:	e6 e3       	ldi	r30, 0x36	; 54
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a9 01       	movw	r20, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <DIO_u8getPinVal+0xa8>
    22ca:	55 95       	asr	r21
    22cc:	47 95       	ror	r20
    22ce:	8a 95       	dec	r24
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <DIO_u8getPinVal+0xa4>
    22d2:	ca 01       	movw	r24, r20
    22d4:	81 70       	andi	r24, 0x01	; 1
    22d6:	ec 81       	ldd	r30, Y+4	; 0x04
    22d8:	fd 81       	ldd	r31, Y+5	; 0x05
    22da:	80 83       	st	Z, r24
    22dc:	2d c0       	rjmp	.+90     	; 0x2338 <DIO_u8getPinVal+0x112>
		case DIO_PORT_C: *Copy_u8valuePtr = GET_BIT(PINC_REG, Copy_u8pin); break;
    22de:	e3 e3       	ldi	r30, 0x33	; 51
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a9 01       	movw	r20, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_u8getPinVal+0xd0>
    22f2:	55 95       	asr	r21
    22f4:	47 95       	ror	r20
    22f6:	8a 95       	dec	r24
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <DIO_u8getPinVal+0xcc>
    22fa:	ca 01       	movw	r24, r20
    22fc:	81 70       	andi	r24, 0x01	; 1
    22fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2300:	fd 81       	ldd	r31, Y+5	; 0x05
    2302:	80 83       	st	Z, r24
    2304:	19 c0       	rjmp	.+50     	; 0x2338 <DIO_u8getPinVal+0x112>
		case DIO_PORT_D: *Copy_u8valuePtr = GET_BIT(PIND_REG, Copy_u8pin); break;
    2306:	e0 e3       	ldi	r30, 0x30	; 48
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a9 01       	movw	r20, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <DIO_u8getPinVal+0xf8>
    231a:	55 95       	asr	r21
    231c:	47 95       	ror	r20
    231e:	8a 95       	dec	r24
    2320:	e2 f7       	brpl	.-8      	; 0x231a <DIO_u8getPinVal+0xf4>
    2322:	ca 01       	movw	r24, r20
    2324:	81 70       	andi	r24, 0x01	; 1
    2326:	ec 81       	ldd	r30, Y+4	; 0x04
    2328:	fd 81       	ldd	r31, Y+5	; 0x05
    232a:	80 83       	st	Z, r24
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <DIO_u8getPinVal+0x112>

		default: Local_u8statues = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <DIO_u8getPinVal+0x112>
		}
	}else{
		Local_u8statues=1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8statues;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	27 96       	adiw	r28, 0x07	; 7
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <HMCP2515_voidWriteReg>:
 **************** Common Function Start  **********************/

/*********** Write Section Start ****************/

void HMCP2515_voidWriteReg(u8 Copy_u8RegAddress ,u8 Copy_u8Data)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <HMCP2515_voidWriteReg+0x6>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	6a 83       	std	Y+2, r22	; 0x02

	MSPI_VidChipSelect(1);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress );
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Data);
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <HMCP2515_U8ReadReg>:
/*********** Write Section End ****************/

/*********** Read Section Start ****************/
u8 HMCP2515_U8ReadReg(u8 Copy_u8RegAddress)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <HMCP2515_U8ReadReg+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	8a 83       	std	Y+2, r24	; 0x02
    u8 localValue2;
	MSPI_VidChipSelect(1);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8RegAddress);
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	localValue2 = MSPI_U8MasterTransmit(0);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
    23a6:	89 83       	std	Y+1, r24	; 0x01
	MSPI_VidChipSelect(0);
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
    return localValue2;
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <HMCP2515_voidResetInst>:
/*********** Read Section End ****************/

/*********** Reset Section Start ****************/
void HMCP2515_voidResetInst(void)
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
	MSPI_VidChipSelect(1);
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_RESET_INST);
    23c8:	80 ec       	ldi	r24, 0xC0	; 192
    23ca:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <HMCP2515_voidBitModify>:
/*********** Reset Instruction End ****************/

/*********** Bit Modify Section Start ****************/
void  HMCP2515_voidBitModify(u8 Copy_RegAddress ,u8 Copy_u8Mask,u8 Copy_U8Data )
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <HMCP2515_voidBitModify+0x6>
    23e0:	0f 92       	push	r0
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	6a 83       	std	Y+2, r22	; 0x02
    23ea:	4b 83       	std	Y+3, r20	; 0x03

	MSPI_VidChipSelect(1);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
	MSPI_U8MasterTransmit(MCP2515_BITMODIFY_INST );
    23f2:	85 e0       	ldi	r24, 0x05	; 5
    23f4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_RegAddress);
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Mask);
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_U8Data);
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_VidChipSelect(0);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>

}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <HMCP2515_voidSetBitTiming>:
/*********** Bit Modify Section End ****************/

/*********** Bit Timing Section Start ****************/
void HMCP2515_voidSetBitTiming(u8 Copy_U8CNFVAL1 ,u8 Copy_U8CNFVAL2 ,u8 Copy_U8CNFVAL3)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <HMCP2515_voidSetBitTiming+0x6>
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	6a 83       	std	Y+2, r22	; 0x02
    242c:	4b 83       	std	Y+3, r20	; 0x03
     * 1 TQ for Synch bit
     * 6 TQ for Phase segment 2
     * 2 TQ For Propagation Segment
     * 7 TQ For Phase segment 1
     */
	HMCP2515_voidWriteReg(CNF1,Copy_U8CNFVAL1);
    242e:	8a e2       	ldi	r24, 0x2A	; 42
    2430:	69 81       	ldd	r22, Y+1	; 0x01
    2432:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF2,Copy_U8CNFVAL2);
    2436:	89 e2       	ldi	r24, 0x29	; 41
    2438:	6a 81       	ldd	r22, Y+2	; 0x02
    243a:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
	HMCP2515_voidWriteReg(CNF3,Copy_U8CNFVAL3);
    243e:	88 e2       	ldi	r24, 0x28	; 40
    2440:	6b 81       	ldd	r22, Y+3	; 0x03
    2442:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <HMCP2515_voidSetMode>:
/*********** Bit Timing Section End ****************/

/*********** Set Mode Inst Section Start ****************/
void HMCP2515_voidSetMode(u8 Copy_U8Mode)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	0f 92       	push	r0
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	89 83       	std	Y+1, r24	; 0x01
    HMCP2515_voidBitModify(CANCTRL ,0XE0,(Copy_U8Mode<<5));
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	98 2f       	mov	r25, r24
    2462:	92 95       	swap	r25
    2464:	99 0f       	add	r25, r25
    2466:	90 7e       	andi	r25, 0xE0	; 224
    2468:	8f e0       	ldi	r24, 0x0F	; 15
    246a:	60 ee       	ldi	r22, 0xE0	; 224
    246c:	49 2f       	mov	r20, r25
    246e:	0e 94 ed 11 	call	0x23da	; 0x23da <HMCP2515_voidBitModify>
	//HMCP2515_voidWriteReg(CANCTRL,(Copy_U8Mode<<5));
    //u8 local1=HMCP2515_U8ReadReg(CANSTAT);
	while((HMCP2515_U8ReadReg(CANSTAT)>>5)!=Copy_U8Mode);
    2472:	8e e0       	ldi	r24, 0x0E	; 14
    2474:	0e 94 c1 11 	call	0x2382	; 0x2382 <HMCP2515_U8ReadReg>
    2478:	98 2f       	mov	r25, r24
    247a:	92 95       	swap	r25
    247c:	96 95       	lsr	r25
    247e:	97 70       	andi	r25, 0x07	; 7
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	98 17       	cp	r25, r24
    2484:	b1 f7       	brne	.-20     	; 0x2472 <HMCP2515_voidSetMode+0x20>
		HMCP2515_voidBitModify(CANCTRL ,0XE0,Copy_U8Mode<<5);
		 MCAL_DIO_voidSETBIT(PC,PC0,LOW);

	}*/

}
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <HMCP2515_voidInitTransimiter>:
/*********** Set Mode Inst Section End ****************/

/************* Transmitter initialization Section Start ******************/
void HMCP2515_voidInitTransimiter(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	  //MCAL_DIO_voidDirectionPIN(PC,PC0,OUTPUT);
	  MSPI_voidSpiMasterInit();
    2496:	0e 94 00 0a 	call	0x1400	; 0x1400 <MSPI_voidSpiMasterInit>
	  HMCP2515_voidResetInst();
    249a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <HMCP2515_voidResetInst>

	  /* enter conf mode and enable clock */
	  HMCP2515_voidWriteReg(CANCTRL,0x87);
    249e:	8f e0       	ldi	r24, 0x0F	; 15
    24a0:	67 e8       	ldi	r22, 0x87	; 135
    24a2:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
	   */
	 // HMCP2515_voidSetMode(CONFIG_MODE);

	 // HMCP2515_voidBitModify(CANCTRL ,0X04,0x04);
     // u8 local =HMCP2515_U8ReadReg(CANSTAT);
	 while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE);
    24a6:	8e e0       	ldi	r24, 0x0E	; 14
    24a8:	0e 94 c1 11 	call	0x2382	; 0x2382 <HMCP2515_U8ReadReg>
    24ac:	82 95       	swap	r24
    24ae:	86 95       	lsr	r24
    24b0:	87 70       	andi	r24, 0x07	; 7
    24b2:	84 30       	cpi	r24, 0x04	; 4
    24b4:	c1 f7       	brne	.-16     	; 0x24a6 <HMCP2515_voidInitTransimiter+0x18>
	/* to run at 250KHz bitrate using 8MHz osc */
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    24b6:	80 e8       	ldi	r24, 0x80	; 128
    24b8:	61 eb       	ldi	r22, 0xB1	; 177
    24ba:	45 e1       	ldi	r20, 0x15	; 21
    24bc:	0e 94 0e 12 	call	0x241c	; 0x241c <HMCP2515_voidSetBitTiming>
	// HMCP2515_voidSetBitTiming(0x80,0xB1,0x05);
  /*  return to normal mode sending ans Recieving*/
	  HMCP2515_voidSetMode(NORMAL_MODE);
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	0e 94 29 12 	call	0x2452	; 0x2452 <HMCP2515_voidSetMode>

}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <HMCP2515_VidSendCAN_Msg>:
/************* Transmitter initialization Section End  ******************/

/******************Transmitter Sending Message Start ****************/
void HMCP2515_VidSendCAN_Msg(u8 Copy_u8Address ,u32 Copy_u8MsgID, u8 Copy_u8DataLen_DLC , u8*Copy_u8data)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	28 97       	sbiw	r28, 0x08	; 8
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	8b 83       	std	Y+3, r24	; 0x03
    24e2:	7d 83       	std	Y+5, r23	; 0x05
    24e4:	6c 83       	std	Y+4, r22	; 0x04
    24e6:	4e 83       	std	Y+6, r20	; 0x06
    24e8:	38 87       	std	Y+8, r19	; 0x08
    24ea:	2f 83       	std	Y+7, r18	; 0x07
	MSPI_VidChipSelect(1);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8Address);
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	/* any data can send Highest priority  (Mandatory)*/
	MSPI_U8MasterTransmit(0x03);
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	/* full IDH */
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID>>3));
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	96 95       	lsr	r25
    250a:	87 95       	ror	r24
    250c:	96 95       	lsr	r25
    250e:	87 95       	ror	r24
    2510:	96 95       	lsr	r25
    2512:	87 95       	ror	r24
    2514:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit((u8)(Copy_u8MsgID<<5) | (0b00000001 << 3));
    2518:	8c 81       	ldd	r24, Y+4	; 0x04
    251a:	82 95       	swap	r24
    251c:	88 0f       	add	r24, r24
    251e:	80 7e       	andi	r24, 0xE0	; 224
    2520:	88 60       	ori	r24, 0x08	; 8
    2522:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
    2532:	8e 81       	ldd	r24, Y+6	; 0x06
    2534:	8f 70       	andi	r24, 0x0F	; 15
    2536:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    253a:	1a 82       	std	Y+2, r1	; 0x02
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	0f c0       	rjmp	.+30     	; 0x255e <HMCP2515_VidSendCAN_Msg+0x92>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
    2540:	29 81       	ldd	r18, Y+1	; 0x01
    2542:	3a 81       	ldd	r19, Y+2	; 0x02
    2544:	8f 81       	ldd	r24, Y+7	; 0x07
    2546:	98 85       	ldd	r25, Y+8	; 0x08
    2548:	fc 01       	movw	r30, r24
    254a:	e2 0f       	add	r30, r18
    254c:	f3 1f       	adc	r31, r19
    254e:	80 81       	ld	r24, Z
    2550:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(0);
	MSPI_U8MasterTransmit(0);
	/* DLC IS 1000 RTR IS 0 SO WRITE  */
	MSPI_U8MasterTransmit(Copy_u8DataLen_DLC&0x0F);
	/* send data */
	for(int i =0; i<(Copy_u8DataLen_DLC&0x0F);i++)
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	8e 81       	ldd	r24, Y+6	; 0x06
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9c 01       	movw	r18, r24
    2566:	2f 70       	andi	r18, 0x0F	; 15
    2568:	30 70       	andi	r19, 0x00	; 0
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	82 17       	cp	r24, r18
    2570:	93 07       	cpc	r25, r19
    2572:	34 f3       	brlt	.-52     	; 0x2540 <HMCP2515_VidSendCAN_Msg+0x74>
	{
		MSPI_U8MasterTransmit(Copy_u8data[i]);
	}

	/* good bye for bus */
	MSPI_VidChipSelect(0);
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>

	/* Request to send data */
	MSPI_VidChipSelect(1);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_MREG2SENDTXB0_INST);
    2580:	81 e8       	ldi	r24, 0x81	; 129
    2582:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>

	MSPI_VidChipSelect(0);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>


}
    258c:	28 96       	adiw	r28, 0x08	; 8
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <HMCP2515_voidRollOver>:
*/

/**** Declaration End  *****/

void HMCP2515_voidRollOver(u8 Copy_u8BUKT)
	{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	89 83       	std	Y+1, r24	; 0x01
		HMCP2515_voidBitModify(RXB0CTRL , 1<<Copy_u8BUKT, 1<<Copy_u8BUKT );
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <HMCP2515_voidRollOver+0x1c>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	2a 95       	dec	r18
    25bc:	e2 f7       	brpl	.-8      	; 0x25b6 <HMCP2515_voidRollOver+0x18>
    25be:	48 2f       	mov	r20, r24
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <HMCP2515_voidRollOver+0x32>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	2a 95       	dec	r18
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <HMCP2515_voidRollOver+0x2e>
    25d4:	98 2f       	mov	r25, r24
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	64 2f       	mov	r22, r20
    25da:	49 2f       	mov	r20, r25
    25dc:	0e 94 ed 11 	call	0x23da	; 0x23da <HMCP2515_voidBitModify>
	}
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <HMCP2515_voidSetMask>:

void HMCP2515_voidSetMask(u8 Copy_u8address_mask_Reg ,u32 Copy_u32Mask_Value ,u8 Copy_u8Extended)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <HMCP2515_voidSetMask+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <HMCP2515_voidSetMask+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	7b 83       	std	Y+3, r23	; 0x03
    25f8:	6a 83       	std	Y+2, r22	; 0x02
    25fa:	4c 83       	std	Y+4, r20	; 0x04
		  MSPI_VidChipSelect(1);
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
		  MSPI_U8MasterTransmit(MCP2515_WRITE_INST);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit(Copy_u8address_mask_Reg);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	  if(Copy_u8Extended)
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	88 23       	and	r24, r24
    2612:	59 f1       	breq	.+86     	; 0x266a <HMCP2515_voidSetMask+0x82>
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	96 95       	lsr	r25
    261a:	87 95       	ror	r24
    261c:	96 95       	lsr	r25
    261e:	87 95       	ror	r24
    2620:	96 95       	lsr	r25
    2622:	87 95       	ror	r24
    2624:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5) | (0b00000001 << 3));
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	82 95       	swap	r24
    262c:	88 0f       	add	r24, r24
    262e:	80 7e       	andi	r24, 0xE0	; 224
    2630:	88 60       	ori	r24, 0x08	; 8
    2632:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3)|(u8)(Copy_u32Mask_Value>>27));
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	96 95       	lsr	r25
    263c:	87 95       	ror	r24
    263e:	96 95       	lsr	r25
    2640:	87 95       	ror	r24
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	28 2f       	mov	r18, r24
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	99 27       	eor	r25, r25
    264e:	88 27       	eor	r24, r24
    2650:	82 2b       	or	r24, r18
    2652:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>11));
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	89 2f       	mov	r24, r25
    265c:	99 27       	eor	r25, r25
    265e:	86 95       	lsr	r24
    2660:	86 95       	lsr	r24
    2662:	86 95       	lsr	r24
    2664:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
    2668:	10 c0       	rjmp	.+32     	; 0x268a <HMCP2515_voidSetMask+0xa2>
	  }
	  else
	  {
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value>>3));
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	96 95       	lsr	r25
    2670:	87 95       	ror	r24
    2672:	96 95       	lsr	r25
    2674:	87 95       	ror	r24
    2676:	96 95       	lsr	r25
    2678:	87 95       	ror	r24
    267a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
		  MSPI_U8MasterTransmit((u8)(Copy_u32Mask_Value<<5));
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	82 95       	swap	r24
    2682:	88 0f       	add	r24, r24
    2684:	80 7e       	andi	r24, 0xE0	; 224
    2686:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	  }
	    MSPI_VidChipSelect(0);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <HMCP2515_voidRecievInit>:

void HMCP2515_voidRecievInit(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	MSPI_voidSpiMasterInit();
    26a6:	0e 94 00 0a 	call	0x1400	; 0x1400 <MSPI_voidSpiMasterInit>
	HMCP2515_voidResetInst();
    26aa:	0e 94 dd 11 	call	0x23ba	; 0x23ba <HMCP2515_voidResetInst>
	/* CONFIG mode and Enable clock */
	HMCP2515_voidWriteReg(CANCTRL,0x87);
    26ae:	8f e0       	ldi	r24, 0x0F	; 15
    26b0:	67 e8       	ldi	r22, 0x87	; 135
    26b2:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
	/*
	 */
	while((HMCP2515_U8ReadReg(CANSTAT)>>5) != CONFIG_MODE){}
    26b6:	8e e0       	ldi	r24, 0x0E	; 14
    26b8:	0e 94 c1 11 	call	0x2382	; 0x2382 <HMCP2515_U8ReadReg>
    26bc:	82 95       	swap	r24
    26be:	86 95       	lsr	r24
    26c0:	87 70       	andi	r24, 0x07	; 7
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	c1 f7       	brne	.-16     	; 0x26b6 <HMCP2515_voidRecievInit+0x18>
     //8MHZ
	 HMCP2515_voidSetBitTiming(2<<6, (1<<7)|(6<<3)|(1), (0x15));
    26c6:	80 e8       	ldi	r24, 0x80	; 128
    26c8:	61 eb       	ldi	r22, 0xB1	; 177
    26ca:	45 e1       	ldi	r20, 0x15	; 21
    26cc:	0e 94 0e 12 	call	0x241c	; 0x241c <HMCP2515_voidSetBitTiming>

	HMCP2515_voidSetMask(RXF0SIDH , 0x00000005 ,1);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	65 e0       	ldi	r22, 0x05	; 5
    26d4:	70 e0       	ldi	r23, 0x00	; 0
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <HMCP2515_voidSetMask>
    HMCP2515_voidSetMask(RXF1SIDH , 0x00000001 ,1);
    26dc:	84 e0       	ldi	r24, 0x04	; 4
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <HMCP2515_voidSetMask>
   // HMCP2515_voidSetMask(RXF1SIDH , 0x00000008 ,1);
	HMCP2515_voidSetMask(RXM0SIDH , 0x0000000f, 1);
    26e8:	80 e2       	ldi	r24, 0x20	; 32
    26ea:	6f e0       	ldi	r22, 0x0F	; 15
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <HMCP2515_voidSetMask>
	HMCP2515_voidSetMask(RXM1SIDH , 0x0000000f, 1);
    26f4:	84 e2       	ldi	r24, 0x24	; 36
    26f6:	6f e0       	ldi	r22, 0x0F	; 15
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <HMCP2515_voidSetMask>

	HMCP2515_voidRollOver(1);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	0e 94 cf 12 	call	0x259e	; 0x259e <HMCP2515_voidRollOver>

	HMCP2515_voidBitModify(CANINTE, 1<<0, 1<<RX0IE);
    2706:	8b e2       	ldi	r24, 0x2B	; 43
    2708:	61 e0       	ldi	r22, 0x01	; 1
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 ed 11 	call	0x23da	; 0x23da <HMCP2515_voidBitModify>

	HMCP2515_voidSetMode(NORMAL_MODE);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 29 12 	call	0x2452	; 0x2452 <HMCP2515_voidSetMode>
}
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <HMCP2515_voidRecieveMess>:

void HMCP2515_voidRecieveMess(u8 Copy_u8REC_Buff_addres)
{
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <HMCP2515_voidRecieveMess+0xa>
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	8a 83       	std	Y+2, r24	; 0x02

	MSPI_VidChipSelect(1);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>

     for (u8 buff_index = 0 ; buff_index < 16 ; buff_index++)
    273e:	19 82       	std	Y+1, r1	; 0x01
    2740:	0d c0       	rjmp	.+26     	; 0x275c <HMCP2515_voidRecieveMess+0x40>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	08 2f       	mov	r16, r24
    2746:	10 e0       	ldi	r17, 0x00	; 0
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <MSPI_U8MasterTransmit>
    274e:	f8 01       	movw	r30, r16
    2750:	e9 5f       	subi	r30, 0xF9	; 249
    2752:	fd 4f       	sbci	r31, 0xFD	; 253
    2754:	80 83       	st	Z, r24
	MSPI_VidChipSelect(1);

	MSPI_U8MasterTransmit(MCP2515_READ_INST);
	MSPI_U8MasterTransmit(Copy_u8REC_Buff_addres);

     for (u8 buff_index = 0 ; buff_index < 16 ; buff_index++)
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	80 31       	cpi	r24, 0x10	; 16
    2760:	80 f3       	brcs	.-32     	; 0x2742 <HMCP2515_voidRecieveMess+0x26>
     {
    	 REC_Message[buff_index]=MSPI_U8MasterTransmit(0);
     }

	MSPI_VidChipSelect(0);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	0e 94 32 0b 	call	0x1664	; 0x1664 <MSPI_VidChipSelect>
	/*Clear Flag  */
	HMCP2515_voidWriteReg(CANINTF,0);
    2768:	8c e2       	ldi	r24, 0x2C	; 44
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	0e 94 a6 11 	call	0x234c	; 0x234c <HMCP2515_voidWriteReg>
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	08 95       	ret

0000277e <LED_u8Mapping>:

/*
 *This function takes the led number, and returns the port and pin of that specific led;
 * it also return 1 if the led exist(between 1 and 8), 0 Otherwise;
 */
static u8 LED_u8Mapping(u8 Copy_u8LedNumber, u8 *Copy_u8PortPtr, u8 *Copy_u8PinPtr){
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	28 97       	sbiw	r28, 0x08	; 8
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	8a 83       	std	Y+2, r24	; 0x02
    2794:	7c 83       	std	Y+4, r23	; 0x04
    2796:	6b 83       	std	Y+3, r22	; 0x03
    2798:	5e 83       	std	Y+6, r21	; 0x06
    279a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8LedNumberStatus = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LedNumber){
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	38 87       	std	Y+8, r19	; 0x08
    27a8:	2f 83       	std	Y+7, r18	; 0x07
    27aa:	8f 81       	ldd	r24, Y+7	; 0x07
    27ac:	98 85       	ldd	r25, Y+8	; 0x08
    27ae:	84 30       	cpi	r24, 0x04	; 4
    27b0:	91 05       	cpc	r25, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <LED_u8Mapping+0x38>
    27b4:	41 c0       	rjmp	.+130    	; 0x2838 <LED_u8Mapping+0xba>
    27b6:	2f 81       	ldd	r18, Y+7	; 0x07
    27b8:	38 85       	ldd	r19, Y+8	; 0x08
    27ba:	25 30       	cpi	r18, 0x05	; 5
    27bc:	31 05       	cpc	r19, r1
    27be:	84 f4       	brge	.+32     	; 0x27e0 <LED_u8Mapping+0x62>
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	91 05       	cpc	r25, r1
    27c8:	39 f1       	breq	.+78     	; 0x2818 <LED_u8Mapping+0x9a>
    27ca:	2f 81       	ldd	r18, Y+7	; 0x07
    27cc:	38 85       	ldd	r19, Y+8	; 0x08
    27ce:	23 30       	cpi	r18, 0x03	; 3
    27d0:	31 05       	cpc	r19, r1
    27d2:	54 f5       	brge	.+84     	; 0x2828 <LED_u8Mapping+0xaa>
    27d4:	8f 81       	ldd	r24, Y+7	; 0x07
    27d6:	98 85       	ldd	r25, Y+8	; 0x08
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	91 05       	cpc	r25, r1
    27dc:	b1 f0       	breq	.+44     	; 0x280a <LED_u8Mapping+0x8c>
    27de:	54 c0       	rjmp	.+168    	; 0x2888 <LED_u8Mapping+0x10a>
    27e0:	2f 81       	ldd	r18, Y+7	; 0x07
    27e2:	38 85       	ldd	r19, Y+8	; 0x08
    27e4:	26 30       	cpi	r18, 0x06	; 6
    27e6:	31 05       	cpc	r19, r1
    27e8:	b9 f1       	breq	.+110    	; 0x2858 <LED_u8Mapping+0xda>
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	98 85       	ldd	r25, Y+8	; 0x08
    27ee:	86 30       	cpi	r24, 0x06	; 6
    27f0:	91 05       	cpc	r25, r1
    27f2:	54 f1       	brlt	.+84     	; 0x2848 <LED_u8Mapping+0xca>
    27f4:	2f 81       	ldd	r18, Y+7	; 0x07
    27f6:	38 85       	ldd	r19, Y+8	; 0x08
    27f8:	27 30       	cpi	r18, 0x07	; 7
    27fa:	31 05       	cpc	r19, r1
    27fc:	a9 f1       	breq	.+106    	; 0x2868 <LED_u8Mapping+0xea>
    27fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2800:	98 85       	ldd	r25, Y+8	; 0x08
    2802:	88 30       	cpi	r24, 0x08	; 8
    2804:	91 05       	cpc	r25, r1
    2806:	c1 f1       	breq	.+112    	; 0x2878 <LED_u8Mapping+0xfa>
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <LED_u8Mapping+0x10a>
			case LED_e_1:
				*Copy_u8PortPtr = LED_1_PORT;
    280a:	eb 81       	ldd	r30, Y+3	; 0x03
    280c:	fc 81       	ldd	r31, Y+4	; 0x04
    280e:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_1_PIN;
    2810:	ed 81       	ldd	r30, Y+5	; 0x05
    2812:	fe 81       	ldd	r31, Y+6	; 0x06
    2814:	10 82       	st	Z, r1
    2816:	39 c0       	rjmp	.+114    	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_2:
				*Copy_u8PortPtr = LED_2_PORT;
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_2_PIN;
    281e:	ed 81       	ldd	r30, Y+5	; 0x05
    2820:	fe 81       	ldd	r31, Y+6	; 0x06
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 83       	st	Z, r24
    2826:	31 c0       	rjmp	.+98     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_3:
				*Copy_u8PortPtr = LED_3_PORT;
    2828:	eb 81       	ldd	r30, Y+3	; 0x03
    282a:	fc 81       	ldd	r31, Y+4	; 0x04
    282c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_3_PIN;
    282e:	ed 81       	ldd	r30, Y+5	; 0x05
    2830:	fe 81       	ldd	r31, Y+6	; 0x06
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	80 83       	st	Z, r24
    2836:	29 c0       	rjmp	.+82     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_4:
				*Copy_u8PortPtr = LED_4_PORT;
    2838:	eb 81       	ldd	r30, Y+3	; 0x03
    283a:	fc 81       	ldd	r31, Y+4	; 0x04
    283c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_4_PIN;
    283e:	ed 81       	ldd	r30, Y+5	; 0x05
    2840:	fe 81       	ldd	r31, Y+6	; 0x06
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	80 83       	st	Z, r24
    2846:	21 c0       	rjmp	.+66     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_5:
				*Copy_u8PortPtr = LED_5_PORT;
    2848:	eb 81       	ldd	r30, Y+3	; 0x03
    284a:	fc 81       	ldd	r31, Y+4	; 0x04
    284c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_5_PIN;
    284e:	ed 81       	ldd	r30, Y+5	; 0x05
    2850:	fe 81       	ldd	r31, Y+6	; 0x06
    2852:	84 e0       	ldi	r24, 0x04	; 4
    2854:	80 83       	st	Z, r24
    2856:	19 c0       	rjmp	.+50     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_6:
				*Copy_u8PortPtr = LED_6_PORT;
    2858:	eb 81       	ldd	r30, Y+3	; 0x03
    285a:	fc 81       	ldd	r31, Y+4	; 0x04
    285c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_6_PIN;
    285e:	ed 81       	ldd	r30, Y+5	; 0x05
    2860:	fe 81       	ldd	r31, Y+6	; 0x06
    2862:	85 e0       	ldi	r24, 0x05	; 5
    2864:	80 83       	st	Z, r24
    2866:	11 c0       	rjmp	.+34     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_7:
				*Copy_u8PortPtr = LED_7_PORT;
    2868:	eb 81       	ldd	r30, Y+3	; 0x03
    286a:	fc 81       	ldd	r31, Y+4	; 0x04
    286c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_7_PIN;
    286e:	ed 81       	ldd	r30, Y+5	; 0x05
    2870:	fe 81       	ldd	r31, Y+6	; 0x06
    2872:	86 e0       	ldi	r24, 0x06	; 6
    2874:	80 83       	st	Z, r24
    2876:	09 c0       	rjmp	.+18     	; 0x288a <LED_u8Mapping+0x10c>
				break;
			case LED_e_8:
				*Copy_u8PortPtr = LED_8_PORT;
    2878:	eb 81       	ldd	r30, Y+3	; 0x03
    287a:	fc 81       	ldd	r31, Y+4	; 0x04
    287c:	10 82       	st	Z, r1
				*Copy_u8PinPtr = LED_8_PIN;
    287e:	ed 81       	ldd	r30, Y+5	; 0x05
    2880:	fe 81       	ldd	r31, Y+6	; 0x06
    2882:	87 e0       	ldi	r24, 0x07	; 7
    2884:	80 83       	st	Z, r24
    2886:	01 c0       	rjmp	.+2      	; 0x288a <LED_u8Mapping+0x10c>
				break;
			default:
				Local_u8LedNumberStatus = 0;
    2888:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8LedNumberStatus;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	28 96       	adiw	r28, 0x08	; 8
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <LED_vidInit>:
/*This function used to initialize the LEDs,
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <LED_vidInit+0x6>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <LED_vidInit+0x8>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9b 83       	std	Y+3, r25	; 0x03
    28ac:	8a 83       	std	Y+2, r24	; 0x02
    28ae:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    28b0:	19 82       	std	Y+1, r1	; 0x01
    28b2:	21 c0       	rjmp	.+66     	; 0x28f6 <LED_vidInit+0x58>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	29 ec       	ldi	r18, 0xC9	; 201
    28c8:	31 e0       	ldi	r19, 0x01	; 1
    28ca:	4a ec       	ldi	r20, 0xCA	; 202
    28cc:	51 e0       	ldi	r21, 0x01	; 1
    28ce:	b9 01       	movw	r22, r18
    28d0:	0e 94 bf 13 	call	0x277e	; 0x277e <LED_u8Mapping>
    28d4:	80 93 c8 01 	sts	0x01C8, r24
		if(LED_NUMBER_STATUS){
    28d8:	80 91 c8 01 	lds	r24, 0x01C8
    28dc:	88 23       	and	r24, r24
    28de:	41 f0       	breq	.+16     	; 0x28f0 <LED_vidInit+0x52>
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
    28e0:	80 91 c9 01 	lds	r24, 0x01C9
    28e4:	90 91 ca 01 	lds	r25, 0x01CA
    28e8:	69 2f       	mov	r22, r25
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
 * it takes:
 * 			1-the array address of type LED_e (this array contains the LEDs you want to initialize).
 * 			2-and the array size.
*/
void LED_vidInit(LED_e *arr_ptr, u8 Copy_u8LedsNumber){
	for(u8 i=0; i < Copy_u8LedsNumber; i++){
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	99 81       	ldd	r25, Y+1	; 0x01
    28f8:	8c 81       	ldd	r24, Y+4	; 0x04
    28fa:	98 17       	cp	r25, r24
    28fc:	d8 f2       	brcs	.-74     	; 0x28b4 <LED_vidInit+0x16>
		LED_NUMBER_STATUS = LED_u8Mapping(arr_ptr[i], &LED_PORT, &LED_PIN);
		if(LED_NUMBER_STATUS){
			DIO_u8setPinDir(LED_PORT, LED_PIN, DIO_OUTPUT);
		}
	}
}
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <LED_vidToggleLed>:

//This function used to toggle the led, it takes the led number;
void LED_vidToggleLed(u8 Copy_u8LedNumber){
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <LED_vidToggleLed+0x6>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LedStatus;

	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2918:	29 ec       	ldi	r18, 0xC9	; 201
    291a:	31 e0       	ldi	r19, 0x01	; 1
    291c:	4a ec       	ldi	r20, 0xCA	; 202
    291e:	51 e0       	ldi	r21, 0x01	; 1
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	b9 01       	movw	r22, r18
    2924:	0e 94 bf 13 	call	0x277e	; 0x277e <LED_u8Mapping>
    2928:	80 93 c8 01 	sts	0x01C8, r24
	if(LED_NUMBER_STATUS){
    292c:	80 91 c8 01 	lds	r24, 0x01C8
    2930:	88 23       	and	r24, r24
    2932:	f9 f0       	breq	.+62     	; 0x2972 <LED_vidToggleLed+0x66>
		DIO_u8getPinVal(LED_PORT, LED_PIN, &Local_u8LedStatus);
    2934:	80 91 c9 01 	lds	r24, 0x01C9
    2938:	90 91 ca 01 	lds	r25, 0x01CA
    293c:	69 2f       	mov	r22, r25
    293e:	9e 01       	movw	r18, r28
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	a9 01       	movw	r20, r18
    2946:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_u8getPinVal>
		if(Local_u8LedStatus){
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	88 23       	and	r24, r24
    294e:	49 f0       	breq	.+18     	; 0x2962 <LED_vidToggleLed+0x56>
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    2950:	80 91 c9 01 	lds	r24, 0x01C9
    2954:	90 91 ca 01 	lds	r25, 0x01CA
    2958:	69 2f       	mov	r22, r25
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
    2960:	08 c0       	rjmp	.+16     	; 0x2972 <LED_vidToggleLed+0x66>
		}else{
			DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    2962:	80 91 c9 01 	lds	r24, 0x01C9
    2966:	90 91 ca 01 	lds	r25, 0x01CA
    296a:	69 2f       	mov	r22, r25
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
		}
	}

}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <LED_vidTurnOnLed>:

//This function used to turn on the led, it takes the led number;
void LED_vidTurnOnLed(u8 Copy_u8LedNumber){
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    2988:	29 ec       	ldi	r18, 0xC9	; 201
    298a:	31 e0       	ldi	r19, 0x01	; 1
    298c:	4a ec       	ldi	r20, 0xCA	; 202
    298e:	51 e0       	ldi	r21, 0x01	; 1
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 bf 13 	call	0x277e	; 0x277e <LED_u8Mapping>
    2998:	80 93 c8 01 	sts	0x01C8, r24
	if(LED_NUMBER_STATUS){
    299c:	80 91 c8 01 	lds	r24, 0x01C8
    29a0:	88 23       	and	r24, r24
    29a2:	41 f0       	breq	.+16     	; 0x29b4 <LED_vidTurnOnLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
    29a4:	80 91 c9 01 	lds	r24, 0x01C9
    29a8:	90 91 ca 01 	lds	r25, 0x01CA
    29ac:	69 2f       	mov	r22, r25
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
	}
#endif
}
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <LED_vidTurnOffLed>:


//This function used to turn off the led, it takes the led number;
void LED_vidTurnOffLed(u8 Copy_u8LedNumber){
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	0f 92       	push	r0
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	89 83       	std	Y+1, r24	; 0x01
#if LEDS_Configuration == COMMON_CATHODE
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
    29c8:	29 ec       	ldi	r18, 0xC9	; 201
    29ca:	31 e0       	ldi	r19, 0x01	; 1
    29cc:	4a ec       	ldi	r20, 0xCA	; 202
    29ce:	51 e0       	ldi	r21, 0x01	; 1
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	b9 01       	movw	r22, r18
    29d4:	0e 94 bf 13 	call	0x277e	; 0x277e <LED_u8Mapping>
    29d8:	80 93 c8 01 	sts	0x01C8, r24
	if(LED_NUMBER_STATUS){
    29dc:	80 91 c8 01 	lds	r24, 0x01C8
    29e0:	88 23       	and	r24, r24
    29e2:	41 f0       	breq	.+16     	; 0x29f4 <LED_vidTurnOffLed+0x38>
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_LOW);
    29e4:	80 91 c9 01 	lds	r24, 0x01C9
    29e8:	90 91 ca 01 	lds	r25, 0x01CA
    29ec:	69 2f       	mov	r22, r25
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	LED_NUMBER_STATUS = LED_u8Mapping(Copy_u8LedNumber, &LED_PORT, &LED_PIN);
	if(LED_NUMBER_STATUS){
		DIO_u8setPinVal(LED_PORT, LED_PIN, DIO_HIGH);
	}
#endif
}
    29f4:	0f 90       	pop	r0
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <LCD_vidInit>:
#include "../LCD_Handler_V2/LCD_cmds.h"
#include "../LCD_Handler_V2/LCD_err.h"
#include "../LCD_Handler_V2/LCD_int.h"

//function to initialize the LCD
void LCD_vidInit(void){
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	cf 54       	subi	r28, 0x4F	; 79
    2a0a:	d0 40       	sbci	r29, 0x00	; 0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8SetFunction = SET_FUNCTION_CMD;
    2a16:	fe 01       	movw	r30, r28
    2a18:	e1 5b       	subi	r30, 0xB1	; 177
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 e2       	ldi	r24, 0x20	; 32
    2a1e:	80 83       	st	Z, r24
	u8 local_u8DisplayControl = DISPLAY_CONTROL;
    2a20:	fe 01       	movw	r30, r28
    2a22:	e2 5b       	subi	r30, 0xB2	; 178
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	88 e0       	ldi	r24, 0x08	; 8
    2a28:	80 83       	st	Z, r24
	u8 local_u8EntryModeSet = ENTRY_MODE_SET;
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e3 5b       	subi	r30, 0xB3	; 179
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	84 e0       	ldi	r24, 0x04	; 4
    2a32:	80 83       	st	Z, r24

	local_u8SetFunction 	|= ((LCD_MODE<<4) | (NO_OF_LINES<<3));
    2a34:	de 01       	movw	r26, r28
    2a36:	a1 5b       	subi	r26, 0xB1	; 177
    2a38:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e1 5b       	subi	r30, 0xB1	; 177
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	88 61       	ori	r24, 0x18	; 24
    2a44:	8c 93       	st	X, r24
	local_u8DisplayControl 	|= ((DISPLAY_STATE <<2) | (CURSOR_STATE <<1) | CURSOR_BLINKING);
    2a46:	de 01       	movw	r26, r28
    2a48:	a2 5b       	subi	r26, 0xB2	; 178
    2a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e2 5b       	subi	r30, 0xB2	; 178
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	86 60       	ori	r24, 0x06	; 6
    2a56:	8c 93       	st	X, r24
	local_u8EntryModeSet   	|= ((CURSOR_MOVE_DIRECTION<<1) | (DISPLAY_SHIFT_OPERATION));
    2a58:	de 01       	movw	r26, r28
    2a5a:	a3 5b       	subi	r26, 0xB3	; 179
    2a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e3 5b       	subi	r30, 0xB3	; 179
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	82 60       	ori	r24, 0x02	; 2
    2a68:	8c 93       	st	X, r24

	DIO_u8setPortDir(LCD_DATA_PORT, DIO_FULL_OUTPUT);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	6f ef       	ldi	r22, 0xFF	; 255
    2a6e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_u8setPortDir>
	DIO_u8setPinDir(RS_PORT, RS_PIN, DIO_OUTPUT);
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	66 e0       	ldi	r22, 0x06	; 6
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
	DIO_u8setPinDir(RW_PORT, RW_PIN, DIO_OUTPUT);
    2a7c:	83 e0       	ldi	r24, 0x03	; 3
    2a7e:	65 e0       	ldi	r22, 0x05	; 5
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
	DIO_u8setPinDir(E_PORT, E_PIN, DIO_OUTPUT);
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	64 e0       	ldi	r22, 0x04	; 4
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_u8setPinDir>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e7 5b       	subi	r30, 0xB7	; 183
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e2       	ldi	r26, 0x20	; 32
    2a9c:	b2 e4       	ldi	r27, 0x42	; 66
    2a9e:	80 83       	st	Z, r24
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	a2 83       	std	Z+2, r26	; 0x02
    2aa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	0b 5b       	subi	r16, 0xBB	; 187
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 5b       	subi	r30, 0xB7	; 183
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	f8 01       	movw	r30, r16
    2acc:	80 83       	st	Z, r24
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	a2 83       	std	Z+2, r26	; 0x02
    2ad2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	eb 5b       	subi	r30, 0xBB	; 187
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	44 f4       	brge	.+16     	; 0x2b02 <LCD_vidInit+0x106>
		__ticks = 1;
    2af2:	fe 01       	movw	r30, r28
    2af4:	ed 5b       	subi	r30, 0xBD	; 189
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
    2b00:	64 c0       	rjmp	.+200    	; 0x2bca <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 5b       	subi	r30, 0xBB	; 187
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	3f ef       	ldi	r19, 0xFF	; 255
    2b14:	4f e7       	ldi	r20, 0x7F	; 127
    2b16:	57 e4       	ldi	r21, 0x47	; 71
    2b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b1c:	18 16       	cp	r1, r24
    2b1e:	0c f0       	brlt	.+2      	; 0x2b22 <LCD_vidInit+0x126>
    2b20:	43 c0       	rjmp	.+134    	; 0x2ba8 <LCD_vidInit+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b22:	fe 01       	movw	r30, r28
    2b24:	e7 5b       	subi	r30, 0xB7	; 183
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8e 01       	movw	r16, r28
    2b42:	0d 5b       	subi	r16, 0xBD	; 189
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	f8 01       	movw	r30, r16
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	1f c0       	rjmp	.+62     	; 0x2b98 <LCD_vidInit+0x19c>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ef 5b       	subi	r30, 0xBF	; 191
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	88 ec       	ldi	r24, 0xC8	; 200
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ef 5b       	subi	r30, 0xBF	; 191
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_vidInit+0x176>
    2b76:	fe 01       	movw	r30, r28
    2b78:	ef 5b       	subi	r30, 0xBF	; 191
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	de 01       	movw	r26, r28
    2b82:	ad 5b       	subi	r26, 0xBD	; 189
    2b84:	bf 4f       	sbci	r27, 0xFF	; 255
    2b86:	fe 01       	movw	r30, r28
    2b88:	ed 5b       	subi	r30, 0xBD	; 189
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	11 96       	adiw	r26, 0x01	; 1
    2b94:	9c 93       	st	X, r25
    2b96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 5b       	subi	r30, 0xBD	; 189
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	d1 f6       	brne	.-76     	; 0x2b5a <LCD_vidInit+0x15e>
    2ba6:	24 c0       	rjmp	.+72     	; 0x2bf0 <LCD_vidInit+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	8e 01       	movw	r16, r28
    2baa:	0d 5b       	subi	r16, 0xBD	; 189
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	fe 01       	movw	r30, r28
    2bb0:	eb 5b       	subi	r30, 0xBB	; 187
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	60 81       	ld	r22, Z
    2bb6:	71 81       	ldd	r23, Z+1	; 0x01
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ed 5b       	subi	r30, 0xBD	; 189
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ff 96       	adiw	r30, 0x3f	; 63
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ff 96       	adiw	r30, 0x3f	; 63
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_vidInit+0x1e8>
    2be8:	fe 01       	movw	r30, r28
    2bea:	ff 96       	adiw	r30, 0x3f	; 63
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24


#if  LCD_MODE == EIGHT_BITS
	_delay_ms(40);
	LCD_vidSendCmd(local_u8SetFunction);
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e1 5b       	subi	r30, 0xB1	; 177
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 81       	ld	r24, Z
    2bf8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a8 e4       	ldi	r26, 0x48	; 72
    2c02:	b2 e4       	ldi	r27, 0x42	; 66
    2c04:	8b af       	std	Y+59, r24	; 0x3b
    2c06:	9c af       	std	Y+60, r25	; 0x3c
    2c08:	ad af       	std	Y+61, r26	; 0x3d
    2c0a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c0c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c0e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c14:	2b ea       	ldi	r18, 0xAB	; 171
    2c16:	3a ea       	ldi	r19, 0xAA	; 170
    2c18:	4a e2       	ldi	r20, 0x2A	; 42
    2c1a:	50 e4       	ldi	r21, 0x40	; 64
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8f ab       	std	Y+55, r24	; 0x37
    2c26:	98 af       	std	Y+56, r25	; 0x38
    2c28:	a9 af       	std	Y+57, r26	; 0x39
    2c2a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c2c:	6f a9       	ldd	r22, Y+55	; 0x37
    2c2e:	78 ad       	ldd	r23, Y+56	; 0x38
    2c30:	89 ad       	ldd	r24, Y+57	; 0x39
    2c32:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c40:	88 23       	and	r24, r24
    2c42:	1c f4       	brge	.+6      	; 0x2c4a <LCD_vidInit+0x24e>
		__ticks = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	8e ab       	std	Y+54, r24	; 0x36
    2c48:	91 c0       	rjmp	.+290    	; 0x2d6c <LCD_vidInit+0x370>
	else if (__tmp > 255)
    2c4a:	6f a9       	ldd	r22, Y+55	; 0x37
    2c4c:	78 ad       	ldd	r23, Y+56	; 0x38
    2c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	53 e4       	ldi	r21, 0x43	; 67
    2c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	0c f0       	brlt	.+2      	; 0x2c64 <LCD_vidInit+0x268>
    2c62:	7b c0       	rjmp	.+246    	; 0x2d5a <LCD_vidInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
    2c64:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c66:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a e7       	ldi	r20, 0x7A	; 122
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8a ab       	std	Y+50, r24	; 0x32
    2c7e:	9b ab       	std	Y+51, r25	; 0x33
    2c80:	ac ab       	std	Y+52, r26	; 0x34
    2c82:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	6a a9       	ldd	r22, Y+50	; 0x32
    2c86:	7b a9       	ldd	r23, Y+51	; 0x33
    2c88:	8c a9       	ldd	r24, Y+52	; 0x34
    2c8a:	9d a9       	ldd	r25, Y+53	; 0x35
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a ef       	ldi	r20, 0xFA	; 250
    2c92:	54 e4       	ldi	r21, 0x44	; 68
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8e a7       	std	Y+46, r24	; 0x2e
    2c9e:	9f a7       	std	Y+47, r25	; 0x2f
    2ca0:	a8 ab       	std	Y+48, r26	; 0x30
    2ca2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2ca4:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ca6:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ca8:	88 a9       	ldd	r24, Y+48	; 0x30
    2caa:	99 a9       	ldd	r25, Y+49	; 0x31
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	2c f4       	brge	.+10     	; 0x2cc6 <LCD_vidInit+0x2ca>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9d a7       	std	Y+45, r25	; 0x2d
    2cc2:	8c a7       	std	Y+44, r24	; 0x2c
    2cc4:	3f c0       	rjmp	.+126    	; 0x2d44 <LCD_vidInit+0x348>
	else if (__tmp > 65535)
    2cc6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cc8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cca:	88 a9       	ldd	r24, Y+48	; 0x30
    2ccc:	99 a9       	ldd	r25, Y+49	; 0x31
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	4c f5       	brge	.+82     	; 0x2d30 <LCD_vidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	6a a9       	ldd	r22, Y+50	; 0x32
    2ce0:	7b a9       	ldd	r23, Y+51	; 0x33
    2ce2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ce4:	9d a9       	ldd	r25, Y+53	; 0x35
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e2       	ldi	r20, 0x20	; 32
    2cec:	51 e4       	ldi	r21, 0x41	; 65
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9d a7       	std	Y+45, r25	; 0x2d
    2d04:	8c a7       	std	Y+44, r24	; 0x2c
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <LCD_vidInit+0x32a>
    2d08:	88 ec       	ldi	r24, 0xC8	; 200
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9b a7       	std	Y+43, r25	; 0x2b
    2d0e:	8a a7       	std	Y+42, r24	; 0x2a
    2d10:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d12:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_vidInit+0x318>
    2d18:	9b a7       	std	Y+43, r25	; 0x2b
    2d1a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d1e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	9d a7       	std	Y+45, r25	; 0x2d
    2d24:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d28:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	69 f7       	brne	.-38     	; 0x2d08 <LCD_vidInit+0x30c>
    2d2e:	24 c0       	rjmp	.+72     	; 0x2d78 <LCD_vidInit+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d32:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d34:	88 a9       	ldd	r24, Y+48	; 0x30
    2d36:	99 a9       	ldd	r25, Y+49	; 0x31
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9d a7       	std	Y+45, r25	; 0x2d
    2d42:	8c a7       	std	Y+44, r24	; 0x2c
    2d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d46:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d48:	99 a7       	std	Y+41, r25	; 0x29
    2d4a:	88 a7       	std	Y+40, r24	; 0x28
    2d4c:	88 a5       	ldd	r24, Y+40	; 0x28
    2d4e:	99 a5       	ldd	r25, Y+41	; 0x29
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_vidInit+0x354>
    2d54:	99 a7       	std	Y+41, r25	; 0x29
    2d56:	88 a7       	std	Y+40, r24	; 0x28
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <LCD_vidInit+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d5a:	6f a9       	ldd	r22, Y+55	; 0x37
    2d5c:	78 ad       	ldd	r23, Y+56	; 0x38
    2d5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d60:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	8e ab       	std	Y+54, r24	; 0x36
    2d6c:	8e a9       	ldd	r24, Y+54	; 0x36
    2d6e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d70:	8f a1       	ldd	r24, Y+39	; 0x27
    2d72:	8a 95       	dec	r24
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_vidInit+0x376>
    2d76:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_vidSendCmd(local_u8DisplayControl);
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e2 5b       	subi	r30, 0xB2	; 178
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a8 e4       	ldi	r26, 0x48	; 72
    2d8a:	b2 e4       	ldi	r27, 0x42	; 66
    2d8c:	8b a3       	std	Y+35, r24	; 0x23
    2d8e:	9c a3       	std	Y+36, r25	; 0x24
    2d90:	ad a3       	std	Y+37, r26	; 0x25
    2d92:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d94:	6b a1       	ldd	r22, Y+35	; 0x23
    2d96:	7c a1       	ldd	r23, Y+36	; 0x24
    2d98:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d9c:	2b ea       	ldi	r18, 0xAB	; 171
    2d9e:	3a ea       	ldi	r19, 0xAA	; 170
    2da0:	4a e2       	ldi	r20, 0x2A	; 42
    2da2:	50 e4       	ldi	r21, 0x40	; 64
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8f 8f       	std	Y+31, r24	; 0x1f
    2dae:	98 a3       	std	Y+32, r25	; 0x20
    2db0:	a9 a3       	std	Y+33, r26	; 0x21
    2db2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2db4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2db6:	78 a1       	ldd	r23, Y+32	; 0x20
    2db8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dba:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	1c f4       	brge	.+6      	; 0x2dd2 <LCD_vidInit+0x3d6>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	8e 8f       	std	Y+30, r24	; 0x1e
    2dd0:	91 c0       	rjmp	.+290    	; 0x2ef4 <LCD_vidInit+0x4f8>
	else if (__tmp > 255)
    2dd2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dd4:	78 a1       	ldd	r23, Y+32	; 0x20
    2dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	53 e4       	ldi	r21, 0x43	; 67
    2de2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	0c f0       	brlt	.+2      	; 0x2dec <LCD_vidInit+0x3f0>
    2dea:	7b c0       	rjmp	.+246    	; 0x2ee2 <LCD_vidInit+0x4e6>
	{
		_delay_ms(__us / 1000.0);
    2dec:	6b a1       	ldd	r22, Y+35	; 0x23
    2dee:	7c a1       	ldd	r23, Y+36	; 0x24
    2df0:	8d a1       	ldd	r24, Y+37	; 0x25
    2df2:	9e a1       	ldd	r25, Y+38	; 0x26
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a e7       	ldi	r20, 0x7A	; 122
    2dfa:	54 e4       	ldi	r21, 0x44	; 68
    2dfc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	8a 8f       	std	Y+26, r24	; 0x1a
    2e06:	9b 8f       	std	Y+27, r25	; 0x1b
    2e08:	ac 8f       	std	Y+28, r26	; 0x1c
    2e0a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e0e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	54 e4       	ldi	r21, 0x44	; 68
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8e 8b       	std	Y+22, r24	; 0x16
    2e26:	9f 8b       	std	Y+23, r25	; 0x17
    2e28:	a8 8f       	std	Y+24, r26	; 0x18
    2e2a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2e2c:	6e 89       	ldd	r22, Y+22	; 0x16
    2e2e:	7f 89       	ldd	r23, Y+23	; 0x17
    2e30:	88 8d       	ldd	r24, Y+24	; 0x18
    2e32:	99 8d       	ldd	r25, Y+25	; 0x19
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	2c f4       	brge	.+10     	; 0x2e4e <LCD_vidInit+0x452>
		__ticks = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9d 8b       	std	Y+21, r25	; 0x15
    2e4a:	8c 8b       	std	Y+20, r24	; 0x14
    2e4c:	3f c0       	rjmp	.+126    	; 0x2ecc <LCD_vidInit+0x4d0>
	else if (__tmp > 65535)
    2e4e:	6e 89       	ldd	r22, Y+22	; 0x16
    2e50:	7f 89       	ldd	r23, Y+23	; 0x17
    2e52:	88 8d       	ldd	r24, Y+24	; 0x18
    2e54:	99 8d       	ldd	r25, Y+25	; 0x19
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	57 e4       	ldi	r21, 0x47	; 71
    2e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	4c f5       	brge	.+82     	; 0x2eb8 <LCD_vidInit+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e66:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9d 8b       	std	Y+21, r25	; 0x15
    2e8c:	8c 8b       	std	Y+20, r24	; 0x14
    2e8e:	0f c0       	rjmp	.+30     	; 0x2eae <LCD_vidInit+0x4b2>
    2e90:	88 ec       	ldi	r24, 0xC8	; 200
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9b 8b       	std	Y+19, r25	; 0x13
    2e96:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e98:	8a 89       	ldd	r24, Y+18	; 0x12
    2e9a:	9b 89       	ldd	r25, Y+19	; 0x13
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <LCD_vidInit+0x4a0>
    2ea0:	9b 8b       	std	Y+19, r25	; 0x13
    2ea2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8c 89       	ldd	r24, Y+20	; 0x14
    2ea6:	9d 89       	ldd	r25, Y+21	; 0x15
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	9d 8b       	std	Y+21, r25	; 0x15
    2eac:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8c 89       	ldd	r24, Y+20	; 0x14
    2eb0:	9d 89       	ldd	r25, Y+21	; 0x15
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	69 f7       	brne	.-38     	; 0x2e90 <LCD_vidInit+0x494>
    2eb6:	24 c0       	rjmp	.+72     	; 0x2f00 <LCD_vidInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6e 89       	ldd	r22, Y+22	; 0x16
    2eba:	7f 89       	ldd	r23, Y+23	; 0x17
    2ebc:	88 8d       	ldd	r24, Y+24	; 0x18
    2ebe:	99 8d       	ldd	r25, Y+25	; 0x19
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9d 8b       	std	Y+21, r25	; 0x15
    2eca:	8c 8b       	std	Y+20, r24	; 0x14
    2ecc:	8c 89       	ldd	r24, Y+20	; 0x14
    2ece:	9d 89       	ldd	r25, Y+21	; 0x15
    2ed0:	99 8b       	std	Y+17, r25	; 0x11
    2ed2:	88 8b       	std	Y+16, r24	; 0x10
    2ed4:	88 89       	ldd	r24, Y+16	; 0x10
    2ed6:	99 89       	ldd	r25, Y+17	; 0x11
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <LCD_vidInit+0x4dc>
    2edc:	99 8b       	std	Y+17, r25	; 0x11
    2ede:	88 8b       	std	Y+16, r24	; 0x10
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <LCD_vidInit+0x504>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ee2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ee4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	8e 8f       	std	Y+30, r24	; 0x1e
    2ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2efa:	8a 95       	dec	r24
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_vidInit+0x4fe>
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_vidSendCmd(DISPLAY_CLEAR);
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e4       	ldi	r27, 0x40	; 64
    2f0e:	8b 87       	std	Y+11, r24	; 0x0b
    2f10:	9c 87       	std	Y+12, r25	; 0x0c
    2f12:	ad 87       	std	Y+13, r26	; 0x0d
    2f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	4a ef       	ldi	r20, 0xFA	; 250
    2f24:	54 e4       	ldi	r21, 0x44	; 68
    2f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	8f 83       	std	Y+7, r24	; 0x07
    2f30:	98 87       	std	Y+8, r25	; 0x08
    2f32:	a9 87       	std	Y+9, r26	; 0x09
    2f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e8       	ldi	r20, 0x80	; 128
    2f44:	5f e3       	ldi	r21, 0x3F	; 63
    2f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4a:	88 23       	and	r24, r24
    2f4c:	2c f4       	brge	.+10     	; 0x2f58 <LCD_vidInit+0x55c>
		__ticks = 1;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	3f c0       	rjmp	.+126    	; 0x2fd6 <LCD_vidInit+0x5da>
	else if (__tmp > 65535)
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	4c f5       	brge	.+82     	; 0x2fc2 <LCD_vidInit+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e2       	ldi	r20, 0x20	; 32
    2f7e:	51 e4       	ldi	r21, 0x41	; 65
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	0f c0       	rjmp	.+30     	; 0x2fb8 <LCD_vidInit+0x5bc>
    2f9a:	88 ec       	ldi	r24, 0xC8	; 200
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 83       	std	Y+4, r25	; 0x04
    2fa0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <LCD_vidInit+0x5aa>
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	69 f7       	brne	.-38     	; 0x2f9a <LCD_vidInit+0x59e>
    2fc0:	14 c0       	rjmp	.+40     	; 0x2fea <LCD_vidInit+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc4:	78 85       	ldd	r23, Y+8	; 0x08
    2fc6:	89 85       	ldd	r24, Y+9	; 0x09
    2fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <LCD_vidInit+0x5e6>
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidSendCmd(local_u8EntryModeSet);
    2fea:	fe 01       	movw	r30, r28
    2fec:	e3 5b       	subi	r30, 0xB3	; 179
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>

#elif LCD_MODE == FOUR_BITS
#else
#error "Wrong Configuration !"
#endif
}
    2ff6:	c1 5b       	subi	r28, 0xB1	; 177
    2ff8:	df 4f       	sbci	r29, 0xFF	; 255
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	08 95       	ret

0000300e <LCD_vidSendCmd>:

//function to send command
void LCD_vidSendCmd(u8 Copy_u8Cmd){
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	69 97       	sbiw	r28, 0x19	; 25
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_LOW);
    3024:	83 e0       	ldi	r24, 0x03	; 3
    3026:	66 e0       	ldi	r22, 0x06	; 6
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    302e:	83 e0       	ldi	r24, 0x03	; 3
    3030:	65 e0       	ldi	r22, 0x05	; 5
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	64 e0       	ldi	r22, 0x04	; 4
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Cmd);
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	69 8d       	ldd	r22, Y+25	; 0x19
    3046:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	64 e0       	ldi	r22, 0x04	; 4
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a0 e8       	ldi	r26, 0x80	; 128
    305a:	bf e3       	ldi	r27, 0x3F	; 63
    305c:	8d 8b       	std	Y+21, r24	; 0x15
    305e:	9e 8b       	std	Y+22, r25	; 0x16
    3060:	af 8b       	std	Y+23, r26	; 0x17
    3062:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3064:	6d 89       	ldd	r22, Y+21	; 0x15
    3066:	7e 89       	ldd	r23, Y+22	; 0x16
    3068:	8f 89       	ldd	r24, Y+23	; 0x17
    306a:	98 8d       	ldd	r25, Y+24	; 0x18
    306c:	2b ea       	ldi	r18, 0xAB	; 171
    306e:	3a ea       	ldi	r19, 0xAA	; 170
    3070:	4a e2       	ldi	r20, 0x2A	; 42
    3072:	50 e4       	ldi	r21, 0x40	; 64
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	9a 8b       	std	Y+18, r25	; 0x12
    3080:	ab 8b       	std	Y+19, r26	; 0x13
    3082:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3084:	69 89       	ldd	r22, Y+17	; 0x11
    3086:	7a 89       	ldd	r23, Y+18	; 0x12
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f e3       	ldi	r21, 0x3F	; 63
    3094:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3098:	88 23       	and	r24, r24
    309a:	1c f4       	brge	.+6      	; 0x30a2 <LCD_vidSendCmd+0x94>
		__ticks = 1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	88 8b       	std	Y+16, r24	; 0x10
    30a0:	91 c0       	rjmp	.+290    	; 0x31c4 <LCD_vidSendCmd+0x1b6>
	else if (__tmp > 255)
    30a2:	69 89       	ldd	r22, Y+17	; 0x11
    30a4:	7a 89       	ldd	r23, Y+18	; 0x12
    30a6:	8b 89       	ldd	r24, Y+19	; 0x13
    30a8:	9c 89       	ldd	r25, Y+20	; 0x14
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	53 e4       	ldi	r21, 0x43	; 67
    30b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	0c f0       	brlt	.+2      	; 0x30bc <LCD_vidSendCmd+0xae>
    30ba:	7b c0       	rjmp	.+246    	; 0x31b2 <LCD_vidSendCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    30bc:	6d 89       	ldd	r22, Y+21	; 0x15
    30be:	7e 89       	ldd	r23, Y+22	; 0x16
    30c0:	8f 89       	ldd	r24, Y+23	; 0x17
    30c2:	98 8d       	ldd	r25, Y+24	; 0x18
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4a e7       	ldi	r20, 0x7A	; 122
    30ca:	54 e4       	ldi	r21, 0x44	; 68
    30cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8c 87       	std	Y+12, r24	; 0x0c
    30d6:	9d 87       	std	Y+13, r25	; 0x0d
    30d8:	ae 87       	std	Y+14, r26	; 0x0e
    30da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    30de:	7d 85       	ldd	r23, Y+13	; 0x0d
    30e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    30e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a ef       	ldi	r20, 0xFA	; 250
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	88 87       	std	Y+8, r24	; 0x08
    30f6:	99 87       	std	Y+9, r25	; 0x09
    30f8:	aa 87       	std	Y+10, r26	; 0x0a
    30fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30fc:	68 85       	ldd	r22, Y+8	; 0x08
    30fe:	79 85       	ldd	r23, Y+9	; 0x09
    3100:	8a 85       	ldd	r24, Y+10	; 0x0a
    3102:	9b 85       	ldd	r25, Y+11	; 0x0b
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <LCD_vidSendCmd+0x110>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9f 83       	std	Y+7, r25	; 0x07
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	3f c0       	rjmp	.+126    	; 0x319c <LCD_vidSendCmd+0x18e>
	else if (__tmp > 65535)
    311e:	68 85       	ldd	r22, Y+8	; 0x08
    3120:	79 85       	ldd	r23, Y+9	; 0x09
    3122:	8a 85       	ldd	r24, Y+10	; 0x0a
    3124:	9b 85       	ldd	r25, Y+11	; 0x0b
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <LCD_vidSendCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	6c 85       	ldd	r22, Y+12	; 0x0c
    3138:	7d 85       	ldd	r23, Y+13	; 0x0d
    313a:	8e 85       	ldd	r24, Y+14	; 0x0e
    313c:	9f 85       	ldd	r25, Y+15	; 0x0f
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9f 83       	std	Y+7, r25	; 0x07
    315c:	8e 83       	std	Y+6, r24	; 0x06
    315e:	0f c0       	rjmp	.+30     	; 0x317e <LCD_vidSendCmd+0x170>
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9d 83       	std	Y+5, r25	; 0x05
    3166:	8c 83       	std	Y+4, r24	; 0x04
    3168:	8c 81       	ldd	r24, Y+4	; 0x04
    316a:	9d 81       	ldd	r25, Y+5	; 0x05
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_vidSendCmd+0x15e>
    3170:	9d 83       	std	Y+5, r25	; 0x05
    3172:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8e 81       	ldd	r24, Y+6	; 0x06
    3176:	9f 81       	ldd	r25, Y+7	; 0x07
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	9f 83       	std	Y+7, r25	; 0x07
    317c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8e 81       	ldd	r24, Y+6	; 0x06
    3180:	9f 81       	ldd	r25, Y+7	; 0x07
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <LCD_vidSendCmd+0x152>
    3186:	24 c0       	rjmp	.+72     	; 0x31d0 <LCD_vidSendCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	68 85       	ldd	r22, Y+8	; 0x08
    318a:	79 85       	ldd	r23, Y+9	; 0x09
    318c:	8a 85       	ldd	r24, Y+10	; 0x0a
    318e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9f 83       	std	Y+7, r25	; 0x07
    319a:	8e 83       	std	Y+6, r24	; 0x06
    319c:	8e 81       	ldd	r24, Y+6	; 0x06
    319e:	9f 81       	ldd	r25, Y+7	; 0x07
    31a0:	9b 83       	std	Y+3, r25	; 0x03
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	9b 81       	ldd	r25, Y+3	; 0x03
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <LCD_vidSendCmd+0x19a>
    31ac:	9b 83       	std	Y+3, r25	; 0x03
    31ae:	8a 83       	std	Y+2, r24	; 0x02
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <LCD_vidSendCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31b2:	69 89       	ldd	r22, Y+17	; 0x11
    31b4:	7a 89       	ldd	r23, Y+18	; 0x12
    31b6:	8b 89       	ldd	r24, Y+19	; 0x13
    31b8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	88 8b       	std	Y+16, r24	; 0x10
    31c4:	88 89       	ldd	r24, Y+16	; 0x10
    31c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	8a 95       	dec	r24
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <LCD_vidSendCmd+0x1bc>
    31ce:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    31d0:	69 96       	adiw	r28, 0x19	; 25
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <LCD_vidWriteChar>:
//function to send data
void LCD_vidWriteChar(u8 Copy_u8Char){
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	69 97       	sbiw	r28, 0x19	; 25
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8setPinVal(RS_PORT, RS_PIN, DIO_HIGH);
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	66 e0       	ldi	r22, 0x06	; 6
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	DIO_u8setPinVal(RW_PORT, RW_PIN, DIO_LOW);
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	65 e0       	ldi	r22, 0x05	; 5
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_HIGH);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	64 e0       	ldi	r22, 0x04	; 4
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
	DIO_u8setPortVal(LCD_DATA_PORT, Copy_u8Char);
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	69 8d       	ldd	r22, Y+25	; 0x19
    321a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8setPortVal>
	DIO_u8setPinVal(E_PORT, E_PIN, DIO_LOW);
    321e:	83 e0       	ldi	r24, 0x03	; 3
    3220:	64 e0       	ldi	r22, 0x04	; 4
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 01 10 	call	0x2002	; 0x2002 <DIO_u8setPinVal>
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a0 e8       	ldi	r26, 0x80	; 128
    322e:	bf e3       	ldi	r27, 0x3F	; 63
    3230:	8d 8b       	std	Y+21, r24	; 0x15
    3232:	9e 8b       	std	Y+22, r25	; 0x16
    3234:	af 8b       	std	Y+23, r26	; 0x17
    3236:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3238:	6d 89       	ldd	r22, Y+21	; 0x15
    323a:	7e 89       	ldd	r23, Y+22	; 0x16
    323c:	8f 89       	ldd	r24, Y+23	; 0x17
    323e:	98 8d       	ldd	r25, Y+24	; 0x18
    3240:	2b ea       	ldi	r18, 0xAB	; 171
    3242:	3a ea       	ldi	r19, 0xAA	; 170
    3244:	4a e2       	ldi	r20, 0x2A	; 42
    3246:	50 e4       	ldi	r21, 0x40	; 64
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	89 8b       	std	Y+17, r24	; 0x11
    3252:	9a 8b       	std	Y+18, r25	; 0x12
    3254:	ab 8b       	std	Y+19, r26	; 0x13
    3256:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3258:	69 89       	ldd	r22, Y+17	; 0x11
    325a:	7a 89       	ldd	r23, Y+18	; 0x12
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	1c f4       	brge	.+6      	; 0x3276 <LCD_vidWriteChar+0x94>
		__ticks = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	88 8b       	std	Y+16, r24	; 0x10
    3274:	91 c0       	rjmp	.+290    	; 0x3398 <LCD_vidWriteChar+0x1b6>
	else if (__tmp > 255)
    3276:	69 89       	ldd	r22, Y+17	; 0x11
    3278:	7a 89       	ldd	r23, Y+18	; 0x12
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9c 89       	ldd	r25, Y+20	; 0x14
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	0c f0       	brlt	.+2      	; 0x3290 <LCD_vidWriteChar+0xae>
    328e:	7b c0       	rjmp	.+246    	; 0x3386 <LCD_vidWriteChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    3290:	6d 89       	ldd	r22, Y+21	; 0x15
    3292:	7e 89       	ldd	r23, Y+22	; 0x16
    3294:	8f 89       	ldd	r24, Y+23	; 0x17
    3296:	98 8d       	ldd	r25, Y+24	; 0x18
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a e7       	ldi	r20, 0x7A	; 122
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8c 87       	std	Y+12, r24	; 0x0c
    32aa:	9d 87       	std	Y+13, r25	; 0x0d
    32ac:	ae 87       	std	Y+14, r26	; 0x0e
    32ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a ef       	ldi	r20, 0xFA	; 250
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	88 87       	std	Y+8, r24	; 0x08
    32ca:	99 87       	std	Y+9, r25	; 0x09
    32cc:	aa 87       	std	Y+10, r26	; 0x0a
    32ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32d0:	68 85       	ldd	r22, Y+8	; 0x08
    32d2:	79 85       	ldd	r23, Y+9	; 0x09
    32d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <LCD_vidWriteChar+0x110>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9f 83       	std	Y+7, r25	; 0x07
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	3f c0       	rjmp	.+126    	; 0x3370 <LCD_vidWriteChar+0x18e>
	else if (__tmp > 65535)
    32f2:	68 85       	ldd	r22, Y+8	; 0x08
    32f4:	79 85       	ldd	r23, Y+9	; 0x09
    32f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	4c f5       	brge	.+82     	; 0x335c <LCD_vidWriteChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	6c 85       	ldd	r22, Y+12	; 0x0c
    330c:	7d 85       	ldd	r23, Y+13	; 0x0d
    330e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3310:	9f 85       	ldd	r25, Y+15	; 0x0f
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	51 e4       	ldi	r21, 0x41	; 65
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9f 83       	std	Y+7, r25	; 0x07
    3330:	8e 83       	std	Y+6, r24	; 0x06
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <LCD_vidWriteChar+0x170>
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9d 83       	std	Y+5, r25	; 0x05
    333a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    333c:	8c 81       	ldd	r24, Y+4	; 0x04
    333e:	9d 81       	ldd	r25, Y+5	; 0x05
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <LCD_vidWriteChar+0x15e>
    3344:	9d 83       	std	Y+5, r25	; 0x05
    3346:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	8e 81       	ldd	r24, Y+6	; 0x06
    334a:	9f 81       	ldd	r25, Y+7	; 0x07
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	9f 83       	std	Y+7, r25	; 0x07
    3350:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	8e 81       	ldd	r24, Y+6	; 0x06
    3354:	9f 81       	ldd	r25, Y+7	; 0x07
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	69 f7       	brne	.-38     	; 0x3334 <LCD_vidWriteChar+0x152>
    335a:	24 c0       	rjmp	.+72     	; 0x33a4 <LCD_vidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335c:	68 85       	ldd	r22, Y+8	; 0x08
    335e:	79 85       	ldd	r23, Y+9	; 0x09
    3360:	8a 85       	ldd	r24, Y+10	; 0x0a
    3362:	9b 85       	ldd	r25, Y+11	; 0x0b
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9f 83       	std	Y+7, r25	; 0x07
    336e:	8e 83       	std	Y+6, r24	; 0x06
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	9f 81       	ldd	r25, Y+7	; 0x07
    3374:	9b 83       	std	Y+3, r25	; 0x03
    3376:	8a 83       	std	Y+2, r24	; 0x02
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_vidWriteChar+0x19a>
    3380:	9b 83       	std	Y+3, r25	; 0x03
    3382:	8a 83       	std	Y+2, r24	; 0x02
    3384:	0f c0       	rjmp	.+30     	; 0x33a4 <LCD_vidWriteChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3386:	69 89       	ldd	r22, Y+17	; 0x11
    3388:	7a 89       	ldd	r23, Y+18	; 0x12
    338a:	8b 89       	ldd	r24, Y+19	; 0x13
    338c:	9c 89       	ldd	r25, Y+20	; 0x14
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	88 8b       	std	Y+16, r24	; 0x10
    3398:	88 89       	ldd	r24, Y+16	; 0x10
    339a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	8a 95       	dec	r24
    33a0:	f1 f7       	brne	.-4      	; 0x339e <LCD_vidWriteChar+0x1bc>
    33a2:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    33a4:	69 96       	adiw	r28, 0x19	; 25
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <LCD_vidClear>:

//function to clear the display
void LCD_vidClear(void){
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	68 97       	sbiw	r28, 0x18	; 24
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCmd(DISPLAY_CLEAR);
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	a8 ec       	ldi	r26, 0xC8	; 200
    33d6:	b2 e4       	ldi	r27, 0x42	; 66
    33d8:	8d 8b       	std	Y+21, r24	; 0x15
    33da:	9e 8b       	std	Y+22, r25	; 0x16
    33dc:	af 8b       	std	Y+23, r26	; 0x17
    33de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33e0:	6d 89       	ldd	r22, Y+21	; 0x15
    33e2:	7e 89       	ldd	r23, Y+22	; 0x16
    33e4:	8f 89       	ldd	r24, Y+23	; 0x17
    33e6:	98 8d       	ldd	r25, Y+24	; 0x18
    33e8:	2b ea       	ldi	r18, 0xAB	; 171
    33ea:	3a ea       	ldi	r19, 0xAA	; 170
    33ec:	4a e2       	ldi	r20, 0x2A	; 42
    33ee:	50 e4       	ldi	r21, 0x40	; 64
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	89 8b       	std	Y+17, r24	; 0x11
    33fa:	9a 8b       	std	Y+18, r25	; 0x12
    33fc:	ab 8b       	std	Y+19, r26	; 0x13
    33fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3400:	69 89       	ldd	r22, Y+17	; 0x11
    3402:	7a 89       	ldd	r23, Y+18	; 0x12
    3404:	8b 89       	ldd	r24, Y+19	; 0x13
    3406:	9c 89       	ldd	r25, Y+20	; 0x14
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e8       	ldi	r20, 0x80	; 128
    340e:	5f e3       	ldi	r21, 0x3F	; 63
    3410:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3414:	88 23       	and	r24, r24
    3416:	1c f4       	brge	.+6      	; 0x341e <LCD_vidClear+0x68>
		__ticks = 1;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	88 8b       	std	Y+16, r24	; 0x10
    341c:	91 c0       	rjmp	.+290    	; 0x3540 <LCD_vidClear+0x18a>
	else if (__tmp > 255)
    341e:	69 89       	ldd	r22, Y+17	; 0x11
    3420:	7a 89       	ldd	r23, Y+18	; 0x12
    3422:	8b 89       	ldd	r24, Y+19	; 0x13
    3424:	9c 89       	ldd	r25, Y+20	; 0x14
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	4f e7       	ldi	r20, 0x7F	; 127
    342c:	53 e4       	ldi	r21, 0x43	; 67
    342e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3432:	18 16       	cp	r1, r24
    3434:	0c f0       	brlt	.+2      	; 0x3438 <LCD_vidClear+0x82>
    3436:	7b c0       	rjmp	.+246    	; 0x352e <LCD_vidClear+0x178>
	{
		_delay_ms(__us / 1000.0);
    3438:	6d 89       	ldd	r22, Y+21	; 0x15
    343a:	7e 89       	ldd	r23, Y+22	; 0x16
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	4a e7       	ldi	r20, 0x7A	; 122
    3446:	54 e4       	ldi	r21, 0x44	; 68
    3448:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8c 87       	std	Y+12, r24	; 0x0c
    3452:	9d 87       	std	Y+13, r25	; 0x0d
    3454:	ae 87       	std	Y+14, r26	; 0x0e
    3456:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3458:	6c 85       	ldd	r22, Y+12	; 0x0c
    345a:	7d 85       	ldd	r23, Y+13	; 0x0d
    345c:	8e 85       	ldd	r24, Y+14	; 0x0e
    345e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	4a ef       	ldi	r20, 0xFA	; 250
    3466:	54 e4       	ldi	r21, 0x44	; 68
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	88 87       	std	Y+8, r24	; 0x08
    3472:	99 87       	std	Y+9, r25	; 0x09
    3474:	aa 87       	std	Y+10, r26	; 0x0a
    3476:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3478:	68 85       	ldd	r22, Y+8	; 0x08
    347a:	79 85       	ldd	r23, Y+9	; 0x09
    347c:	8a 85       	ldd	r24, Y+10	; 0x0a
    347e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e8       	ldi	r20, 0x80	; 128
    3486:	5f e3       	ldi	r21, 0x3F	; 63
    3488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348c:	88 23       	and	r24, r24
    348e:	2c f4       	brge	.+10     	; 0x349a <LCD_vidClear+0xe4>
		__ticks = 1;
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	9f 83       	std	Y+7, r25	; 0x07
    3496:	8e 83       	std	Y+6, r24	; 0x06
    3498:	3f c0       	rjmp	.+126    	; 0x3518 <LCD_vidClear+0x162>
	else if (__tmp > 65535)
    349a:	68 85       	ldd	r22, Y+8	; 0x08
    349c:	79 85       	ldd	r23, Y+9	; 0x09
    349e:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	3f ef       	ldi	r19, 0xFF	; 255
    34a6:	4f e7       	ldi	r20, 0x7F	; 127
    34a8:	57 e4       	ldi	r21, 0x47	; 71
    34aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ae:	18 16       	cp	r1, r24
    34b0:	4c f5       	brge	.+82     	; 0x3504 <LCD_vidClear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    34b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    34b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e2       	ldi	r20, 0x20	; 32
    34c0:	51 e4       	ldi	r21, 0x41	; 65
    34c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	bc 01       	movw	r22, r24
    34cc:	cd 01       	movw	r24, r26
    34ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	9f 83       	std	Y+7, r25	; 0x07
    34d8:	8e 83       	std	Y+6, r24	; 0x06
    34da:	0f c0       	rjmp	.+30     	; 0x34fa <LCD_vidClear+0x144>
    34dc:	88 ec       	ldi	r24, 0xC8	; 200
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	9d 83       	std	Y+5, r25	; 0x05
    34e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34e4:	8c 81       	ldd	r24, Y+4	; 0x04
    34e6:	9d 81       	ldd	r25, Y+5	; 0x05
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <LCD_vidClear+0x132>
    34ec:	9d 83       	std	Y+5, r25	; 0x05
    34ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f0:	8e 81       	ldd	r24, Y+6	; 0x06
    34f2:	9f 81       	ldd	r25, Y+7	; 0x07
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	9f 83       	std	Y+7, r25	; 0x07
    34f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fa:	8e 81       	ldd	r24, Y+6	; 0x06
    34fc:	9f 81       	ldd	r25, Y+7	; 0x07
    34fe:	00 97       	sbiw	r24, 0x00	; 0
    3500:	69 f7       	brne	.-38     	; 0x34dc <LCD_vidClear+0x126>
    3502:	24 c0       	rjmp	.+72     	; 0x354c <LCD_vidClear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3504:	68 85       	ldd	r22, Y+8	; 0x08
    3506:	79 85       	ldd	r23, Y+9	; 0x09
    3508:	8a 85       	ldd	r24, Y+10	; 0x0a
    350a:	9b 85       	ldd	r25, Y+11	; 0x0b
    350c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	9f 83       	std	Y+7, r25	; 0x07
    3516:	8e 83       	std	Y+6, r24	; 0x06
    3518:	8e 81       	ldd	r24, Y+6	; 0x06
    351a:	9f 81       	ldd	r25, Y+7	; 0x07
    351c:	9b 83       	std	Y+3, r25	; 0x03
    351e:	8a 83       	std	Y+2, r24	; 0x02
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <LCD_vidClear+0x16e>
    3528:	9b 83       	std	Y+3, r25	; 0x03
    352a:	8a 83       	std	Y+2, r24	; 0x02
    352c:	0f c0       	rjmp	.+30     	; 0x354c <LCD_vidClear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    352e:	69 89       	ldd	r22, Y+17	; 0x11
    3530:	7a 89       	ldd	r23, Y+18	; 0x12
    3532:	8b 89       	ldd	r24, Y+19	; 0x13
    3534:	9c 89       	ldd	r25, Y+20	; 0x14
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	88 8b       	std	Y+16, r24	; 0x10
    3540:	88 89       	ldd	r24, Y+16	; 0x10
    3542:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	8a 95       	dec	r24
    3548:	f1 f7       	brne	.-4      	; 0x3546 <LCD_vidClear+0x190>
    354a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);								//delay to force the next instructions to wait until the clear ins is executed
}
    354c:	68 96       	adiw	r28, 0x18	; 24
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <LCD_u8Goto>:

//function to go to specific segment
u8 LCD_u8Goto(u8 Copy_u8Row, u8 Copy_u8Col){
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	00 d0       	rcall	.+0      	; 0x3564 <LCD_u8Goto+0x6>
    3564:	00 d0       	rcall	.+0      	; 0x3566 <LCD_u8Goto+0x8>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <LCD_u8Goto+0xa>
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8ErrorStatus = RT_OK;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Set_DDRAM_Address = SET_DDRAM_ADDRESS;
    3574:	80 e8       	ldi	r24, 0x80	; 128
    3576:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Row){
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	3e 83       	std	Y+6, r19	; 0x06
    3580:	2d 83       	std	Y+5, r18	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	91 05       	cpc	r25, r1
    358a:	31 f0       	breq	.+12     	; 0x3598 <LCD_u8Goto+0x3a>
    358c:	2d 81       	ldd	r18, Y+5	; 0x05
    358e:	3e 81       	ldd	r19, Y+6	; 0x06
    3590:	22 30       	cpi	r18, 0x02	; 2
    3592:	31 05       	cpc	r19, r1
    3594:	81 f0       	breq	.+32     	; 0x35b6 <LCD_u8Goto+0x58>
    3596:	1e c0       	rjmp	.+60     	; 0x35d4 <LCD_u8Goto+0x76>
	case 1:
		if(Copy_u8Col <= 64){
    3598:	8c 81       	ldd	r24, Y+4	; 0x04
    359a:	81 34       	cpi	r24, 0x41	; 65
    359c:	48 f4       	brcc	.+18     	; 0x35b0 <LCD_u8Goto+0x52>
			local_u8Set_DDRAM_Address += (Copy_u8Col - 1);
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	89 0f       	add	r24, r25
    35a4:	81 50       	subi	r24, 0x01	; 1
    35a6:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	8a 83       	std	Y+2, r24	; 0x02
    35b4:	11 c0       	rjmp	.+34     	; 0x35d8 <LCD_u8Goto+0x7a>
		}
		break;
	case 2:
		if(Copy_u8Col <= 16){
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	81 31       	cpi	r24, 0x11	; 17
    35ba:	48 f4       	brcc	.+18     	; 0x35ce <LCD_u8Goto+0x70>
			local_u8Set_DDRAM_Address += (64 + (Copy_u8Col-1));
    35bc:	9c 81       	ldd	r25, Y+4	; 0x04
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	89 0f       	add	r24, r25
    35c2:	81 5c       	subi	r24, 0xC1	; 193
    35c4:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <LCD_u8Goto+0x7a>
		}
		break;
	default:
		local_u8ErrorStatus = RT_WRONG_ROW_NUMBER;
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8ErrorStatus;
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    35da:	26 96       	adiw	r28, 0x06	; 6
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <LCD_vidSendString>:

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <LCD_vidSendString+0x6>
    35f2:	0f 92       	push	r0
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9b 83       	std	Y+3, r25	; 0x03
    35fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    35fc:	19 82       	std	Y+1, r1	; 0x01
    35fe:	0e c0       	rjmp	.+28     	; 0x361c <LCD_vidSendString+0x30>
	while(*(Copy_u8CharPtr + i) != '\0'){
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	fc 01       	movw	r30, r24
    360c:	e2 0f       	add	r30, r18
    360e:	f3 1f       	adc	r31, r19
    3610:	80 81       	ld	r24, Z
    3612:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <LCD_vidWriteChar>
		i++;
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	8f 5f       	subi	r24, 0xFF	; 255
    361a:	89 83       	std	Y+1, r24	; 0x01
}

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
	u8 i =0;
	while(*(Copy_u8CharPtr + i) != '\0'){
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	9b 81       	ldd	r25, Y+3	; 0x03
    3626:	fc 01       	movw	r30, r24
    3628:	e2 0f       	add	r30, r18
    362a:	f3 1f       	adc	r31, r19
    362c:	80 81       	ld	r24, Z
    362e:	88 23       	and	r24, r24
    3630:	39 f7       	brne	.-50     	; 0x3600 <LCD_vidSendString+0x14>
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
		i++;
	}
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <LCD_vidSendInt>:

//function to display integers
void LCD_vidSendInt(u32 Copy_u32IntNumber){
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	00 d0       	rcall	.+0      	; 0x3644 <LCD_vidSendInt+0x6>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <LCD_vidSendInt+0x8>
    3646:	00 d0       	rcall	.+0      	; 0x3648 <LCD_vidSendInt+0xa>
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	9e 83       	std	Y+6, r25	; 0x06
    364e:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u32IntNumber != 0){
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	9e 81       	ldd	r25, Y+6	; 0x06
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	09 f4       	brne	.+2      	; 0x365a <LCD_vidSendInt+0x1c>
    3658:	5a c0       	rjmp	.+180    	; 0x370e <LCD_vidSendInt+0xd0>
		u32 local_u32NewNumber = 0;
    365a:	1c 82       	std	Y+4, r1	; 0x04
    365c:	1b 82       	std	Y+3, r1	; 0x03
		u8 local_u8NewDigit = 0;
    365e:	1a 82       	std	Y+2, r1	; 0x02
		u8 counter = 0;
    3660:	19 82       	std	Y+1, r1	; 0x01
    3662:	28 c0       	rjmp	.+80     	; 0x36b4 <LCD_vidSendInt+0x76>
		while(Copy_u32IntNumber !=0){
			local_u8NewDigit = Copy_u32IntNumber % 10;
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	2a e0       	ldi	r18, 0x0A	; 10
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	b9 01       	movw	r22, r18
    366e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodhi4>
    3672:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	9c 81       	ldd	r25, Y+4	; 0x04
    3678:	9c 01       	movw	r18, r24
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	c9 01       	movw	r24, r18
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	28 0f       	add	r18, r24
    368a:	39 1f       	adc	r19, r25
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	88 2f       	mov	r24, r24
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	82 0f       	add	r24, r18
    3694:	93 1f       	adc	r25, r19
    3696:	9c 83       	std	Y+4, r25	; 0x04
    3698:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32IntNumber /= 10;
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	2a e0       	ldi	r18, 0x0A	; 10
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	b9 01       	movw	r22, r18
    36a4:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodhi4>
    36a8:	cb 01       	movw	r24, r22
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
			counter++;
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	8f 5f       	subi	r24, 0xFF	; 255
    36b2:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidSendInt(u32 Copy_u32IntNumber){
	if(Copy_u32IntNumber != 0){
		u32 local_u32NewNumber = 0;
		u8 local_u8NewDigit = 0;
		u8 counter = 0;
		while(Copy_u32IntNumber !=0){
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	9e 81       	ldd	r25, Y+6	; 0x06
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	a1 f6       	brne	.-88     	; 0x3664 <LCD_vidSendInt+0x26>
    36bc:	19 c0       	rjmp	.+50     	; 0x36f0 <LCD_vidSendInt+0xb2>
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
			local_u8NewDigit = local_u32NewNumber % 10;
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	9c 81       	ldd	r25, Y+4	; 0x04
    36c2:	2a e0       	ldi	r18, 0x0A	; 10
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	b9 01       	movw	r22, r18
    36c8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodhi4>
    36cc:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber /= 10;
    36ce:	8b 81       	ldd	r24, Y+3	; 0x03
    36d0:	9c 81       	ldd	r25, Y+4	; 0x04
    36d2:	2a e0       	ldi	r18, 0x0A	; 10
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	b9 01       	movw	r22, r18
    36d8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodhi4>
    36dc:	cb 01       	movw	r24, r22
    36de:	9c 83       	std	Y+4, r25	; 0x04
    36e0:	8b 83       	std	Y+3, r24	; 0x03
			LCD_vidWriteChar('0' + local_u8NewDigit);
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	80 5d       	subi	r24, 0xD0	; 208
    36e6:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <LCD_vidWriteChar>
			counter--;
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	81 50       	subi	r24, 0x01	; 1
    36ee:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	19 f7       	brne	.-58     	; 0x36be <LCD_vidSendInt+0x80>
    36f8:	06 c0       	rjmp	.+12     	; 0x3706 <LCD_vidSendInt+0xc8>
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
			LCD_vidWriteChar('0');
    36fa:	80 e3       	ldi	r24, 0x30	; 48
    36fc:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <LCD_vidWriteChar>
			counter--;
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	81 50       	subi	r24, 0x01	; 1
    3704:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber /= 10;
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	88 23       	and	r24, r24
    370a:	b9 f7       	brne	.-18     	; 0x36fa <LCD_vidSendInt+0xbc>
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <LCD_vidSendInt+0xd6>
			LCD_vidWriteChar('0');
			counter--;
		}
	}else{
		LCD_vidWriteChar('0');
    370e:	80 e3       	ldi	r24, 0x30	; 48
    3710:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <LCD_vidWriteChar>
	}

}
    3714:	26 96       	adiw	r28, 0x06	; 6
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <LCD_vidShiftDisplayRight>:

//function to shift right
void LCD_vidShiftDisplayRight(void){
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	0f 92       	push	r0
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayRightCmd = SHIFT_ENTIRE_DISPLAY ;
    3730:	88 e1       	ldi	r24, 0x18	; 24
    3732:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftDisplayRightCmd, 2);
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	84 60       	ori	r24, 0x04	; 4
    3738:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayRightCmd);
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
}
    3740:	0f 90       	pop	r0
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	08 95       	ret

00003748 <LCD_vidShiftDisplayLeft>:

//function to shift left
void LCD_vidShiftDisplayLeft(void){
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	0f 92       	push	r0
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayLeftCmd = SHIFT_ENTIRE_DISPLAY;
    3752:	88 e1       	ldi	r24, 0x18	; 24
    3754:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftDisplayLeftCmd, 2);
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	8b 7f       	andi	r24, 0xFB	; 251
    375a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayLeftCmd);
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
}
    3762:	0f 90       	pop	r0
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <LCD_vidShiftCursorLeft>:

//function to shift the cursor left
void LCD_vidShiftCursorLeft(void){
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	0f 92       	push	r0
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorLeftCmd = SHIFT_CURSOR;
    3774:	80 e1       	ldi	r24, 0x10	; 16
    3776:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftCursorLeftCmd, 2);
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	8b 7f       	andi	r24, 0xFB	; 251
    377c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorLeftCmd);
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
}
    3784:	0f 90       	pop	r0
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	08 95       	ret

0000378c <LCD_vidShiftCursorRight>:
//function to shift the cursor right
void LCD_vidShiftCursorRight(void){
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	0f 92       	push	r0
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorRightCmd = SHIFT_CURSOR;
    3796:	80 e1       	ldi	r24, 0x10	; 16
    3798:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftCursorRightCmd, 2);
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	84 60       	ori	r24, 0x04	; 4
    379e:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorRightCmd);
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vidSendCmd>
}
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <IR_Init>:
volatile u8 ir_start_flag = 0; // flag to indicate whether data is ready
volatile u8 ir_frame[50] = {0};

void (*isr_timer1_callback)(void) = NULL;

void IR_Init(void){
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8SetSource(EXTI_INT_0, EXTI_FALLING_EDGE);
	EXTI_voidSet_INT0_Cbf(&IR_vidGetFrame);
	EXTI_u8EnablePIE(EXTI_INT_0);
	EXTI_voidEnableGIE();
#elif IR_PIN == DIO_PIN_3
	EXTI_u8SetSource(EXTI_INT_1, EXTI_FALLING_EDGE);
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	62 e0       	ldi	r22, 0x02	; 2
    37ba:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EXTI_u8SetSource>
	EXTI_voidSet_INT1_Cbf(&IR_vidGetFrame);
    37be:	8b ee       	ldi	r24, 0xEB	; 235
    37c0:	9b e1       	ldi	r25, 0x1B	; 27
    37c2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <EXTI_voidSet_INT1_Cbf>
	EXTI_u8EnablePIE(EXTI_INT_1);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EXTI_u8EnablePIE>
	EXTI_voidEnableGIE();
    37cc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_voidEnableGIE>
#error "Configuration error : IR pin selection error"
#endif
#else
#error "Configuration error : IR port selection error"
#endif
}
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <IR_vidGetFrame>:

static void IR_vidGetFrame(void){
    37d6:	0f 93       	push	r16
    37d8:	1f 93       	push	r17
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
	LED_vidToggleLed(LED_e_7);
    37e2:	87 e0       	ldi	r24, 0x07	; 7
    37e4:	0e 94 86 14 	call	0x290c	; 0x290c <LED_vidToggleLed>
	if(ir_start_flag == 0)
    37e8:	80 91 ce 01 	lds	r24, 0x01CE
    37ec:	88 23       	and	r24, r24
    37ee:	59 f4       	brne	.+22     	; 0x3806 <IR_vidGetFrame+0x30>
	{
		IR_vidSetSinglePeriod(1000, &IR_vidtakeAction);
    37f0:	2e e1       	ldi	r18, 0x1E	; 30
    37f2:	3c e1       	ldi	r19, 0x1C	; 28
    37f4:	88 ee       	ldi	r24, 0xE8	; 232
    37f6:	93 e0       	ldi	r25, 0x03	; 3
    37f8:	b9 01       	movw	r22, r18
    37fa:	0e 94 86 1c 	call	0x390c	; 0x390c <IR_vidSetSinglePeriod>
		ir_start_flag = 1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	80 93 ce 01 	sts	0x01CE, r24
    3804:	16 c0       	rjmp	.+44     	; 0x3832 <IR_vidGetFrame+0x5c>
	}else{
		ir_frame[ir_edge_count] = IR_u16GetElapsedTime();
    3806:	80 91 cd 01 	lds	r24, 0x01CD
    380a:	08 2f       	mov	r16, r24
    380c:	10 e0       	ldi	r17, 0x00	; 0
    380e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <IR_u16GetElapsedTime>
    3812:	f8 01       	movw	r30, r16
    3814:	e1 53       	subi	r30, 0x31	; 49
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	80 83       	st	Z, r24
		IR_vidSetSinglePeriod(1000,&IR_vidtakeAction);
    381a:	2e e1       	ldi	r18, 0x1E	; 30
    381c:	3c e1       	ldi	r19, 0x1C	; 28
    381e:	88 ee       	ldi	r24, 0xE8	; 232
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	b9 01       	movw	r22, r18
    3824:	0e 94 86 1c 	call	0x390c	; 0x390c <IR_vidSetSinglePeriod>
		ir_edge_count++;
    3828:	80 91 cd 01 	lds	r24, 0x01CD
    382c:	8f 5f       	subi	r24, 0xFF	; 255
    382e:	80 93 cd 01 	sts	0x01CD, r24
	}
}
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <IR_vidtakeAction>:
static void IR_vidtakeAction(void)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	0f 92       	push	r0
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62

	u8 i =0;
    3846:	19 82       	std	Y+1, r1	; 0x01

	//	LED_vidToggleLed(LED_e_1);
	ir_signal = 0;
    3848:	10 92 cc 01 	sts	0x01CC, r1
    384c:	10 92 cb 01 	sts	0x01CB, r1
	if((ir_frame[0] > 100) && (ir_frame[0] < 110)){
    3850:	80 91 cf 01 	lds	r24, 0x01CF
    3854:	85 36       	cpi	r24, 0x65	; 101
    3856:	08 f4       	brcc	.+2      	; 0x385a <IR_vidtakeAction+0x1e>
    3858:	4f c0       	rjmp	.+158    	; 0x38f8 <IR_vidtakeAction+0xbc>
    385a:	80 91 cf 01 	lds	r24, 0x01CF
    385e:	8e 36       	cpi	r24, 0x6E	; 110
    3860:	08 f0       	brcs	.+2      	; 0x3864 <IR_vidtakeAction+0x28>
    3862:	4a c0       	rjmp	.+148    	; 0x38f8 <IR_vidtakeAction+0xbc>
		for(i = 0; i < DATA_BITS ; i++){
    3864:	19 82       	std	Y+1, r1	; 0x01
    3866:	44 c0       	rjmp	.+136    	; 0x38f0 <IR_vidtakeAction+0xb4>
			if(ir_frame[17+i] > MIN_OFF_PERIOD && ir_frame[17+i] < MAX_OFF_PERIOD)
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	41 96       	adiw	r24, 0x11	; 17
    3870:	fc 01       	movw	r30, r24
    3872:	e1 53       	subi	r30, 0x31	; 49
    3874:	fe 4f       	sbci	r31, 0xFE	; 254
    3876:	80 81       	ld	r24, Z
    3878:	8d 30       	cpi	r24, 0x0D	; 13
    387a:	00 f1       	brcs	.+64     	; 0x38bc <IR_vidtakeAction+0x80>
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	88 2f       	mov	r24, r24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	41 96       	adiw	r24, 0x11	; 17
    3884:	fc 01       	movw	r30, r24
    3886:	e1 53       	subi	r30, 0x31	; 49
    3888:	fe 4f       	sbci	r31, 0xFE	; 254
    388a:	80 81       	ld	r24, Z
    388c:	85 31       	cpi	r24, 0x15	; 21
    388e:	b0 f4       	brcc	.+44     	; 0x38bc <IR_vidtakeAction+0x80>
			{
				SET_BIT(ir_signal,i);
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	02 c0       	rjmp	.+4      	; 0x38a0 <IR_vidtakeAction+0x64>
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	2a 95       	dec	r18
    38a2:	e2 f7       	brpl	.-8      	; 0x389c <IR_vidtakeAction+0x60>
    38a4:	9c 01       	movw	r18, r24
    38a6:	80 91 cb 01 	lds	r24, 0x01CB
    38aa:	90 91 cc 01 	lds	r25, 0x01CC
    38ae:	82 2b       	or	r24, r18
    38b0:	93 2b       	or	r25, r19
    38b2:	90 93 cc 01 	sts	0x01CC, r25
    38b6:	80 93 cb 01 	sts	0x01CB, r24
    38ba:	17 c0       	rjmp	.+46     	; 0x38ea <IR_vidtakeAction+0xae>
			}else{
				CLR_BIT(ir_signal,i);
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <IR_vidtakeAction+0x90>
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	2a 95       	dec	r18
    38ce:	e2 f7       	brpl	.-8      	; 0x38c8 <IR_vidtakeAction+0x8c>
    38d0:	80 95       	com	r24
    38d2:	90 95       	com	r25
    38d4:	9c 01       	movw	r18, r24
    38d6:	80 91 cb 01 	lds	r24, 0x01CB
    38da:	90 91 cc 01 	lds	r25, 0x01CC
    38de:	82 23       	and	r24, r18
    38e0:	93 23       	and	r25, r19
    38e2:	90 93 cc 01 	sts	0x01CC, r25
    38e6:	80 93 cb 01 	sts	0x01CB, r24
	u8 i =0;

	//	LED_vidToggleLed(LED_e_1);
	ir_signal = 0;
	if((ir_frame[0] > 100) && (ir_frame[0] < 110)){
		for(i = 0; i < DATA_BITS ; i++){
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	8f 5f       	subi	r24, 0xFF	; 255
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	88 30       	cpi	r24, 0x08	; 8
    38f4:	08 f4       	brcc	.+2      	; 0x38f8 <IR_vidtakeAction+0xbc>
    38f6:	b8 cf       	rjmp	.-144    	; 0x3868 <IR_vidtakeAction+0x2c>
				CLR_BIT(ir_signal,i);
			}
		}
	}

	ir_frame[0] = 0;
    38f8:	10 92 cf 01 	sts	0x01CF, r1
	ir_start_flag = 0;
    38fc:	10 92 ce 01 	sts	0x01CE, r1
	ir_edge_count = 0;
    3900:	10 92 cd 01 	sts	0x01CD, r1

}
    3904:	0f 90       	pop	r0
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <IR_vidSetSinglePeriod>:

static void IR_vidSetSinglePeriod(u16 ticks, void (*callback)(void)) {
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	00 d0       	rcall	.+0      	; 0x3912 <IR_vidSetSinglePeriod+0x6>
    3912:	00 d0       	rcall	.+0      	; 0x3914 <IR_vidSetSinglePeriod+0x8>
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	7c 83       	std	Y+4, r23	; 0x04
    391e:	6b 83       	std	Y+3, r22	; 0x03
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
    3920:	ae e4       	ldi	r26, 0x4E	; 78
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	ee e4       	ldi	r30, 0x4E	; 78
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	88 7f       	andi	r24, 0xF8	; 248
    392c:	8c 93       	st	X, r24
	// Reset Timer1 counter
	TCNT1 = 0;
    392e:	ec e4       	ldi	r30, 0x4C	; 76
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	11 82       	std	Z+1, r1	; 0x01
    3934:	10 82       	st	Z, r1

	// Set Timer1 to CTC mode with prescaler = 1024
	TCCR1A = 0;
    3936:	ef e4       	ldi	r30, 0x4F	; 79
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
    393c:	ae e4       	ldi	r26, 0x4E	; 78
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	ee e4       	ldi	r30, 0x4E	; 78
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	8d 60       	ori	r24, 0x0D	; 13
    3948:	8c 93       	st	X, r24
	// Set compare match value to ticks
	OCR1A = ticks;
    394a:	ea e4       	ldi	r30, 0x4A	; 74
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	9a 81       	ldd	r25, Y+2	; 0x02
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
	// Enable compare match interrupt
	TIMSK |= (1 << OCIE1A);
    3956:	a9 e5       	ldi	r26, 0x59	; 89
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e9 e5       	ldi	r30, 0x59	; 89
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 61       	ori	r24, 0x10	; 16
    3962:	8c 93       	st	X, r24
	// Set callback function to be called on interrupt
	if(callback != NULL){
    3964:	8b 81       	ldd	r24, Y+3	; 0x03
    3966:	9c 81       	ldd	r25, Y+4	; 0x04
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	31 f0       	breq	.+12     	; 0x3978 <IR_vidSetSinglePeriod+0x6c>

		isr_timer1_callback = callback;
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	90 93 02 02 	sts	0x0202, r25
    3974:	80 93 01 02 	sts	0x0201, r24
	}
}
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <IR_u16GetElapsedTime>:
static u16 IR_u16GetElapsedTime(void)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    398e:	ec e4       	ldi	r30, 0x4C	; 76
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	91 81       	ldd	r25, Z+1	; 0x01
}
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <__vector_7>:
// Interrupt service routine for Timer1 compare match
ISR(TIMER1_COMPA_vect) {
    399c:	1f 92       	push	r1
    399e:	0f 92       	push	r0
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	0f 92       	push	r0
    39a4:	11 24       	eor	r1, r1
    39a6:	2f 93       	push	r18
    39a8:	3f 93       	push	r19
    39aa:	4f 93       	push	r20
    39ac:	5f 93       	push	r21
    39ae:	6f 93       	push	r22
    39b0:	7f 93       	push	r23
    39b2:	8f 93       	push	r24
    39b4:	9f 93       	push	r25
    39b6:	af 93       	push	r26
    39b8:	bf 93       	push	r27
    39ba:	ef 93       	push	r30
    39bc:	ff 93       	push	r31
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
	// Call the callback function provided to setup_timer1()
	if(isr_timer1_callback != NULL){
    39c6:	80 91 01 02 	lds	r24, 0x0201
    39ca:	90 91 02 02 	lds	r25, 0x0202
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	29 f0       	breq	.+10     	; 0x39dc <__vector_7+0x40>
		isr_timer1_callback();
    39d2:	e0 91 01 02 	lds	r30, 0x0201
    39d6:	f0 91 02 02 	lds	r31, 0x0202
    39da:	09 95       	icall
	}
}
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	ff 91       	pop	r31
    39e2:	ef 91       	pop	r30
    39e4:	bf 91       	pop	r27
    39e6:	af 91       	pop	r26
    39e8:	9f 91       	pop	r25
    39ea:	8f 91       	pop	r24
    39ec:	7f 91       	pop	r23
    39ee:	6f 91       	pop	r22
    39f0:	5f 91       	pop	r21
    39f2:	4f 91       	pop	r20
    39f4:	3f 91       	pop	r19
    39f6:	2f 91       	pop	r18
    39f8:	0f 90       	pop	r0
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	0f 90       	pop	r0
    39fe:	1f 90       	pop	r1
    3a00:	18 95       	reti

00003a02 <main>:
u8 CAN_MESSAGE_2 []= {'I','b', '#' } ;
u8 CAN_MESSAGE_3 []= {'I','l','#'  } ;
u8 CAN_MESSAGE_4 []= {'I','r','#' } ;
u8 CAN_MESSAGE_5 []= {'I','s', '#' } ;

int main(){
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	69 97       	sbiw	r28, 0x19	; 25
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
	LED_e arr[] = {LED_e_1,LED_e_2,LED_e_3,LED_e_4,LED_e_5, LED_e_7};
    3a16:	9e 01       	movw	r18, r28
    3a18:	2f 5f       	subi	r18, 0xFF	; 255
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1c:	39 8b       	std	Y+17, r19	; 0x11
    3a1e:	28 8b       	std	Y+16, r18	; 0x10
    3a20:	86 eb       	ldi	r24, 0xB6	; 182
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	9b 8b       	std	Y+19, r25	; 0x13
    3a26:	8a 8b       	std	Y+18, r24	; 0x12
    3a28:	96 e0       	ldi	r25, 0x06	; 6
    3a2a:	9c 8b       	std	Y+20, r25	; 0x14
    3a2c:	ea 89       	ldd	r30, Y+18	; 0x12
    3a2e:	fb 89       	ldd	r31, Y+19	; 0x13
    3a30:	00 80       	ld	r0, Z
    3a32:	2a 89       	ldd	r18, Y+18	; 0x12
    3a34:	3b 89       	ldd	r19, Y+19	; 0x13
    3a36:	2f 5f       	subi	r18, 0xFF	; 255
    3a38:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3a:	3b 8b       	std	Y+19, r19	; 0x13
    3a3c:	2a 8b       	std	Y+18, r18	; 0x12
    3a3e:	e8 89       	ldd	r30, Y+16	; 0x10
    3a40:	f9 89       	ldd	r31, Y+17	; 0x11
    3a42:	00 82       	st	Z, r0
    3a44:	28 89       	ldd	r18, Y+16	; 0x10
    3a46:	39 89       	ldd	r19, Y+17	; 0x11
    3a48:	2f 5f       	subi	r18, 0xFF	; 255
    3a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4c:	39 8b       	std	Y+17, r19	; 0x11
    3a4e:	28 8b       	std	Y+16, r18	; 0x10
    3a50:	3c 89       	ldd	r19, Y+20	; 0x14
    3a52:	31 50       	subi	r19, 0x01	; 1
    3a54:	3c 8b       	std	Y+20, r19	; 0x14
    3a56:	8c 89       	ldd	r24, Y+20	; 0x14
    3a58:	88 23       	and	r24, r24
    3a5a:	41 f7       	brne	.-48     	; 0x3a2c <main+0x2a>
	LED_vidInit(arr,6);
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	66 e0       	ldi	r22, 0x06	; 6
    3a62:	0e 94 4f 14 	call	0x289e	; 0x289e <LED_vidInit>
	USART_Config_t Local_Usart_STR = {.usart_charSize_slct = USART_CharcterSize_t_8,
			.usart_circuit_enable = USART_Enable_t_TXAndRXEnable,
			.usart_parity = USART_ParityMode_t_Disable,
			.usart_speed_slct = USART_Speed_t_NormalSpeed,
			.usart_stopBits_slct = USART_StopBitSlct_t_OneBit
	};
    3a66:	fe 01       	movw	r30, r28
    3a68:	37 96       	adiw	r30, 0x07	; 7
    3a6a:	fe 8b       	std	Y+22, r31	; 0x16
    3a6c:	ed 8b       	std	Y+21, r30	; 0x15
    3a6e:	21 eb       	ldi	r18, 0xB1	; 177
    3a70:	31 e0       	ldi	r19, 0x01	; 1
    3a72:	38 8f       	std	Y+24, r19	; 0x18
    3a74:	2f 8b       	std	Y+23, r18	; 0x17
    3a76:	35 e0       	ldi	r19, 0x05	; 5
    3a78:	39 8f       	std	Y+25, r19	; 0x19
    3a7a:	ef 89       	ldd	r30, Y+23	; 0x17
    3a7c:	f8 8d       	ldd	r31, Y+24	; 0x18
    3a7e:	00 80       	ld	r0, Z
    3a80:	2f 89       	ldd	r18, Y+23	; 0x17
    3a82:	38 8d       	ldd	r19, Y+24	; 0x18
    3a84:	2f 5f       	subi	r18, 0xFF	; 255
    3a86:	3f 4f       	sbci	r19, 0xFF	; 255
    3a88:	38 8f       	std	Y+24, r19	; 0x18
    3a8a:	2f 8b       	std	Y+23, r18	; 0x17
    3a8c:	ed 89       	ldd	r30, Y+21	; 0x15
    3a8e:	fe 89       	ldd	r31, Y+22	; 0x16
    3a90:	00 82       	st	Z, r0
    3a92:	2d 89       	ldd	r18, Y+21	; 0x15
    3a94:	3e 89       	ldd	r19, Y+22	; 0x16
    3a96:	2f 5f       	subi	r18, 0xFF	; 255
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	3e 8b       	std	Y+22, r19	; 0x16
    3a9c:	2d 8b       	std	Y+21, r18	; 0x15
    3a9e:	39 8d       	ldd	r19, Y+25	; 0x19
    3aa0:	31 50       	subi	r19, 0x01	; 1
    3aa2:	39 8f       	std	Y+25, r19	; 0x19
    3aa4:	89 8d       	ldd	r24, Y+25	; 0x19
    3aa6:	88 23       	and	r24, r24
    3aa8:	41 f7       	brne	.-48     	; 0x3a7a <main+0x78>

	//LCD Initialization.
	LCD_vidInit();
    3aaa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_vidInit>
	IR_Init() ;
    3aae:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <IR_Init>



	//External Interrupt Configurations.
	EXTI_u8SetSource(EXTI_INT_0, EXTI_FALLING_EDGE);
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	62 e0       	ldi	r22, 0x02	; 2
    3ab6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EXTI_u8SetSource>
	EXTI_voidSet_INT0_Cbf(APP_Recieve_Data_CAN);
    3aba:	80 e4       	ldi	r24, 0x40	; 64
    3abc:	9e e1       	ldi	r25, 0x1E	; 30
    3abe:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EXTI_voidSet_INT0_Cbf>
	EXTI_u8EnablePIE(EXTI_INT_0);
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EXTI_u8EnablePIE>
	EXTI_voidEnableGIE();
    3ac8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_voidEnableGIE>
	//CAN Initialization.
	//	HMCP2515_voidInitTransimiter() ;
	//	HMCP2515_voidRecievInit();

	//USART Initialization.
	USART_init(&Local_Usart_STR);
    3acc:	ce 01       	movw	r24, r28
    3ace:	07 96       	adiw	r24, 0x07	; 7
    3ad0:	0e 94 17 07 	call	0xe2e	; 0xe2e <USART_init>
	USART_ReceiveData_interrupt(APP_Recieve_Data_Usart);
    3ad4:	8b e2       	ldi	r24, 0x2B	; 43
    3ad6:	9e e1       	ldi	r25, 0x1E	; 30
    3ad8:	0e 94 0f 08 	call	0x101e	; 0x101e <USART_ReceiveData_interrupt>


	while(1)
	{
		LCD_vidClear();
    3adc:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
		LCD_vidSendInt(ir_signal);
    3ae0:	80 91 cb 01 	lds	r24, 0x01CB
    3ae4:	90 91 cc 01 	lds	r25, 0x01CC
    3ae8:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_vidSendInt>

		//IR Remote code
		switch(ir_signal)
    3aec:	e0 91 cb 01 	lds	r30, 0x01CB
    3af0:	f0 91 cc 01 	lds	r31, 0x01CC
    3af4:	ff 87       	std	Y+15, r31	; 0x0f
    3af6:	ee 87       	std	Y+14, r30	; 0x0e
    3af8:	2e 85       	ldd	r18, Y+14	; 0x0e
    3afa:	3f 85       	ldd	r19, Y+15	; 0x0f
    3afc:	27 30       	cpi	r18, 0x07	; 7
    3afe:	31 05       	cpc	r19, r1
    3b00:	59 f1       	breq	.+86     	; 0x3b58 <main+0x156>
    3b02:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b04:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b06:	88 30       	cpi	r24, 0x08	; 8
    3b08:	91 05       	cpc	r25, r1
    3b0a:	58 f4       	brcc	.+22     	; 0x3b22 <main+0x120>
    3b0c:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b0e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b10:	e2 30       	cpi	r30, 0x02	; 2
    3b12:	f1 05       	cpc	r31, r1
    3b14:	e9 f0       	breq	.+58     	; 0x3b50 <main+0x14e>
    3b16:	2e 85       	ldd	r18, Y+14	; 0x0e
    3b18:	3f 85       	ldd	r19, Y+15	; 0x0f
    3b1a:	23 30       	cpi	r18, 0x03	; 3
    3b1c:	31 05       	cpc	r19, r1
    3b1e:	61 f0       	breq	.+24     	; 0x3b38 <main+0x136>
    3b20:	1e c0       	rjmp	.+60     	; 0x3b5e <main+0x15c>
    3b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b24:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b26:	8e 30       	cpi	r24, 0x0E	; 14
    3b28:	91 05       	cpc	r25, r1
    3b2a:	71 f0       	breq	.+28     	; 0x3b48 <main+0x146>
    3b2c:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b2e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b30:	ea 31       	cpi	r30, 0x1A	; 26
    3b32:	f1 05       	cpc	r31, r1
    3b34:	29 f0       	breq	.+10     	; 0x3b40 <main+0x13e>
    3b36:	13 c0       	rjmp	.+38     	; 0x3b5e <main+0x15c>
		{
		case APP_GO_FORWORD://up
			LED_vidTurnOnLed(LED_e_1);
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	0e 94 be 14 	call	0x297c	; 0x297c <LED_vidTurnOnLed>
    3b3e:	0f c0       	rjmp	.+30     	; 0x3b5e <main+0x15c>
			//Send the direction to the adaptive node.
//			HMCP2515_VidSendCAN_Msg(TXB0CTRL , CAN_Msg_ID , _Data_Msg_Lentgh_, CAN_MESSAGE_1);

			break;
		case APP_GO_RIGHT://right
			LED_vidTurnOnLed(LED_e_2);
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	0e 94 be 14 	call	0x297c	; 0x297c <LED_vidTurnOnLed>
    3b46:	0b c0       	rjmp	.+22     	; 0x3b5e <main+0x15c>
			//Send the direction to the adaptive node.
			//			HMCP2515_VidSendCAN_Msg(TXB0CTRL, CAN_Msg_ID , _Data_Msg_Lentgh_ , CAN_MESSAGE_4);

			break;
		case APP_GO_LEFT://left
			LED_vidTurnOnLed(LED_e_3);
    3b48:	83 e0       	ldi	r24, 0x03	; 3
    3b4a:	0e 94 be 14 	call	0x297c	; 0x297c <LED_vidTurnOnLed>
    3b4e:	07 c0       	rjmp	.+14     	; 0x3b5e <main+0x15c>
			//Send the direction to the adaptive node.
			//			HMCP2515_VidSendCAN_Msg(TXB0CTRL, CAN_Msg_ID, _Data_Msg_Lentgh_, CAN_MESSAGE_3);

			break;
		case APP_GO_BACKWORD://down
			LED_vidTurnOnLed(LED_e_4);
    3b50:	84 e0       	ldi	r24, 0x04	; 4
    3b52:	0e 94 be 14 	call	0x297c	; 0x297c <LED_vidTurnOnLed>
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <main+0x15c>
			//Send the direction to the adaptive node.
			//			HMCP2515_VidSendCAN_Msg(TXB0CTRL, CAN_Msg_ID, _Data_Msg_Lentgh_, CAN_MESSAGE_2);

			break;
		case APP_STOP_CAR://ok
			LED_vidTurnOnLed(LED_e_5);
    3b58:	85 e0       	ldi	r24, 0x05	; 5
    3b5a:	0e 94 be 14 	call	0x297c	; 0x297c <LED_vidTurnOnLed>

			break;
		}

		//Check if data is received using the can
		if(Global_SignFlag == 1)
    3b5e:	80 91 06 02 	lds	r24, 0x0206
    3b62:	81 30       	cpi	r24, 0x01	; 1
    3b64:	09 f0       	breq	.+2      	; 0x3b68 <main+0x166>
    3b66:	ba cf       	rjmp	.-140    	; 0x3adc <main+0xda>
		{
			//Check if the data is sign data received from the master node.
			if(Global_SignBuffer[0] == 'S')
    3b68:	80 91 03 02 	lds	r24, 0x0203
    3b6c:	83 35       	cpi	r24, 0x53	; 83
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <main+0x170>
    3b70:	5b c0       	rjmp	.+182    	; 0x3c28 <main+0x226>
			{
				switch(Global_SignBuffer[1]){
    3b72:	80 91 04 02 	lds	r24, 0x0204
    3b76:	28 2f       	mov	r18, r24
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	3d 87       	std	Y+13, r19	; 0x0d
    3b7c:	2c 87       	std	Y+12, r18	; 0x0c
    3b7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b80:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b82:	8c 36       	cpi	r24, 0x6C	; 108
    3b84:	91 05       	cpc	r25, r1
    3b86:	d1 f1       	breq	.+116    	; 0x3bfc <main+0x1fa>
    3b88:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b8a:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b8c:	ed 36       	cpi	r30, 0x6D	; 109
    3b8e:	f1 05       	cpc	r31, r1
    3b90:	34 f4       	brge	.+12     	; 0x3b9e <main+0x19c>
    3b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b94:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b96:	22 36       	cpi	r18, 0x62	; 98
    3b98:	31 05       	cpc	r19, r1
    3b9a:	29 f1       	breq	.+74     	; 0x3be6 <main+0x1e4>
    3b9c:	59 c0       	rjmp	.+178    	; 0x3c50 <main+0x24e>
    3b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ba2:	82 37       	cpi	r24, 0x72	; 114
    3ba4:	91 05       	cpc	r25, r1
    3ba6:	a9 f1       	breq	.+106    	; 0x3c12 <main+0x210>
    3ba8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3baa:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bac:	e3 37       	cpi	r30, 0x73	; 115
    3bae:	f1 05       	cpc	r31, r1
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <main+0x1b2>
    3bb2:	4e c0       	rjmp	.+156    	; 0x3c50 <main+0x24e>
				case 's':
					LCD_vidClear();
    3bb4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
					LCD_u8Goto(1,1);
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
					LCD_vidSendString("Speed Sign");
    3bc0:	80 e6       	ldi	r24, 0x60	; 96
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
					LCD_u8Goto(2,1);
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
					LCD_vidSendString("Speed : ");
    3bd0:	8b e6       	ldi	r24, 0x6B	; 107
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
					LCD_vidSendInt(Global_SignBuffer[2]);
    3bd8:	80 91 05 02 	lds	r24, 0x0205
    3bdc:	88 2f       	mov	r24, r24
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_vidSendInt>
    3be4:	35 c0       	rjmp	.+106    	; 0x3c50 <main+0x24e>
					break;
				case 'b':
					LCD_vidClear();
    3be6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
					LCD_u8Goto(1,1);
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	61 e0       	ldi	r22, 0x01	; 1
    3bee:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
					LCD_vidSendString("Bump");
    3bf2:	84 e7       	ldi	r24, 0x74	; 116
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
    3bfa:	2a c0       	rjmp	.+84     	; 0x3c50 <main+0x24e>
					break;
				case 'l':
					LCD_vidClear();
    3bfc:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
					LCD_u8Goto(1,1);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
					LCD_vidSendString("Turn Left");
    3c08:	89 e7       	ldi	r24, 0x79	; 121
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
    3c10:	1f c0       	rjmp	.+62     	; 0x3c50 <main+0x24e>
					break;
				case 'r':
					LCD_vidClear();
    3c12:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
					LCD_u8Goto(1,1);
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
					LCD_vidSendString("Turn right");
    3c1e:	83 e8       	ldi	r24, 0x83	; 131
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
    3c26:	14 c0       	rjmp	.+40     	; 0x3c50 <main+0x24e>
					break;

				}
			}
			//Check if the data is speed data received from the adaptive node.
			else if(Global_SignBuffer[0] == 'V')
    3c28:	80 91 03 02 	lds	r24, 0x0203
    3c2c:	86 35       	cpi	r24, 0x56	; 86
    3c2e:	81 f4       	brne	.+32     	; 0x3c50 <main+0x24e>
			{
				LCD_vidClear();
    3c30:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_vidClear>
				LCD_u8Goto(2,1);
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	61 e0       	ldi	r22, 0x01	; 1
    3c38:	0e 94 af 1a 	call	0x355e	; 0x355e <LCD_u8Goto>
				LCD_vidSendString("Speed = ");
    3c3c:	8e e8       	ldi	r24, 0x8E	; 142
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_vidSendString>
				LCD_vidSendInt(Global_SignBuffer[1]);
    3c44:	80 91 04 02 	lds	r24, 0x0204
    3c48:	88 2f       	mov	r24, r24
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 1f 1b 	call	0x363e	; 0x363e <LCD_vidSendInt>
			}

			Global_SignFlag = 0;
    3c50:	10 92 06 02 	sts	0x0206, r1
    3c54:	43 cf       	rjmp	.-378    	; 0x3adc <main+0xda>

00003c56 <APP_Recieve_Data_Usart>:

}


void APP_Recieve_Data_Usart(u8 data)
{
    3c56:	df 93       	push	r29
    3c58:	cf 93       	push	r28
    3c5a:	0f 92       	push	r0
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	89 83       	std	Y+1, r24	; 0x01
	//	LCD_vidWriteChar(data);
	if(data == 'B')
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	82 34       	cpi	r24, 0x42	; 66
    3c66:	41 f4       	brne	.+16     	; 0x3c78 <APP_Recieve_Data_Usart+0x22>
	{
		//Send B to the adaptive node by CAN
		HMCP2515_VidSendCAN_Msg(TXB0CTRL ,CAN_Msg_ID ,_Data_Msg_Lentgh_ ,CAN_Msg) ;
    3c68:	20 ea       	ldi	r18, 0xA0	; 160
    3c6a:	31 e0       	ldi	r19, 0x01	; 1
    3c6c:	80 e3       	ldi	r24, 0x30	; 48
    3c6e:	63 e0       	ldi	r22, 0x03	; 3
    3c70:	70 e0       	ldi	r23, 0x00	; 0
    3c72:	43 e0       	ldi	r20, 0x03	; 3
    3c74:	0e 94 66 12 	call	0x24cc	; 0x24cc <HMCP2515_VidSendCAN_Msg>
	}
}
    3c78:	0f 90       	pop	r0
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <APP_Recieve_Data_CAN>:

void APP_Recieve_Data_CAN(void)
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	00 d0       	rcall	.+0      	; 0x3c86 <APP_Recieve_Data_CAN+0x6>
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
	//Receive data from the Routing and the adaptive nodes.
	HMCP2515_voidRecieveMess(RXB0CTRL) ;
    3c8a:	80 e6       	ldi	r24, 0x60	; 96
    3c8c:	0e 94 8e 13 	call	0x271c	; 0x271c <HMCP2515_voidRecieveMess>
	//the routing node should send the sign.
	//the adaptive node should send the current speed.
	u8 _Data_Lentgh_Rec_ = REC_Message[5] ;
    3c90:	80 91 0c 02 	lds	r24, 0x020C
    3c94:	8a 83       	std	Y+2, r24	; 0x02
	//Store the received data into the SignBuffer.

	for( u8 Index =0 ; Index < 3; Index++)
    3c96:	19 82       	std	Y+1, r1	; 0x01
    3c98:	12 c0       	rjmp	.+36     	; 0x3cbe <APP_Recieve_Data_CAN+0x3e>
	{
		Global_SignBuffer [Index]= REC_Message[6 + Index] ;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	88 2f       	mov	r24, r24
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	06 96       	adiw	r24, 0x06	; 6
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e9 5f       	subi	r30, 0xF9	; 249
    3cac:	fd 4f       	sbci	r31, 0xFD	; 253
    3cae:	80 81       	ld	r24, Z
    3cb0:	f9 01       	movw	r30, r18
    3cb2:	ed 5f       	subi	r30, 0xFD	; 253
    3cb4:	fd 4f       	sbci	r31, 0xFD	; 253
    3cb6:	80 83       	st	Z, r24
	//the routing node should send the sign.
	//the adaptive node should send the current speed.
	u8 _Data_Lentgh_Rec_ = REC_Message[5] ;
	//Store the received data into the SignBuffer.

	for( u8 Index =0 ; Index < 3; Index++)
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	8f 5f       	subi	r24, 0xFF	; 255
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	83 30       	cpi	r24, 0x03	; 3
    3cc2:	58 f3       	brcs	.-42     	; 0x3c9a <APP_Recieve_Data_CAN+0x1a>
	{
		Global_SignBuffer [Index]= REC_Message[6 + Index] ;
	}

	//Set the flag to indicate that data is received.
	Global_SignFlag = 1;
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	80 93 06 02 	sts	0x0206, r24
}
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <__udivmodhi4>:
    3cd4:	aa 1b       	sub	r26, r26
    3cd6:	bb 1b       	sub	r27, r27
    3cd8:	51 e1       	ldi	r21, 0x11	; 17
    3cda:	07 c0       	rjmp	.+14     	; 0x3cea <__udivmodhi4_ep>

00003cdc <__udivmodhi4_loop>:
    3cdc:	aa 1f       	adc	r26, r26
    3cde:	bb 1f       	adc	r27, r27
    3ce0:	a6 17       	cp	r26, r22
    3ce2:	b7 07       	cpc	r27, r23
    3ce4:	10 f0       	brcs	.+4      	; 0x3cea <__udivmodhi4_ep>
    3ce6:	a6 1b       	sub	r26, r22
    3ce8:	b7 0b       	sbc	r27, r23

00003cea <__udivmodhi4_ep>:
    3cea:	88 1f       	adc	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	5a 95       	dec	r21
    3cf0:	a9 f7       	brne	.-22     	; 0x3cdc <__udivmodhi4_loop>
    3cf2:	80 95       	com	r24
    3cf4:	90 95       	com	r25
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	08 95       	ret

00003cfc <__prologue_saves__>:
    3cfc:	2f 92       	push	r2
    3cfe:	3f 92       	push	r3
    3d00:	4f 92       	push	r4
    3d02:	5f 92       	push	r5
    3d04:	6f 92       	push	r6
    3d06:	7f 92       	push	r7
    3d08:	8f 92       	push	r8
    3d0a:	9f 92       	push	r9
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	ca 1b       	sub	r28, r26
    3d26:	db 0b       	sbc	r29, r27
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	09 94       	ijmp

00003d34 <__epilogue_restores__>:
    3d34:	2a 88       	ldd	r2, Y+18	; 0x12
    3d36:	39 88       	ldd	r3, Y+17	; 0x11
    3d38:	48 88       	ldd	r4, Y+16	; 0x10
    3d3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d40:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d42:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d44:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d46:	b9 84       	ldd	r11, Y+9	; 0x09
    3d48:	c8 84       	ldd	r12, Y+8	; 0x08
    3d4a:	df 80       	ldd	r13, Y+7	; 0x07
    3d4c:	ee 80       	ldd	r14, Y+6	; 0x06
    3d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d50:	0c 81       	ldd	r16, Y+4	; 0x04
    3d52:	1b 81       	ldd	r17, Y+3	; 0x03
    3d54:	aa 81       	ldd	r26, Y+2	; 0x02
    3d56:	b9 81       	ldd	r27, Y+1	; 0x01
    3d58:	ce 0f       	add	r28, r30
    3d5a:	d1 1d       	adc	r29, r1
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	ed 01       	movw	r28, r26
    3d68:	08 95       	ret

00003d6a <_exit>:
    3d6a:	f8 94       	cli

00003d6c <__stop_program>:
    3d6c:	ff cf       	rjmp	.-2      	; 0x3d6c <__stop_program>
